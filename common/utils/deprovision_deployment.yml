---

# This Utility task file can delete the application and its underlying resources such as pvc and service from K8s cluster
# This accepts application namespace, application label and application manifest file as input parameters.
# The parameters used are
#         - app_deployer ( Deployment spec yaml file )
#         - app_ns       ( application namespace )
#         - app_label    ( application label)
#

- name: Check if the application to be deleted is running.
  shell: kubectl get pods -n {{ app_ns }} -l {{ app_label }} --no-headers -o custom-columns=:status.phase
  args:
    executable: /bin/bash
  register: result
  until: "'Running' in result.stdout"
  delay: 30
  retries: 10

- name: Obtaining the PVC name using application label.
  shell: kubectl get pods -n {{ app_ns }} -l {{ app_label }} -o custom-columns=:..claimName --no-headers
  args:
    executable: /bin/bash
  register: pvc_name

- name: Obtaining the PV name from PVC name.
  shell: kubectl get pvc {{ pvc_name.stdout }} -n {{ app_ns }} -o custom-columns=:spec.volumeName --no-headers
  args:
    executable: /bin/bash
  register: pv_name

## Replacing the item names in the respective deployer spec file.

- name: Replace the PVC name in application deployer spec.
  replace:
    path: "{{ app_deployer }}"
    regexp: "testclaim"
    replace: "{{ lookup('env','APP_PVC') }}"
  when: app_pvc is defined

- name: Replace the storageclass placeholder with provider
  replace:
    path: "{{ app_deployer }}"
    regexp: "testclass"
    replace: "{{ lookup('env','PROVIDER_STORAGE_CLASS') }}"
  when: storage_class is defined

- block:

    - name: Get the application label values from env
      set_fact:
        app_lkey: "{{ app_label.split('=')[0] }}"
        app_lvalue: "{{ app_label.split('=')[1] }}"

    - name: Replace the application label placeholder
      replace:
        path: "{{ app_deployer }}"
        regexp: "lkey: lvalue"
        replace: "{{ app_lkey }}: {{ app_lvalue }}"
  when: app_label is defined

- name: Delete the application deployment.
  shell: kubectl delete -f {{ app_deployer }} -n {{ app_ns }}
  args:
    executable: /bin/bash

- name: Check if the application namespace doesn't have any resources.
  shell: kubectl get all -n {{ app_ns }} --no-headers
  args:
    executable: /bin/bash
  register: resource_list
  until: "'No resources found' in resource_list.stdout"
  delay: 30
  retries: 30

- name: Delete the namespace.
  shell: kubectl delete ns {{ app_ns }}
  args:
    executable: /bin/bash

- name: Check if the PV is deleted.
  shell: kubectl get pv {{ pv_name.stdout }}
  args:
    executable: /bin/bash
  register: pv_result
  failed_when: pv_result.rc == 0
