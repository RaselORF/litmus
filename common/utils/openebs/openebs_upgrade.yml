
- name: Obtain the PV.
  shell: kubectl get pvc {{ pv_claim }} -n {{ app_ns }} --no-headers -o custom-columns=:spec.volumeName
  register: pv

- name: Record volume name.
  set_fact:
     vol_name: "{{ pv.stdout }}"

- block:

    - block:
        - name: Obtain the storage pool claim name.
          shell: kubectl get spc --no-headers -o=custom-columns=NAME:.metadata.name
          register: spc

        - name: Record the spc.
          set_fact:
             storage_pool_claim: "{{ spc.stdout }}"

        - name: Subtitute the cstor pool and volume script with  upgrade version release tag.
          lineinfile:
           path: "{{ item.path }}"
           regexp: "{{ item.regexp }}"
           line: "{{ item.line }}"
          with_items:
           - { path: '/openebs_upgrade/cstor_pool_upgrade.sh', regexp: '^pool_upgrade_version=', line: 'pool_upgrade_version={{ new_tag }}'}
           - { path: '/openebs_upgrade/cstor_volume_upgrade.sh', regexp: '^target_upgrade_version=', line: 'target_upgrade_version={{ new_tag }}'}

        #  containers cstor_pool and cstor_pool_mgmt  upgrade from cstor_pool_upgrade.sh #
        #  containers cstor_istgt,maya-volume-exporter,cstor-volume-mgmt upgrade from cstor_volume_upgrade.sh 

        - name: Trigger the cstor pool and  volume upgrade.
          shell: "{{ item }}"
          args:
            chdir: "/openebs_upgrade"
            executable: "/bin/bash"
          with_items:
            - "./cstor_pool_upgrade.sh {{ storage_pool_claim }} {{ operator_ns }} "
            - "./cstor_volume_upgrade.sh {{ vol_name }} {{ operator_ns }}"

        - include_tasks: /common/utils/check_deployment_status.yml

        - name: Randomly select the pool deployment from cvr
          shell: >
              kubectl get cvr -n {{ operator_ns }}
              -l openebs.io/persistent-volume={{ vol_name }} --no-headers
              -o=jsonpath='{range .items[*]}{.metadata.labels.cstorpool\.openebs\.io\/name}{"\n"}{end}' |
              shuf -n1 | awk '{print $1}'
          args:
            executable: /bin/bash
          register: pool_deployment

        - name: Get the pod of pool deployment
          shell: >
            kubectl get pods -n {{ operator_ns }} |
            grep {{ pool_deployment.stdout }} | grep -w "Running" | awk '{print $1}'
          args:
            executable: /bin/bash
          register: cstor_pool_pod

        - name: Get the runningStatus of pool pod
          shell: >
             kubectl get pod {{ cstor_pool_pod.stdout }} -n {{ operator_ns }}
             -o=jsonpath='{range .status.containerStatuses[*]}{.state}{"\n"}{end}' |
             grep -w running | wc -l
          args:
            executable: /bin/bash
          register: runningStatusCount
          until: "runningStatusCount.stdout == \"2\""
          delay: 2
          retries: 150

        - name: Verify the pool pod quorum value is set to on.
          shell: >
             kubectl exec {{ cstor_pool_pod.stdout }} -n {{ operator_ns }}
             -c cstor-pool-mgmt -- zfs get quorum | grep -ow off | wc -l
          args:
            executable: /bin/bash
          register: value
          failed_when: "'off' in value.stdout"

        - name: Verify the conatiner image of cstor pool pods post upgrade.
          shell: >
              kubectl get pod {{ cstor_pool_pod.stdout }} -n {{ operator_ns }}
              -o jsonpath="{..image}" |tr -s '[[:space:]]' '\n' |sort |uniq -c
          args:
            executable: /bin/bash
          register: cpool_image
          failed_when: " new_tag not in cpool_image.stdout "

        - name: Pick a cStor target pod belonging to the PV
          shell: >
            kubectl get pods -l openebs.io/target=cstor-target
            -n {{ operator_ns }} --no-headers | grep {{ vol_name }}
            | shuf -n1 | awk '{print $1}'
          args:
            executable: /bin/bash
          register: cstor_target_pod

        - name: Get the runningStatus of target pod
          shell: >
            kubectl get pod {{ cstor_target_pod.stdout }} -n {{ operator_ns }}
            -o=jsonpath='{range .status.containerStatuses[*]}{.state}{"\n"}{end}' |
            grep -w running | wc -l
          args:
            executable: /bin/bash
          register: runningStatusCount
          until: "runningStatusCount.stdout == \"3\""
          delay: 30
          retries: 10

        - name: Verify the containers image of target pod post upgrade.
          shell: >
              kubectl get pod {{ cstor_target_pod.stdout }} -n 
              {{ operator_ns }} -o jsonpath="{..image}" |tr -s '[[:space:]]' '\n' |sort |uniq -c
          args: 
            executable: /bin/bash
          register: target_images
          failed_when: "new_tag not in target_images.stdout"

      when: lookup('env','STORAGE_ENGINE') == 'cstor'

    - block:

        - name: Identify the initial jiva ctrl pod name before upgrade.
          shell: >
             kubectl get pods -l openebs.io/controller=jiva-controller
             -n {{ app_ns }} --no-headers | grep {{ vol_name }}
             | awk '{print $1}'
          args:
            executable: /bin/bash
          register: jiva_ctrl_pod_bfr_upgrd

        - name: Subtitute the target upgrade version release tag.
          lineinfile:
            path: /openebs_upgrade/jiva_volume_upgrade.sh
            regexp: '^target_upgrade_version='
            line: 'target_upgrade_version={{ new_tag }}'

        ## ctrl containers jiva and m-exporter + replica container jiva upgrade ##

        - name: Trigger the jiva volume upgrade.
          shell: "/openebs_upgrade/jiva_volume_upgrade.sh {{ vol_name }}"
          args:
            chdir: "/openebs_upgrade"
            executable: "/bin/bash"

        - include_tasks: /common/utils/check_deployment_status.yml

        - name: Checking the presence of initial jiva ctrl pod.
          shell: >
              kubectl get pods -l openebs.io/controller=jiva-controller
              -n {{ app_ns }} --no-headers | grep {{ vol_name }}
              | awk '{print $1}'
          args:
            executable: /bin/bash
          register: jiva_ctrl_pod_after_upgrde
          until: "jiva_ctrl_pod_bfr_upgrd.stdout not in jiva_ctrl_pod_after_upgrde.stdout"
          retries: 5
          delay: 10

        - name: Check the ctrl pod container image post upgrade.
          shell: >
              kubectl get pod {{ jiva_ctrl_pod_after_upgrde.stdout }} -n {{ app_ns }}
              -o jsonpath="{..image}" |tr -s '[[:space:]]' '\n' |sort |uniq -c
          args:
            executable: /bin/bash
          register: ctrl_image
          failed_when: " new_tag not in ctrl_image.stdout "

        - name: Identify the jiva replica pod belonging to the PV
          shell: >
            kubectl get pods -l openebs.io/replica=jiva-replica
            -n {{ app_ns }} --no-headers | grep {{ pv.stdout }}
            | awk 'FNR == 1 {print}'| awk {'print $1'}
          args:
            executable: /bin/bash
          register: jiva_replica_pod

        - name: Verify the jiva replica container image post upgrade.
          shell: >
                kubectl get pod {{ jiva_replica_pod.stdout }} -n {{ app_ns }}
                -o jsonpath="{..image}" |tr -s '[[:space:]]' '\n' |sort |uniq -c
          args:
             executable: /bin/bash
          register: rep_image
          failed_when: "new_tag not in rep_image.stdout"

      when:  lookup('env','STORAGE_ENGINE')  == 'jiva'


