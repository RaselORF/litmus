- name: Obtain node where app pod resides
  shell: >
    kubectl get pods -l {{ app_label }} -n {{ app_ns }}
    --no-headers -o custom-columns=:spec.nodeName
  args:
    executable: /bin/bash
  register: app_node

- name: Derive PV from application PVC
  shell: >
    kubectl get pvc {{ app_pvc }}
    -o custom-columns=:spec.volumeName -n {{ app_ns }}
    --no-headers
  args:
    executable: /bin/bash
  register: pv

- name: Derive storage engine from PV
  shell: >
    kubectl get pv {{ pv.stdout }} --no-headers
    -o jsonpath="{.metadata.annotations.openebs\\.io/cas-type}"
  args:
    executable: /bin/bash
  register: stg_engine

- set_fact: 
    target_ns: "{{ app_ns }}"
  when: stg_engine.stdout == 'jiva'


## TODO: Account for the case where cstor target can reside in app_ns
## For future: Leave a bool var called {{ target_in_app_ns }} as undefined

- set_fact:
    target_ns: "{{ operator_ns }}"
  when: stg_engine.stdout == 'cstor' and target_in_app_ns is undefined

- name: Obtain the node where PV target pod resides
  shell: >
    kubectl get pod -n {{ target_ns }} 
    -l openebs.io/persistent-volume={{ pv.stdout }}
    --no-headers -o custom-columns=:spec.nodeName 
  args:
    executable: /bin/bash
  register: target_node

- name: Verify whether the app & target pod co-exist on same node
  debug: 
    msg: "App and Target affinity is maintained"
  failed_when: target_node.stdout != app_node.stdout
  
