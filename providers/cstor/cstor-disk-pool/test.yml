---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:

      ## Generating the testname for deployment
        - include_tasks: /common/utils/create_testname.yml

         ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/common/utils/update_litmus_result_resource.yml"
          vars:
            status: 'SOT'
  
        - name: Get number of healthy minion's
          shell: kubectl get nodes | grep -v 'master'
          args:
            executable: /bin/bash
          register: node_count
           
        - name: Get list of disks attached
          shell: kubectl get disks -l ndm.io/disk-type=disk --no-headers -o custom-columns=:metadata.name
          args:
            executable: /bin/bash
          register: diskList
          failed_when: "'disk-' not in diskList.stdout"

        - name: Generate the litmus result CR to reflect SOT (Start of Test)
          template:
            src: cstor-spc.j2
            dest: cstor-spc.yaml

        - name: Add the discovered disks to the pool specs file.
          lineinfile:
            path: "{{ playbook_dir }}/{{ cstor_spc }}" 
            insertafter: 'diskList:'
            line: '     - {{ item }}'
          with_items: "{{ diskList.stdout_lines }}"

        - block: 

            - name: Create cStor Disk Pool
              shell: kubectl create -f "{{ playbook_dir }}/{{ cstor_spc }}"
              args:
                executable: /bin/bash

            - name: Get the maxpool count of storage pool claim.
              shell: kubectl get spc -o=jsonpath='{.items[?(@.metadata.name=="{{pool_name}}")].spec.maxPools}'   
              args:
                executable: /bin/bash  
              register: maxpool_count
                  

            - name: Verify if cStor Disk Pool are created on each node
              shell: > 
                 kubectl get pods -n {{ operator_ns }} -l openebs.io/storage-pool-claim={{ pool_name }}
                 --no-headers -o custom-columns=:status.phase
              args:
                executable: /bin/bash
              register: pool_count
              until: pool_count.stdout_lines|length == maxpool_count.stdout|int
              retries: 10
              delay: 20

            - name: Get cStor Disk Pool names to verify the container statuses
              shell: >
                kubectl get pods -n {{ operator_ns }} -l openebs.io/storage-pool-claim={{ pool_name }} 
                --no-headers -o=custom-columns=NAME:".metadata.name"
              args:
                executable: /bin/bash
              register: cstor_pool_pod

            - name: Get the runningStatus of pool pod
              shell: >
                kubectl get pod {{ item }} -n {{ operator_ns }}
                -o=jsonpath='{range .status.containerStatuses[*]}{.state}{"\n"}{end}' |
                grep -w running | wc -l
              args:
                executable: /bin/bash
              register: runningStatusCount
              with_items: "{{ cstor_pool_pod.stdout_lines }}"
              until: "runningStatusCount.stdout == \"2\""
              delay: 30
              retries: 10

          when: lookup('env', 'ACTION') == 'create'    

        - block:
                
            - name: Delete cStor Disk Pool
              shell: kubectl delete -f "{{ playbook_dir }}/{{ cstor_spc }}"
              args:
                executable: /bin/bash

            - name: Verify if cStor Disk Pools are deleted on each node
              shell: >
                 kubectl get pods -n {{ operator_ns }} -l openebs.io/storage-pool-claim={{ pool_name }}
              args:
                executable: /bin/bash
              register: pool_verify
              until: "'No resources found' in pool_verify.stderr"
              retries: 10
              delay: 15

            - name: Verify the sp and csp are deleted
              shell: >
                kubectl get {{ item }} -l openebs.io/storage-pool-claim={{pool_name}} 
                --no-headers -o=custom-columns=NAME:".metadata.name" 
              args:
                executable: /bin/bash
              register: sp_and_csp
              until: "sp_and_csp.rc == 0" 
              retries: 5
              delay: 10 
              with_items:
                - sp
                - csp  

            - name: Verify related SC and SPC is deleted.
              shell: kubectl get {{ item }} -o=jsonpath='{.items[?(@.metadata.name=="{{pool_name}}")].metadata.name}'      
              args: 
                executable: /bin/bash
              register:  spc_and_sc
              until: "spc_and_sc.rc == 0"
              retries: 5
              delay: 10
              with_items:
                - sc
                - spc      

          when: lookup('env', 'ACTION') == 'delete'      

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"     

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /common/utils/update_litmus_result_resource.yml
          vars:
            status: 'EOT'
              
