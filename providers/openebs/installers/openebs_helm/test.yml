---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:

    - block:

        - include_tasks: /utils/fcm/create_testname.yml

          ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'SOT'

        - name: Install helm client
          shell: curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash
          args:
            executable: /bin/bash
          register: output
          until: "'installed' in output.stdout"
          delay: 30
          retries: 5

        - name: Setting up tiller.
          shell: helm init
          args:
            executable: /bin/bash
          register: tiller_out
          until: "'Happy Helming' in tiller_out.stdout"
          delay: 30
          retries: 15

        - name: Checking if the tiller pod is created.
          shell: helm version
          args:
            executable: /bin/bash
          register: tiller_version
          until: "'Server: &version.Version' in tiller_version.stdout"
          delay: 30
          retries: 30
       
        - block:

            - name: Checking if the tiller service account already exists.
              shell: kubectl get sa -n kube-system | grep tiller
              args:
                executable: /bin/bash
              register: sa
              until: "'tiller' in sa.stdout"
              delay: 20
              retries: 2
  
          rescue:

            - name: Creating the service account
              shell: kubectl -n kube-system create sa tiller
              args:
                executable: /bin/bash
              register: tiller
              until: "'\"tiller\" created' in tiller.stdout"
              delay: 30
              retries: 5

        - block:

            - name: Checking if the tiller cluster role binding already exists.
              shell: kubectl get clusterrolebinding | grep tiller
              args:
                executable: /bin/bash
              register: cr
              until: "'tiller' in cr.stdout"
              delay: 10
              retries: 2

          rescue:

            - name: Creating the cluster rolebinding.
              shell: kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
              args:
                executable: /bin/bash
              register: crb
              until: "'\"tiller\" created' in crb.stdout"
              delay: 60
              retries: 5

        - name: Installing openebs using stable charts.
          shell: >
            helm install stable/openebs --namespace {{ namespace }}
          args:
            executable: /bin/bash
          register: openebs_out
          until: "'The OpenEBS has been installed' in openebs_out.stdout"
          delay: 30
          retries: 20

        - name: Checking if the openebs-provisioner is up.
          shell: kubectl get pods -n "{{ namespace }}" -l component=provisioner -o custom-columns=:status.phase --no-headers
          args:
            executable: /bin/bash
          register: deployment
          until: "'Running' in deployment.stdout"
          delay: 30
          retries: 10

        - name: Checking if the openebs-apiserver is up.
          shell: kubectl get pods -n "{{ namespace }}" -l component=apiserver -o custom-columns=:status.phase --no-headers
          args:
            executable: /bin/bash
          register: api_server
          until: "'Running' in api_server.stdout"
          delay: 30
          retries: 10

        - name: Checking if the snapshot-operator is up.
          shell: kubectl get pods -n {{ namespace }} -l component=snapshot-operator -o custom-columns=:status.phase --no-headers
          args:
            executable: /bin/bash
          register: operator
          until: "'Running' in operator.stdout"
          delay: 30
          retries: 10

        - set_fact:
            flag: "Pass"

      rescue:
        - name: Setting fail flag
          set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'EOT'

          

