# TODO
# Apply openebs operator and cas template

- hosts: localhost
  connection: local

  vars_files:
    - vars.yaml

  tasks:
    - block:
        - block:
            ## RECORD START of litmus job
            - name: Record test instance/run ID
              set_fact:
                run_id: "{{ lookup('env','RUN_ID') }}"
            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ installation_test_name }}-{{ run_id }}"
          when: lookup('env','RUN_ID')

        - name: Generate the litmus result CR to reflect Start of Installation
          template:
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars:
            test: "{{ installation_test_name }}"
            chaostype: ""
            app: ""
            phase: in-progress
            verdict: none

        - name: Analyze the cr yaml
          shell: cat litmus-result.yaml

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status
          failed_when: "lr_status.rc != 0"

        - name: Downloading openebs-operator.yaml
          get_url:
            url: "{{ openebs_operator_link }}"
            dest: "{{ playbook_dir }}/{{ openebs_operator }}"
            force: yes
          register: result
          until:  "'OK' in result.msg"
          delay: 5
          retries: 3

        - name: Downloading openebs-storageclasses.yaml
          get_url:
            url: "{{ storageclass_link }}"
            dest: "{{ playbook_dir }}/{{ storageclass }}"
            force: yes
          register: result
          until:  "'OK' in result.msg"
          delay: 5
          retries: 3

        - name: Change the openebs analytics value of openebs resources in operator YAML
          replace:
            path: "{{ openebs_operator }}"
            regexp: 'value: "true"'
            after: '- name: OPENEBS_IO_ENABLE_ANALYTICS'
            replace: 'value: "false"'          

        - name: Changet the Node Disk manager Image
          replace:
            path: "{{ openebs_operator }}"
            regexp: quay.io/openebs/node-disk-manager-amd64:v0.2.0
            replace: quay.io/openebs/node-disk-manager-amd64:{{ lookup('env','NODE_DISK_MANAGER_IMAGE') }}
          when: lookup('env','NODE_DISK_MANAGER_IMAGE') | length > 0

        - name: Applying openebs operator
          shell: "{{ kubeapply }} apply -f {{ openebs_operator }}"
          args:
            executable: /bin/bash

        - name: Applying storageclasses
          shell: "{{ kubeapply }} apply -f {{ storageclass }}"
          args:
            executable: /bin/bash

        - name: Updating maya api server image
          shell: "{{ kubeapply }} set image deployment maya-apiserver maya-apiserver={{ lookup('env','MAYA_APISERVER_IMAGE') }} -n {{ namespace }}"
          args:
            executable: /bin/bash
          when: lookup('env','MAYA_APISERVER_IMAGE') | length > 0

        - name: Updating openebs jiva controller image
          shell: "{{ kubeapply }} set env deployment maya-apiserver \"OPENEBS_IO_JIVA_CONTROLLER_IMAGE={{ lookup('env','OPENEBS_IO_JIVA_CONTROLLER_IMAGE') }}\" -n {{ namespace }}"
          args:
            executable: /bin/bash
          when: lookup('env','OPENEBS_IO_JIVA_CONTROLLER_IMAGE') | length > 0

        - name: Updating openebs jiva replica image
          shell: "{{ kubeapply }} set env deployment maya-apiserver \"OPENEBS_IO_JIVA_REPLICA_IMAGE={{ lookup('env','OPENEBS_IO_JIVA_REPLICA_IMAGE') }}\" -n {{ namespace }}"
          args:
            executable: /bin/bash
          when: lookup('env','OPENEBS_IO_JIVA_REPLICA_IMAGE') | length > 0

        - name: Updating openebs jiva replica count
          shell: "{{ kubeapply }} set env deployment maya-apiserver \"OPENEBS_IO_JIVA_REPLICA_COUNT={{ lookup('env','OPENEBS_IO_JIVA_REPLICA_COUNT') }}\" -n {{ namespace }}"
          args:
            executable: /bin/bash
          when: lookup('env','OPENEBS_IO_JIVA_REPLICA_COUNT') | length > 0

        - name: Updating openebs cstor target image
          shell: "{{ kubeapply }} set env deployment maya-apiserver \"OPENEBS_IO_CSTOR_TARGET_IMAGE={{ lookup('env','OPENEBS_IO_CSTOR_TARGET_IMAGE') }}\" -n {{ namespace }}"
          args:
            executable: /bin/bash
          when: lookup('env','OPENEBS_IO_CSTOR_TARGET_IMAGE') | length > 0

        - name: Updating openebs cstor pool image
          shell: "{{ kubeapply }} set env deployment maya-apiserver \"OPENEBS_IO_CSTOR_POOL_IMAGE={{ lookup('env','OPENEBS_IO_CSTOR_POOL_IMAGE') }}\" -n {{ namespace }}"
          args:
            executable: /bin/bash
          when: lookup('env','OPENEBS_IO_CSTOR_POOL_IMAGE') | length > 0

        - name: Updating openebs cstor pool management image
          shell: "{{ kubeapply }} set env deployment maya-apiserver \"OPENEBS_IO_CSTOR_POOL_MGMT_IMAGE={{ lookup('env','OPENEBS_IO_CSTOR_POOL_MGMT_IMAGE') }}\" -n {{ namespace }}"
          args:
            executable: /bin/bash
          when: lookup('env','OPENEBS_IO_CSTOR_POOL_MGMT_IMAGE') | length > 0

        - name: Updating openebs cstor volume management image
          shell: "{{ kubeapply }} set env deployment maya-apiserver \"OPENEBS_IO_CSTOR_VOLUME_MGMT_IMAGE={{ lookup('env','OPENEBS_IO_CSTOR_VOLUME_MGMT_IMAGE') }}\" -n {{ namespace }}"
          args:
            executable: /bin/bash
          when: lookup('env','OPENEBS_IO_CSTOR_VOLUME_MGMT_IMAGE') | length > 0

        - name: Updating openebs cstor volume monitor image
          shell: "{{ kubeapply }} set env deployment maya-apiserver \"OPENEBS_IO_VOLUME_MONITOR_IMAGE={{ lookup('env','OPENEBS_IO_VOLUME_MONITOR_IMAGE') }}\" -n {{ namespace }}"
          args:
            executable: /bin/bash
          when: lookup('env','OPENEBS_IO_VOLUME_MONITOR_IMAGE') | length > 0

        - name: Restarting all pods in openebs namespace
          shell: "kubectl delete po --all -n {{ namespace }}"
          args:
            executable: /bin/bash

        - name: Verify that rolling update of maya-apiserver is completed
          shell: >
            kubectl get pods --no-headers -n openebs 
            -l name=maya-apiserver | wc -l
          args:
            executable: /bin/bash
          register: maya_count
          until: "maya_count.stdout == '1'"
          delay: 5
          retries: 120

        - name: Checking Maya-API-Server container status 
          shell: >
            kubectl get pods --no-headers -n openebs -l name=maya-apiserver
            -o jsonpath='{.items[?(@.status.containerStatuses[*].name=="maya-apiserver")].status.containerStatuses[*].ready}' 
          register: maya_api
          until: "maya_api.stdout == 'true'" 
          delay: 5
          retries: 120

        - name: Checking OpenEBS-provisioner is running
          shell: kubectl get pods -n {{ namespace }} -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-provisioner")].status.phase}'
          register: openebs_prob
          until: "'Running' in openebs_prob.stdout"
          delay: 5
          retries: 120

        - name: Get maya-apiserver pod name
          shell: >
            kubectl get pods -n {{ namespace }} 
            --no-headers --selector=name=maya-apiserver
            -o custom-columns=:metadata.name
          args:
            executable: /bin/bash
          register: result_name

        - name: Create fact for pod name
          set_fact:
            pod_name: "{{ result_name.stdout }}"

        - name: Checking OpenEBS-Snapshot-Operator is running
          shell: kubectl get pods -n {{ namespace }} -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-snapshot-operator")].status.phase}'
          register: oso
          until: "'Running' in oso.stdout"
          delay: 5
          retries: 120

        - name: Confirm that maya-cli is available in the maya-apiserver pod
          shell: kubectl exec {{pod_name}} -c maya-apiserver -n {{ namespace }} -- mayactl version
          args:
            executable: /bin/bash
          register: result_vers
          failed_when: "'m-apiserver status:  running' not in result_vers.stdout"

        - name: Getting the number of nodes
          shell: kubectl get node --no-headers | grep -v "master" | wc -l
          #  kubectl get nodes -o custom-columns=:spec.taints[*].key
          #  --no-headers | grep -iv master | wc -l
          args:
            executable: /bin/bash
          register: node_count

        - name: Confirm if node-disk-manager is running in all the nodes
          shell: kubectl get pods -n {{ namespace }} --selector=name={{ selector_name }} | grep Running | wc -l
          args:
            executable: /bin/bash
          register: ndm_count
          until: (node_count.stdout)|int == (ndm_count.stdout)|int
          delay: 5
          retries: 120

        - name: Confirm if sparse pool is running in all the nodes
          shell: kubectl get pods -n {{ namespace }} --selector={{ sparse_pool_label }} | grep Running | wc -l
          args:
            executable: /bin/bash
          register: sparse_pool_count
          until: (node_count.stdout)|int == (sparse_pool_count.stdout)|int
          delay: 5
          retries: 120

        - name: Confirm CAS Templates are deployed
          shell: kubectl get castemplate -n {{ namespace }}
          args:
            executable: /bin/bash
          register: result
          until: "result.rc == 0"
          delay: 5
          retries: 120

        - set_fact:
            flag: "Pass"
      rescue:
        - set_fact:
            flag: "Fail"

      always:
        ## Updating status to CR
        - name: Generate the litmus result CR to reflect End of Installation
          template:
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars:
            test: "{{ installation_test_name }}"
            chaostype: ""
            app: ""
            phase: completed
            verdict: "{{ flag }}"

        - name: Analyze the cr yaml
          shell: cat litmus-result.yaml

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status
          failed_when: "lr_status.rc != 0"
