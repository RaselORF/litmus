# TODO 
# Apply openebs operator and cas template

- hosts: localhost
  connection: local

  vars_files:
  - vars.yaml

  tasks:
    - block:
          - name: Downloading openebs-operator.yaml
            get_url:
              url: "{{ openebs_operator_link }}"
              dest: "{{ playbook_dir }}/openebs-operator.yaml"

          - name: Downloading openebs-cas-template.yaml
            get_url:
              url: "{{ openebs_pre_release_link }}"
              dest: "{{ playbook_dir }}/{{ openebs_pre_release }}"

          - name: Updating maya api server image
            replace:
              path: "openebs-operator.yaml"
              regexp: "image: openebs/m-apiserver.*"
              replace: "image: {{ lookup('env','MAYA_APISERVER_IMAGE') }}"
            when: lookup('env','MAYA_APISERVER_IMAGE') | length > 0

          - name: Updating openebs CAS template to list volume
            replace:
              path: "openebs-operator.yaml"
              regexp: "        - name: OPENEBS_IO_CAS_TEMPLATE_TO_LIST_VOLUME\n          value: \"jiva-volume-list-default-0.7.0\""
              replace: "        - name: OPENEBS_IO_CAS_TEMPLATE_TO_LIST_VOLUME\n          value: \"{{ lookup('env','OPENEBS_IO_CAS_TEMPLATE_TO_LIST_VOLUME') }}\""
            when: lookup('env','OPENEBS_IO_CAS_TEMPLATE_TO_LIST_VOLUME') | length > 0

          - name: Updating openebs jiva controller image
            replace:
              path: "openebs-operator.yaml"
              regexp: "        - name: OPENEBS_IO_JIVA_CONTROLLER_IMAGE\n          value: \"openebs/jiva.*"
              replace: "        - name: OPENEBS_IO_JIVA_CONTROLLER_IMAGE\n          value: \"{{ lookup('env','OPENEBS_IO_JIVA_CONTROLLER_IMAGE') }}\""
            when: lookup('env','OPENEBS_IO_JIVA_CONTROLLER_IMAGE') | length > 0
          
          - name: Updating openebs jiva controller image in openebs starndard storage class
            replace:
              path: "openebs-operator.yaml"
              regexp: "      - name: ControllerImage\n        value: openebs/jiva.*"
              replace: "      - name: ControllerImage\n        value: {{ lookup('env','OPENEBS_IO_JIVA_CONTROLLER_IMAGE') }}"
            when: lookup('env','OPENEBS_IO_JIVA_CONTROLLER_IMAGE') | length > 0

          - name: Updating openebs jiva replica image
            replace:
              path: "openebs-operator.yaml"
              regexp: "        - name: OPENEBS_IO_JIVA_REPLICA_IMAGE\n          value: \"openebs/jiva.*"
              replace: "        - name: OPENEBS_IO_JIVA_REPLICA_IMAGE\n          value: \"{{ lookup('env','OPENEBS_IO_JIVA_REPLICA_IMAGE') }}\""
            when: lookup('env','OPENEBS_IO_JIVA_REPLICA_IMAGE') | length > 0

          - name: Updating openebs jiva replica image in openebs standard storage class
            replace:
              path: "openebs-operator.yaml"
              regexp: "      - name: ReplicaImage\n        value: openebs/jiva.*"
              replace: "      - name: ReplicaImage\n        value: {{ lookup('env','OPENEBS_IO_JIVA_REPLICA_IMAGE') }}"
            when: lookup('env','OPENEBS_IO_JIVA_REPLICA_IMAGE') | length > 0

          - name: Updating openebs io volume monitor image
            replace:
              path: "openebs-operator.yaml"
              regexp: "        - name: OPENEBS_IO_VOLUME_MONITOR_IMAGE\n          value: \"openebs/m-exporter.*"
              replace: "        - name: OPENEBS_IO_VOLUME_MONITOR_IMAGE\n          value: \"{{ lookup('env','OPENEBS_IO_VOLUME_MONITOR_IMAGE') }}\""
            when: lookup('env','OPENEBS_IO_VOLUME_MONITOR_IMAGE') | length > 0
          
          - name: Updating openebs io volume monitor image in openebs standard storage class
            replace:
              path: "openebs-operator.yaml"
              regexp: "      - name: VolumeMonitorImage\n        value: openebs/m-exporter.*"
              replace: "      - name: VolumeMonitorImage\n        value: {{ lookup('env','OPENEBS_IO_VOLUME_MONITOR_IMAGE') }}"
            when: lookup('env','OPENEBS_IO_VOLUME_MONITOR_IMAGE') | length > 0

          - name: Updating jiva replica count
            replace:
              path: "openebs-operator.yaml"
              regexp: "        - name: OPENEBS_IO_JIVA_REPLICA_COUNT\n          value: \"3\""
              replace: "        - name: OPENEBS_IO_JIVA_REPLICA_COUNT\n          value: \"{{ lookup('env','OPENEBS_IO_JIVA_REPLICA_COUNT') }}\""
            when: lookup('env','OPENEBS_IO_JIVA_REPLICA_COUNT') | length > 0

          - name: Updating jiva replica count in standard storage class
            replace:
              path: "openebs-operator.yaml"
              regexp: "      - name: ReplicaCount\n        value: \"3\""
              replace: "      - name: ReplicaCount\n        value: \"{{ lookup('env','OPENEBS_IO_JIVA_REPLICA_COUNT') }}\""
            when: lookup('env','OPENEBS_IO_JIVA_REPLICA_COUNT') | length > 0

          - name: Updating jiva replica count in standard storage pool
            replace:
              path: "openebs-operator.yaml"
              regexp: "openebs.io/jiva-replica-count: \"3\""
              replace: "openebs.io/jiva-replica-count: \"{{ lookup('env','OPENEBS_IO_JIVA_REPLICA_COUNT') }}\""
            when: lookup('env','OPENEBS_IO_JIVA_REPLICA_COUNT') | length > 0

          - name: Updating openebs provisioner image
            replace:
              path: "openebs-operator.yaml"
              regexp: "image: openebs/openebs-k8s-provisioner.*"
              replace: "image: {{ lookup('env','OPENEBS_PROVISIONER_IMAGE') }}"
            when: lookup('env','OPENEBS_PROVISIONER_IMAGE') | length > 0

          - name: Updating openebs snapshot controller image
            replace:
              path: "openebs-operator.yaml"
              regexp: "image: openebs/snapshot-controller.*"
              replace: "image: {{ lookup('env','OPENEBS_SNAPSHOT_CONTROLLER_IMAGE') }}"
            when: lookup('env','OPENEBS_SNAPSHOT_CONTROLLER_IMAGE') | length > 0

          - name: Updating openebs snapshot provisioner image
            replace:
              path: "openebs-operator.yaml"
              regexp: "image: openebs/snapshot-provisioner.*"
              replace: "image: {{ lookup('env','OPENEBS_SNAPSHOT_PROVISIONER_IMAGE') }}"
            when: lookup('env','OPENEBS_SNAPSHOT_PROVISIONER_IMAGE') | length > 0

          - name: Updating node disk manager image
            replace:
              path: "openebs-operator.yaml"
              regexp: "image: openebs/node-disk-manager-amd64.*"
              replace: "image: {{ lookup('env','NODE_DISK_MANAGER_IMAGE') }}"
            when: lookup('env','NODE_DISK_MANAGER_IMAGE') | length > 0
        
          - name: Applying openebs operator
            shell: "{{ kubeapply }} apply -f {{ openebs_operator }}"
            args:
              executable: /bin/bash

          - name: Applying openebs cas template
            shell: "{{ kubeapply }} apply -f {{ openebs_pre_release }}"
            args:
              executable: /bin/bash
    
          - name: Checking Maya-API-Server is running
            shell: kubectl get pods -n {{ namespace }} -o jsonpath='{.items[?(@.metadata.labels.name=="maya-apiserver")].status.phase}'
            register: maya_api
            until: "'Running' in maya_api.stdout"
            delay: 30
            retries: 100

          - name: Checking OpenEBS-provisioner is running
            shell: kubectl get pods -n {{ namespace }} -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-provisioner")].status.phase}'
            register: openebs_prob
            until: "'Running' in openebs_prob.stdout"
            delay: 30
            retries: 100

          - name: Get maya-apiserver pod name
            shell: kubectl get pods -n {{ namespace }} --selector=name=maya-apiserver
            args:
              executable: /bin/bash
            register: result_name

          - name: Create fact for pod name
            set_fact:
              pod_name: "{{ result_name.stdout_lines[1].split()[0] }}"

          - name: Checking OpenEBS-Snapshot-Operator is running
            shell: kubectl get pods -n {{ namespace }} -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-snapshot-operator")].status.phase}'
            register: oso
            until: "'Running' in oso.stdout"
            delay: 30
            retries: 100

          - name: Confirm that maya-cli is available in the maya-apiserver pod
            shell: kubectl exec {{pod_name}} -c maya-apiserver -n {{ namespace }} -- mayactl version
            args:
              executable: /bin/bash
            register: result_vers
            failed_when: "'m-apiserver status:  running' not in result_vers.stdout"

          - name: Getting the number of nodes
            shell: kubectl get nodes | grep '<none>' | wc -l
            args:
              executable: /bin/bash
            register: node_count

          - name: Confirm if node-disk-manager is running in all the nodes
            shell: kubectl get pods -n {{ namespace }} --selector=app=node-disk-manager | grep Running | wc -l
            args:
              executable: /bin/bash
            register: ndm_count
            until: (node_count.stdout)|int == (ndm_count.stdout)|int
            delay: 30

          - set_fact:
              flag: "Pass"
      rescue:
        - set_fact:
            flag: "Fail"
