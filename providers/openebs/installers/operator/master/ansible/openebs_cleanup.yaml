# TODO 
# Delete openebs operator and cas template

- hosts: localhost
  connection: local

  vars_files:
  - vars.yaml

  tasks:
    - block:
          - block:
              ## RECORD START of litmus job
            - name: Record test instance/run ID
              set_fact:
                run_id: "{{ lookup('env','RUN_ID') }}"
            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ cleanup_test_name }}-{{ run_id }}"
            when: lookup('env','RUN_ID')

          - name: Generate the litmus result CR to reflect Start of Cleanup
            template:
              src: /litmus-result.j2
              dest: litmus-result.yaml
            vars:
              test: "{{ cleanup_test_name }}"
              chaostype: ""
              app: ""
              phase: in-progress
              verdict: none
    
          - name: Analyze the cr yaml
            shell: cat litmus-result.yaml

          - name: Apply the litmus result CR
            shell: kubectl apply -f litmus-result.yaml
            args:
              executable: /bin/bash
            register: lr_status 
            failed_when: "lr_status.rc != 0"

          - name: Cleaning openebs operator
            shell: "{{ kubeapply }} delete -f {{ openebs_operator_link }}"
            args:
              executable: /bin/bash
            ignore_errors: True

          - name: Confirm pods has been deleted
            shell: "kubectl get pods --all-namespaces"
            args:
              executable: /bin/bash
            register: result
            until: ' item not in result.stdout'
            with_items:
              - "maya-apiserver"
              - "openebs-provisioner"
              - "openebs-snapshot-operator"
              - "node-disk-manager"
            delay: 30
            retries: 100

          - name: Confirm that namspace has been deleted
            shell: 'kubectl get namespaces'
            args:
              executable: /bin/bash
            register: result
            until: '"namespace" not in result.stdout'
            delay: 30
            retries: 100

          - set_fact:
              flag: "Pass"
      rescue: 
        - set_fact: 
            flag: "Fail"

      always:
        ## Updating status to CR
        - name: Generate the litmus result CR to reflect End Of Cleanup
          template:
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars:
            test: "{{ cleanup_test_name }}"
            chaostype: ""
            app: ""
            phase: completed
            verdict: "{{ flag }}"

        - name: Analyze the cr yaml
          shell: cat litmus-result.yaml
          

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status
          failed_when: "lr_status.rc != 0"