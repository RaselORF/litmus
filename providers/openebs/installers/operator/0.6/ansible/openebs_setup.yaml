# TODO
# Apply openebs operator and openebs storage class

- hosts: localhost
  connection: local

  vars_files:
    - vars.yaml

  tasks:
    - block:
        - block:
            ## RECORD START of litmus job
            - name: Record test instance/run ID
              set_fact:
                run_id: "{{ lookup('env','RUN_ID') }}"

            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ installation_test_name }}-{{ run_id }}"
          when: lookup('env','RUN_ID')

        - name: Generate the litmus result CR to reflect Start of Installation
          template:
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars:
            test: "{{ installation_test_name }}"
            chaostype: ""
            app: ""
            phase: in-progress
            verdict: none

        - name: Analyze the cr yaml
          shell: cat litmus-result.yaml

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status
          failed_when: "lr_status.rc != 0"

        - name: Downloading openebs-operator.yaml
          get_url:
            url: "{{ openebs_operator_link }}"
            dest: "{{ playbook_dir }}/openebs-operator.yaml"

        - name: Updating maya api server image
          replace:
            path: "openebs-operator.yaml"
            regexp: "image: openebs/m-apiserver.*"
            replace: "image: {{ lookup('env','MAYA_APISERVER_IMAGE') }}"
          when: lookup('env','MAYA_APISERVER_IMAGE') | length > 0

        - name: Updating openebs provisioner image
          replace:
            path: "openebs-operator.yaml"
            regexp: "image: openebs/openebs-k8s-provisioner.*"
            replace: "image: {{ lookup('env','OPENEBS_PROVISIONER_IMAGE') }}"
          when: lookup('env','OPENEBS_PROVISIONER_IMAGE') | length > 0

        - name: Updating openebs snapshot controller image
          replace:
            path: "openebs-operator.yaml"
            regexp: "image: openebs/snapshot-controller.*"
            replace: "image: {{ lookup('env','OPENEBS_SNAPSHOT_CONTROLLER_IMAGE') }}"
          when: lookup('env','OPENEBS_SNAPSHOT_CONTROLLER_IMAGE') | length > 0

        - name: Updating openebs snapshot provisioner image
          replace:
            path: "openebs-operator.yaml"
            regexp: "image: openebs/snapshot-provisioner.*"
            replace: "image: {{ lookup('env','OPENEBS_SNAPSHOT_PROVISIONER_IMAGE') }}"
          when: lookup('env','OPENEBS_SNAPSHOT_PROVISIONER_IMAGE') | length > 0

        - name: Updating openebs jiva controller image
          replace:
            path: "openebs-operator.yaml"
            regexp: "        - name: OPENEBS_IO_JIVA_CONTROLLER_IMAGE\n          value: \"openebs/jiva.*"
            replace: "        - name: OPENEBS_IO_JIVA_CONTROLLER_IMAGE\n          value: \"{{ lookup('env','OPENEBS_IO_JIVA_CONTROLLER_IMAGE') }}\""
          when: lookup('env','OPENEBS_IO_JIVA_CONTROLLER_IMAGE') | length > 0

        - name: Updating openebs jiva replica image
          replace:
            path: "openebs-operator.yaml"
            regexp: "        - name: OPENEBS_IO_JIVA_REPLICA_IMAGE\n          value: \"openebs/jiva.*"
            replace: "        - name: OPENEBS_IO_JIVA_REPLICA_IMAGE\n          value: \"{{ lookup('env','OPENEBS_IO_JIVA_REPLICA_IMAGE') }}\""
          when: lookup('env','OPENEBS_IO_JIVA_REPLICA_IMAGE') | length > 0

        - name: Updating openebs io volume monitor image
          replace:
            path: "openebs-operator.yaml"
            regexp: "        - name: OPENEBS_IO_VOLUME_MONITOR_IMAGE\n          value: \"openebs/m-exporter.*"
            replace: "        - name: OPENEBS_IO_VOLUME_MONITOR_IMAGE\n          value: \"{{ lookup('env','OPENEBS_IO_VOLUME_MONITOR_IMAGE') }}\""
          when: lookup('env','OPENEBS_IO_VOLUME_MONITOR_IMAGE') | length > 0

        - name: Updating jiva replica count
          replace:
            path: "openebs-operator.yaml"
            regexp: "        - name: OPENEBS_IO_JIVA_REPLICA_COUNT\n          value: \"3\""
            replace: "        - name: OPENEBS_IO_JIVA_REPLICA_COUNT\n          value: \"{{ lookup('env','OPENEBS_IO_JIVA_REPLICA_COUNT') }}\""
          when: lookup('env','OPENEBS_IO_JIVA_REPLICA_COUNT') | length > 0

        - name: Applying openebs operator
          shell: "{{ kubeapply }} apply -f {{ openebs_operator }}"
          args:
            executable: /bin/bash

        - name: Checking Maya-API-Server is running
          shell: kubectl get pods -n {{ namespace }} -o jsonpath='{.items[?(@.metadata.labels.name=="maya-apiserver")].status.phase}'
          register: maya_api
          until: "'Running' in maya_api.stdout"
          delay: 30
          retries: 100

        - name: Checking OpenEBS-provisioner is running
          shell: kubectl get pods -n {{ namespace }} -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-provisioner")].status.phase}'
          register: openebs_prob
          until: "'Running' in openebs_prob.stdout"
          delay: 30
          retries: 100

        - name: Get maya-apiserver pod name
          shell: kubectl get pods -n {{ namespace }} --selector=name=maya-apiserver
          args:
            executable: /bin/bash
          register: result_name

        - name: Create fact for pod name
          set_fact:
            pod_name: "{{ result_name.stdout_lines[1].split()[0] }}"

        - name: Checking OpenEBS-Snapshot-Operator is running
          shell: kubectl get pods -n {{ namespace }} -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-snapshot-operator")].status.phase}'
          register: oso
          until: "'Running' in oso.stdout"
          delay: 30
          retries: 100

        - name: Confirm that maya-cli is available in the maya-apiserver pod
          shell: kubectl exec {{pod_name}} -c maya-apiserver -n {{ namespace }} -- mayactl version
          args:
            executable: /bin/bash
          register: result_vers
          failed_when: "'m-apiserver status:  running' not in result_vers.stdout"

        - set_fact:
            flag: "Pass"
      rescue:
        - set_fact:
            flag: "Fail"

      always:
        ## Updating status to CR
        - name: Generate the litmus result CR to reflect End of Installation
          template:
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars:
            test: "{{ installation_test_name }}"
            chaostype: ""
            app: ""
            phase: completed
            verdict: "{{ flag }}"

        - name: Analyze the cr yaml
          shell: cat litmus-result.yaml

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status
          failed_when: "lr_status.rc != 0"
