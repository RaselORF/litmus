---
- block:
    - block:
        - name: Select the app pod
          shell: >
            kubectl get pod -l {{ a_label }} -n {{ namespace }}
            -o=custom-columns=:metadata.name --no-headers
            | shuf | head -1 
          args:
            executable: /bin/bash
          register: app_pod_name

        - name: Record app pod name
          set_fact:
            app_pod: "{{ app_pod_name.stdout }}"
      when: "app_pod is not defined or app_pod == ''"

    - name: Identify the application node
      shell: >
        kubectl get pod {{ app_pod }} -n {{ namespace }}
        --no-headers -o custom-columns=:spec.nodeName
      args:
        executable: /bin/bash
      register: app_node

    - set_fact: 
        app_node: "{{ app_node.stdout }}"

    - block:
        - name: Generate a run id if not passed from the engine/experiment
          shell: echo $(mktemp) | cut -d '.' -f 2 | cut -c -6
          register: rand_string   

        - set_fact:
            run_id: "{{ rand_string.stdout | lower }}"
      when: "run_id is not defined or run_id == ''"

    - name: Wait for the specified ramp time before injecting chaos
      wait_for: timeout="{{ ramp_time }}"
      when: "ramp_time is defined and ramp_time != ''"

    - name: Patch the chaoslib image
      template:
        src:  /chaoslib/litmus/container_kill/containerd_chaos/containerd.j2
        dest: /chaoslib/litmus/container_kill/containerd_chaos/containerd-chaos-job.yml
      vars:
        containerd_image: "{{ lib_image }}"
        app_node: "{{ app_node }}"
        
    - name: Setup containerd chaos infrastructure.
      shell: >
        kubectl apply -f /chaoslib/litmus/container_kill/containerd_chaos/containerd-chaos-job.yml
        -n {{ namespace }}
      args:
        executable: /bin/bash
      register: crictl_job_result

    - name: Confirm that the containerd-chaos job is running on {{ app_node }} node.
      shell: >
        kubectl get pod -l job-name=containerd-chaos-{{ run_id }}
        --no-headers -o custom-columns=:status.phase
        -n {{ namespace }} | sort | uniq
      args:
        executable: /bin/bash
      register: result
      until: "result.stdout == 'Running'"
      delay: 2
      retries: 90
      ignore_errors: true

    - name: Record the containerd-chaos pod on app node
      shell: >
        kubectl get pod -l app=crictl -o wide
        -n {{ namespace }} | grep {{ app_node }}
        | awk '{print $1}'
      args:
        executable: /bin/bash
      register: chaos_pod
      failed_when: chaos_pod is failed

    - block:
      - name: Record the application container
        shell: >
          kubectl get pods -l {{ label }} -n {{ namespace }} -o jsonpath='{.items[0].spec.containers[0].name}'
        args:
          executable: /bin/bash
        register: container

      - name: Record the app_container
        set_fact:
          app_container: "{{ container.stdout }}"
      when: "app_container is not defined or app_container == ''"

    - name: Obtain the pod ID through Pod name
      shell: >
        kubectl exec {{ chaos_pod.stdout}} -n {{ namespace }} -- 
        crictl pods | grep "{{ app_pod }}" | awk '{print $1}'
      args:
        executable: /bin/bash
      register: pod_id
      failed_when: pod_id is failed

    - name: Obtain the container ID using pod name and container name
      shell: >
        kubectl exec {{ chaos_pod.stdout}} -n {{ namespace }} -- 
        crictl ps | grep {{ pod_id.stdout }} | grep {{ app_container }} | awk '{print $1}'
      args:
        executable: /bin/bash
      register: container_id
      failed_when: container_id is failed

     ## RECORD EVENT FOR CHAOS INJECTION
    - include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
      vars:
        stage: "ChaosInject"
        exp_pod_name: "{{ chaos_pod_name }}"
        engine_ns: "{{ a_ns }}"
        message: "Injecting {{ c_experiment }} chaos on {{ app_container }} container of {{ app_pod }} pod"
      when: "c_engine is defined and c_engine != ''"

    - name: Kill the container
      shell: >
        kubectl exec {{ chaos_pod.stdout}} -n {{ namespace }} -- 
        crictl stop "{{ container_id.stdout }}"
      args:
        executable: /bin/bash
      register: result
      failed_when: result is failed

    - name: Wait for the specified ramp time after injecting chaos
      wait_for: timeout="{{ ramp_time }}"
      when: "ramp_time is defined and ramp_time != ''"

    - name: Obtain the container ID using pod name and container name
      shell: >
        kubectl exec {{ chaos_pod.stdout}} -n {{ namespace }} -- 
        crictl ps | grep {{ pod_id.stdout }} | grep {{ app_container }} | awk '{print $1}'
      args:
        executable: /bin/bash
      register: new_container_id
      until: "new_container_id.stdout != ''"
      delay: 2
      retries: 90

    - name: Check if the new container is running.
      shell: >
        kubectl exec {{ chaos_pod.stdout}} -n {{ namespace }} -- 
        crictl ps | grep {{ new_container_id.stdout }}
      args:
        executable: /bin/bash
      register: status
      until: "'Running' in status.stdout"
      delay: 2
      retries: 90

    - name: Delete the crictl-chaos job
      shell: >
        kubectl delete -f /chaoslib/litmus/container_kill/containerd_chaos/containerd-chaos-job.yml -n {{ namespace }} 
      args:
        executable: /bin/bash
    
    - name: Confirm that the containerd-chaos pod is deleted successfully
      shell: >
        kubectl get pods -l app=crictl --no-headers -n {{ namespace }}
      args:
        executable: /bin/bash
      register: result
      until: "'No resources found' in result.stderr"
      delay: 2
      retries: 90

  rescue: 

    - block: 
        - name: Delete the crictl-chaos job
          shell: >
            kubectl delete -f /chaoslib/litmus/container_kill/containerd_chaos/containerd-chaos-job.yml -n {{ namespace }}
          args:
            executable: /bin/bash
          when: crictl_job_result.rc == 0
            
        - name: Confirm that the containerd-chaos pod is deleted successfully
          shell: >
            kubectl get pods -l job-name=containerd-chaos-{{ run_id }} --no-headers -n {{ namespace }}
          args:
            executable: /bin/bash
          register: result
          until: "'No resources found' in result.stderr"
          delay: 2
          retries: 90
      when: " crictl_job_result is defined"
    
    - fail:
        msg: "crictl-chaos lib failed"
      when: true