 ## GETTING THE PRE CHAOS NODE NAME OF APPLICATION 
- block:

    - name: Getting the pre-chaos node name of application 
      k8s_facts:
        kind: Pod
        label_selectors:
          - "{{ a_label }}"
      register: no_name

    - set_fact:
        node_name: "{{ no_name | json_query('resources[0].spec.nodeName') }}"

    ## GETTING THE NODE CPU CAPACITY
    - name: Getting the node cpu capacity
      k8s_facts:
        kind: Node
        name: "{{ node_name }}"
      register: c_limit

    - set_fact:
        cpu_limit: "{{ c_limit | json_query('resources[0].status.capacity.cpu') }}"

    - block:
        - name: Generate a run id if not passed from the engine/experiment
          shell: echo $(mktemp) | cut -d '.' -f 2 | cut -c -6
          register: rand_string   

        - set_fact:
            run_id: "{{ rand_string.stdout | lower }}"
      when: "run_id is not defined or run_id == ''"
  
    ## RECORD EVENT FOR CHAOS INJECTION
    - include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
      vars:
        stage: "ChaosInject"
        exp_pod_name: "{{ chaos_pod_name }}"
        engine_ns: "{{ a_ns }}"
        message: "Injecting {{ c_experiment }} chaos on {{ node_name }} node"
      when: "c_engine is defined and c_engine != ''"        

    - name: Patch the engine uid
      template:
        src:  /chaoslib/litmus/platform/gke/node-cpu-hog-job.j2
        dest: /chaoslib/litmus/platform/gke/node-cpu-hog-job.yml
      
    - name: Wait for the specified ramp time before injecting chaos
      wait_for: timeout="{{ ramp_time }}"
      when: "ramp_time is defined and ramp_time != ''"

    ## CREATING A JOB FOR CPU-HOG
    - name: Creating a Job for cpu-hog
      k8s:
        state: present
        namespace: "{{ a_ns }}"
        src: /chaoslib/litmus/platform/gke/node-cpu-hog-job.yml
      register: node_cpu_hog_job_result

    ## WAIT UNTIL THE JOB IS COMPLETED
    - name: Wait until the node cpu hog job is completed
      shell: >
        kubectl get pods -l job-name=node-cpu-hog-{{ run_id }} --no-headers -n {{ a_ns }}
        --no-headers -o custom-columns=:status.phase
      args: 
        executable: /bin/bash
      register: result
      until: "result.stdout == 'Succeeded'"
      delay: 1
      ## with a grace period of 1 min before pumba terminate
      retries: "{{ ((c_duration|int) + 60)| int }}"

    - name: Wait for the specified ramp time after injecting chaos
      wait_for: timeout="{{ ramp_time }}"
      when: "ramp_time is defined and ramp_time != ''" 

    ## GETTING THE NODE STATUS
    - name: Getting the node status
      shell: kubectl get no {{ node_name }} | awk '{print $2}' | tail -n1
      register: node_status
      until: "node_status.stdout == 'Ready'"
      delay: 2
      retries: 90
      
    ## DELETING THE Job
    - name: Deleting the node cpu hog job
      shell: kubectl delete -f /chaoslib/litmus/platform/gke/node-cpu-hog-job.yml -n {{ a_ns }}
      args:
        executable: /bin/bash

    - name: Confirm that the cpu hog job is deleted successfully
      k8s_facts:
        kind: Job
        label_selectors:
          - job-name=node-cpu-hog-{{ run_id }}
      register: resource_job
      until: "resource_job.resources | length < 1"
      delay: 2
      retries: 90

  rescue: 

    - block: 
        - name: Deleting the node cpu hog job
          shell: >
            kubectl delete -f /chaoslib/litmus/platform/gke/node-cpu-hog-job.yml -n {{ a_ns }}
          args:
            executable: /bin/bash
          when: "node_cpu_hog_job_result is succeeded"

        - name: Confirm that the node cpu hog job is deleted successfully
          k8s_facts:
            kind: Job
            label_selectors:
              - job-name=node-cpu-hog-{{ run_id }}
          register: resource_job
          until: "resource_job.resources | length < 1"
          delay: 2
          retries: 90
      when: "node_cpu_hog_job_result is defined"

    - fail:
        msg: "node_cpu_consumption lib failed"
      when: true