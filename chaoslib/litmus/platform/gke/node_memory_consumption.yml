 ## GETTING THE PRE CHAOS NODE NAME OF APPLICATION 
- block:
  
    - name: Getting the pre-chaos application pod name 
      k8s_facts:
        kind: Pod
        label_selectors:
          - "{{ a_label }}"
      register: app_pod_name
    
    ## RECORDING THE NODE NAME ON WHICH APPLICATION IS RUNNING
    - name: Recording the node name of application pod
      set_fact:
        node_name: "{{ app_pod_name | json_query('resources[0].spec.nodeName')}}"
        
    - block:
        - name: Generate a run id if not passed from the engine/experiment
          shell: echo $(mktemp) | cut -d '.' -f 2 | cut -c -6
          register: rand_string   

        - set_fact:
            run_id: "{{ rand_string.stdout | lower }}"
      when: "run_id is not defined or run_id == ''"
  
    ## RECORD EVENT FOR CHAOS INJECTION
    - include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
      vars:
        stage: "ChaosInject"
        exp_pod_name: "{{ chaos_pod_name }}"
        engine_ns: "{{ a_ns }}"
        message: "Injecting {{ c_experiment }} chaos on {{ node_name }} node"
      when: "c_engine is defined and c_engine != ''"
        
    ## PATCH THE ENGINE UID
    - name: Patch the engine uid
      template:
        src:  /chaoslib/litmus/platform/gke/node-memory-hog-job.j2
        dest: /chaoslib/litmus/platform/gke/node-memory-hog-job.yml
      vars:
        stress_time: "{{ c_duration }}s"
        total_memory_percentage: "{{ memory_percentage }}%"

    ## WAIT FOR THE SPECIFIED RAMP TIME
    - name: Wait for the specified ramp time before injecting chaos
      wait_for: timeout="{{ ramp_time }}"
      when: "ramp_time is defined and ramp_time != ''"

    ## CREATING JOB FOR MEMORY-HOG
    - name: Creating Job for memory-hog
      k8s:
        state: present
        namespace: "{{ a_ns }}"
        src: /chaoslib/litmus/platform/gke/node-memory-hog-job.yml
      register: memory_hog_job_result

    ## CHECKING THE STATUS OF JOB
    - name: Checking the status of Job
      k8s_facts:
        kind: Pod
        namespace: "{{ a_ns }}"
        label_selectors:
          - job-name=node-memory-hog-{{ run_id }}
      register: job_pod
      until: "{{ job_pod | json_query('resources[0].status.phase') == 'Succeeded' }}"
      delay: 1
      retries: "{{ c_duration | int  + 60 }}"
    
    ## GETTING THE JOB POD LOGS UNDER STRESS
    - name: Getting the pod logs
      shell: kubectl logs {{ job_pod.resources[0].metadata.name }} -n {{ a_ns }}
      args:
        executable: /bin/bash

    ## WAIT FOR RAMP TIME AFTER CHAOS
    - name: Wait for the specified ramp time after injecting chaos
      wait_for: timeout="{{ ramp_time }}"
      when: "ramp_time is defined and ramp_time != ''" 

    ## GETTING THE NODE STATUS
    - name: Getting the node status
      shell: kubectl get nodes {{ node_name }} | awk '{print $2}' | tail -n1
      register: node_status

    ## DELETING THE JOB
    - name: Deleting the Memory Hog Job
      shell: kubectl delete -f /chaoslib/litmus/platform/gke/node-memory-hog-job.yml -n {{ a_ns }}
      args:
        executable: /bin/bash
    
    ## CHECKING WHETHER MEMORY HOG Job IS DELETED SUCCESSFULLY
    - name: Confirm that the Memory Hog Job is deleted successfully
      k8s_facts:
        kind: Job
        label_selectors:
          - job-name=node-memory-hog-{{ run_id }}
      register: resource_job
      until: "resource_job.resources | length < 1"
      delay: 2
      retries: 90

  rescue: 

    - block: 

        ## REMOVING THE MEMORY HOG Job
        - name: Deleting the Memory Hog Job
          shell: >
            kubectl delete -f /chaoslib/litmus/platform/gke/node-memory-hog-job.yml -n {{ a_ns }}
          args:
            executable: /bin/bash
          when: "memory_hog_job_result is succeeded"
        
        ## CHECKING WHETHER MEMORY HOG JOB IS DELETED SUCCESSFULLY
        - name: Confirm that the memory Hog Job is deleted successfully
          k8s_facts:
            kind: Job
            label_selectors:
              - job-name=node-memory-hog-{{ run_id }}
          register: resource_job
          until: "resource_job.resources | length < 1"
          delay: 2
          retries: 90
      when: "memory_hog_job_result is defined"

    ## FAIL WHEN ENTERS IN RESCUE BLOCK
    - name: Fail the task if it enters in the rescue block
      fail:
        msg: "node_memory_consumption lib failed"
      when: true
      