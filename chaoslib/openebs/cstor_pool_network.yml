- name: Setup pumba chaos infrastructure
  shell: >
    kubectl apply -f /chaoslib/pumba/pumba_kube.yaml
    -n {{ ns }}
  args:
    executable: /bin/bash
  register: result 

- name: Confirm that the pumba ds is running on all nodes
  shell: >
    kubectl get pod -l app=pumba 
    --no-headers -o custom-columns=:status.phase
    -n {{ ns }} | sort | uniq
  args: 
    executable: /bin/bash
  register: result
  until: "result.stdout == 'Running'"
  delay: 20
  retries: 15  

- name: Getting the Application pod name
  shell:  kubectl get pods -n {{ ns }} -l {{ app_label }} --no-headers -o=custom-columns=NAME:".metadata.name"  
  register: pod_name

- name: Getting the node on which Application pod is scheduled
  shell: kubectl get pod {{ pod_name.stdout }} -n {{ ns }} -o jsonpath='{.spec.nodeName}'
  register: node

  - name: Derive PV name from PVC
    shell: >
      kubectl get pvc {{ pvc_name }} -n {{ ns }}
      --no-headers -o custom-columns=:spec.volumeName
    args:
      executable: /bin/bash
    register: pv

  - name: Obtaining the storage class used from PVC
    shell: kubectl get pvc {{ pvc_name }} -n {{ ns }} --no-headers -o custom-columns=:.spec.storageClassName
    register: app_sc

  - name: Obtaining the SPC from storage class
    shell: kubectl get sc {{ app_sc.stdout }} --no-headers  -o yaml | awk '/StoragePoolClaim/{getline; print}' | cut -d ':' -f2 | sed 's/"//g'
    register: spc

  - name: Obtaining the pool deployments from cvr
    shell: >
      kubectl get cvr -n {{ operator_ns }}
      -l openebs.io/persistent-volume={{ pv.stdout }} --no-headers
      -o=jsonpath='{range .items[*]}{.metadata.labels.cstorpool\.openebs\.io\/name}{"\n"}{end}'
    args:
      executable: /bin/bash
    register: pool_deployment

  - name: Obtaining the replicasets corresponding to pool deployements.
    shell: >
      kubectl get rs --selector=app=cstor-pool -n {{ operator_ns }} --no-headers
      -o=jsonpath='{.items[?(@.metadata.ownerReferences[0].name=="{{item}}")].metadata.name}'
    register: rs_list
    with_items:
      - "{{ pool_deployment.stdout_lines }}"

  - name: Obtaining the pool pods
    shell: >
      kubectl get pod --selector=app=cstor-pool -n {{ operator_ns }} --no-headers 
      -o=jsonpath='{.items[?(@.metadata.ownerReferences[0].name=="{{item.stdout}}")].metadata.name}'
    register: pool_pods
    with_items:
      - "{{ rs_list.results }}"

  - name: Obtaining the pool pod on app node
    shell: >
      kubectl get pod --selector=app=cstor-pool -n {{ operator_ns }} --no-headers 
      -o=jsonpath='{.items[?(@.spec.nodeName=="{{node.stdout}}")].metadata.name}'
    register: pool_pod
    with_items:
      - "{{ pool_pods.results }}"

- name: Installing tc package in cstor-pool container
  shell: kubectl exec -it {{ pool_pod.stdout }} -n {{ target_ns }} -c cstor-pool -- apt-get install iproute2 -y 
  register: install_status
  failed_when: "'Setting up iproute2' not in install_status.stdout"

- name: Getting the pumba pod name on derived node
  shell: >
    kubectl get pods -l app=pumba -n {{ ns }} 
    -o jsonpath='{.items[?(@.spec.nodeName==''"{{node.stdout}}"'')].metadata.name}'
  args:
    executable: /bin/bash
  register: pumba_pod 

- name: Inject egress delay of {{network_delay}}ms on cstor target for {{ chaos_duration }}s
  shell: >
    kubectl exec {{ pumba_pod.stdout }} -n {{ ns }} 
    -- pumba netem --interface eth0 --duration {{ chaos_duration }}s loss
    --percent 100 re2:k8s_cstor-pool_cstor-sparse-pool; 
  args:
    executable: /bin/bash

- name: Wait for 10s post fault injection 
  wait_for:
    timeout: 10

- name: Delete the pumba daemonset 
  shell: kubectl delete -f /chaoslib/pumba/pumba_kube.yaml -n {{ ns }} 
  args:
    executable: /bin/bash
  register: result     

- name: Confirm that the pumba ds is deleted successfully
  shell: >
    kubectl get pods -l app=pumba --no-headers -n {{ ns }}
  args:
    executable: /bin/bash
  register: result
  until: "'Running' not in result.stdout"
  delay: 20
  retries: 15      

- name: Removing the tc package from cstor-pool
  shell: kubectl exec -it {{ pool_pod.stdout }} -n {{ target_ns }} -c cstor-pool -- apt-get purge iproute2 -y
  register: remove
  failed_when: "'Removing iproute2' not in remove.stdout"     
