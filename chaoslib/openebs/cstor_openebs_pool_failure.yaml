- name: Derive PV from application PVC 
  shell: >
    kubectl get pvc {{ app_pvc }}
    -o custom-columns=:spec.volumeName -n {{ app_ns }}
    --no-headers
  args:
    executable: /bin/bash
  register: pv

- name: Derive SC from application PVC 
  shell: >
    kubectl get pvc {{ app_pvc }}
    -o custom-columns=:spec.storageClassName -n {{ app_ns }}
    --no-headers
  args:
    executable: /bin/bash
  register: sc

- name: Derive ReplicaCount from SC
  shell: >
    kubectl get sc {{ sc.stdout }} -n {{ operator_ns }} -o json |
    jq '.metadata.annotations."cas.openebs.io/config"' -r |
    grep -A 1 -w "name: ReplicaCount" | grep -w value | awk '{print $2}'
  args:
    executable: /bin/bash
  register: replicacount

- name: Set default value for replicacount if it is empty
  set_fact:
    replicacnt: 3
  when: "replicacount.stdout == \"\""

- name: Set default value for replicacount if it is non-empty
  set_fact:
    replicacnt: replicacount.stdout | int
  when: "replicacount.stdout != \"\""

- name: Derive SPC from SC - not required
  shell: >
    kubectl get sc {{ sc.stdout }} -n {{ operator_ns }} -o json |
    jq '.metadata.annotations."cas.openebs.io/config"' -r |
    grep -A 1 -w "name: StoragePoolClaim" | grep -w value | awk '{print $2}'
  args:
    executable: /bin/bash
  register: spc

- name: Get CVR count from pv
  shell: >
    kubectl get cvr -n {{ operator_ns }}
    -l openebs.io/persistent-volume={{ pv.stdout }} --no-headers -o json |
    jq '.items | length'
  args:
    executable: /bin/bash
  register: cvr_count

- name: Compare ReplicaCount and cvr_count to verify provisioning
  debug:
    msg:
      - "replicaCount: replicacount.stdout"
      - "replicaCountInt: replicacount.stdout | int"
      - "replicacnt: replicacnt"
      - "cvr_count: cvr_count.stdout | int"
  failed_when: "replicacnt != cvr_count.stdout | int"

- name: Get CVR list from pv
  shell: >
    kubectl get cvr -n {{ operator_ns }}
    -l openebs.io/persistent-volume={{ pv.stdout }} --no-headers -o json |
    jq '.items[].status.phase'
  args:
    executable: /bin/bash
  register: cvr_status_phase

- name: Get the pool deployment of SPC
  shell: >
    kubectl get cvr -n {{ operator_ns }}
    -l openebs.io/persistent-volume={{ pv.stdout }} --no-headers -o json |
    jq '.items[].metadata.labels."cstorpool.openebs.io/name"' |
    shuf -n1 | awk '{print $1}'
  args:
    executable: /bin/bash
  register: pool_deployment

- name: Get the resourceVersion of pool deployment
  shell: >
    kubectl get deployment {{ pool_deployment.stdout }}
    -n {{ operator_ns }} -o json | jq '.metadata.resourceVersion'
  args:
    executable: /bin/bash
  register: pool_deployment_revisionSource_before

- name: Get the pod of pool deployment
  shell: >
    kubectl get pods -n {{ operator_ns }} |
    grep {{ pool_deployment.stdout }} | grep -w "Running" | awk '{print $1}'
  args:
    executable: /bin/bash
  register: cstor_pool_pod

- name: Delete the cstor pool pod for reschedule
  shell: >
    kubectl delete pod {{ cstor_pool_pod.stdout }} -n {{ operator_ns }}
  args:
    executable: /bin/bash

- name: Check for pool pod in running state
  shell: >
    kubectl get pods -n {{ operator_ns }} |
    grep {{ pool_deployment.stdout }} | grep -v {{ cstor_pool_pod.stdout }} |
    grep -w "Running" | wc -l
  args:
    executable: /bin/bash
  register: cstor_pool_pod_cnt
  until: "cstor_pool_pod_cnt.stdout == \"1\""
  delay: 30
  retries: 10

- name: Get resourceVersion after pod delete
  shell: >
    kubectl get deployment {{ pool_deployment.stdout }}
    -n {{ operator_ns }} -o json | jq '.metadata.resourceVersion'
  args:
    executable: /bin/bash
  register: pool_deployment_revisionSource_after

- name: Compare resourceVersions
  debug:
    msg:
      - "Verified pool pods were restarted by fault injection"
      - "Before: pool_deployment_revisionSource_before.stdout"
      - "After: pool_deployment_revisionSource_after.stdout"
  failed_when: "pool_deployment_revisionSource_before.stdout == pool_deployment_revisionSource_after.stdout"
