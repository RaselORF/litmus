---
- block:

   - name: Setup node freeze infra
     shell: >
       kubectl create -f {{ daemonset }} -n {{ namespace }}
     args:
       executable: /bin/bash
     register: result
    
   - name: Confirm that node freeze chaos ds is running on all nodes
     shell: >
       kubectl get pod -l app=node-freeze
       --no-headers -o custom-columns=:status.phase
       -n {{ namespace }} | sort | uniq
     args: 
       executable: /bin/bash
     register: result
     until: "result.stdout == 'Running'"
     delay: 20
     retries: 15

   - name: Obtaining the application pod name using its label.
     shell: >
       kubectl get pods -n {{ namespace }} -l {{ app_label }} | grep
       -w Running | awk '{print $1}' | head -1 
     args:
       executable: /bin/bash
     register: app_pod

   - name: Identify the application node
     shell: >
        kubectl get pod {{ app_pod.stdout }} -n {{ namespace }}
        --no-headers -o custom-columns=:spec.nodeName
     args: 
        executable: /bin/bash
     register: result 
               
   - name: Record the application node name 
     set_fact:
       app_node: "{{ result.stdout }}"

   - name: Record the node freeze chaos pod on given app node 
     shell: >
       kubectl get pod -l app=node-freeze -o wide 
       -n {{ namespace }} | grep {{ app_node }} 
       | awk '{print $1}'
     args:
       executable: /bin/bash
     register: chaos_pod

   - block:
            
      - name: Run docker container to trigger memory freeze on app node
        shell: >
          kubectl exec  {{ chaos_pod.stdout }} -n {{ namespace }}
          docker run {{ freeze_image }} python memleak.py &
        args:
          executable: /bin/bash
        ignore_errors: true 
   
     when: nodeaction == "memory-freeze"

   - block:
           
      - name: Run CPU freeze docker container.
        shell: >
          kubectl exec {{ chaos_pod.stdout }} -n {{ namespace }} 
          docker run {{ freeze_image }} & 
        args:
          executable: /bin/bash      
        ignore_errors: true
     
     when: nodeaction == "cpu-freeze"   
   
   - name: wait for node memory freeze
     shell: >
        sleep {{ f_duration }}
     args:
       executable: /bin/bash

   - name: Check the node status after node chaos.
     shell: kubectl get node {{ app_node }} --no-headers | awk '{print $2}'
     args:
       executable: /bin/bash
     register: node_statusi
     until: "'NotReady' in node_status.stdout"
     delay: 5
     retries: 60        

- block:
     
   - name: Delete node chaos infra
     shell: >
       kubectl delete ds -l app=node-freeze
       -n {{ namespace }}
     args:
       executable: /bin/bash
     register: result
 
   - name: Confirm that the node chaos ds is stopped on all nodes
     shell: >
       kubectl get pod -l app=node-feeze
       --no-headers -o custom-columns=:status.phase
       -n {{ namespace }} | sort | uniq
     args: 
       executable: /bin/bash
     register: result
     until: "'Running' not in result.stdout"
     delay: 20
     retries: 15          

  when: nodeaction == "node_choas_delete"
