--- 
- block:

    - name: Patch the chaoslib image
      template:
        src:  /chaoslib/pumba/pumba.j2
        dest: /chaoslib/pumba/pumba_kube.yml
      vars:
        pumba_image: "{{ lib_image }}"

    - name: Setup pumba chaos infrastructure
      shell: >
        kubectl apply -f /chaoslib/pumba/pumba_kube.yml
        -n {{ namespace }}
      args:
        executable: /bin/bash
      register: pumba_ds_result

      # Verifies pumba ds pods status against Ready Nodes
      # The nested kubectl command returns (via command substitution) a list of Ready nodes: 
      # Its field selector removes unschedulable nodes that might return "Ready,SchedulingDisabled", 
      # the grep filters the output to just "Ready" nodes, and the awk returns just the node names in the single-line format: "node01" "node02" "node03" "node04"
      # This list is then passed into the Go-template output formatter, so that the main 'kubectl get pod...' 
      # command only returns the status of the pods on the Ready nodes (e.g. {{if eq .spec.nodeName "node01" "node02" "node03" "node04"}}{{.status.phase}})
    - name: Confirm that the pumba ds is running on all nodes
      shell: >
        kubectl get pod -l app=pumba
        --no-headers --template "{{range .items}}{{if eq .spec.nodeName $(kubectl get nodes --no-headers --field-selector spec.unschedulable=false | grep Ready | awk '{printf "\"%s\" ", $1}')}}{{.status.phase}}{{\"\n\"}}{{end}}{{end}}"
        -n {{ namespace }} | sort | uniq
      args:
        executable: /bin/bash
      register: result
      until: "result.stdout == 'Running'"
      delay: 2
      retries: 60
      ignore_errors: true

    - block:
        - name: Select the app pod
          shell: >
            kubectl get pod -l {{ label }} -n {{ namespace }}
            -o=custom-columns=NAME:".metadata.name" --no-headers
            | shuf | head -1 
          args:
            executable: /bin/bash
          register: pod_name

        - name: Record application pod name
          set_fact:
            app_pod_ut: "{{ pod_name.stdout }}"     
      when: app_pod is not defined or app_pod == ''

    - block: 

        - name: Record application pod name
          set_fact: 
            app_pod_ut: "{{ app_pod }}"

      when: app_pod is defined and app_pod != ''

    - name: Identify the application node
      shell: >
        kubectl get pod {{ app_pod_ut }} -n {{ namespace }}
        --no-headers -o custom-columns=:spec.nodeName
      args:
        executable: /bin/bash
      register: result

    - name: Record the application node name
      set_fact:
        app_node: "{{ result.stdout }}"

    - block:

      - name: Record the application container
        shell: >
          kubectl get pods -l {{ label }} -n {{ namespace }} -o jsonpath='{.items[0].spec.containers[0].name}'
        args:
          executable: /bin/bash
        register: container

      - name: Record the app_container
        set_fact:
          a_container: "{{ container.stdout }}"

      when: app_container is not defined or app_container == ''

    - block:

      - name: Record the app_container
        set_fact:
          a_container: "{{ app_container }}"
        
      when: app_container is defined and app_container != ''

    - name: Record the pumba pod on app node
      shell: >
        kubectl get pod -l app=pumba -o wide
        -n {{ namespace }} | grep {{ app_node }}
        | awk '{print $1}'
      args:
        executable: /bin/bash
      register: pumba_pod

    - name: Record restartCount
      shell: >
        kubectl get pod {{ app_pod_ut }} -n {{ namespace }}
        -o=jsonpath='{.status.containerStatuses[?(@.name=="{{ a_container }}")].restartCount}'
      args:
        executable: /bin/bash
      register: restartCnt_prev

    - name: Confirm that pumba container is in running state 
      include_tasks: "/utils/common/status_app_pod.yml"
      vars:
        app_label: "app=pumba"
        app_ns: "{{ namespace }}"  
        delay: 2
        retries: 60

    - name: Wait for the specified ramp time before injecting chaos
      wait_for: timeout="{{ ramp_time }}"
      when: "ramp_time is defined and ramp_time != ''"

    - name: Force kill the application pod using pumba
      shell: >
        kubectl exec {{ pumba_pod.stdout}} -n {{ namespace }}
        -- pumba kill --signal SIGKILL re2:k8s_{{ a_container }}_{{ app_pod_ut }};
      args:
        executable: /bin/bash
      ignore_errors: true
      register: result

    - name: Verify restartCount
      shell: >
        kubectl get pod {{ app_pod_ut }} -n {{ namespace }}
        -o=jsonpath='{.status.containerStatuses[?(@.name=="{{ a_container }}")].restartCount}'
      args:
        executable: /bin/bash
      register: restartCnt
      until: "restartCnt.stdout|int > restartCnt_prev.stdout|int"
      delay: 2
      retries: 60

    - name: Tear down pumba infrastructure
      shell: >
        kubectl delete -f /chaoslib/pumba/pumba_kube.yml -n {{ namespace }}
      args:
        executable: /bin/bash

    - name: Confirm that the pumba job is deleted successfully
      shell: >
        kubectl get pods -l app=pumba --no-headers -n {{ namespace }}
      args:
        executable: /bin/bash
      register: result
      until: "'No resources found' in result.stderr"
      delay: 2
      retries: 60

  rescue: 

    - block: 

        - name: Tear down pumba infrastructure, if setup
          shell: >
            kubectl delete -f /chaoslib/pumba/pumba_kube.yml -n {{ namespace }}
          args:
            executable: /bin/bash
          when: pumba_ds_result.rc == 0
        
        - name: Confirm that the pumba job is not present
          shell: >
            kubectl get pods -l app=pumba --no-headers -n {{ namespace }}
          args:
            executable: /bin/bash
          register: result
          until: "'No resources found' in result.stderr"
          delay: 2
          retries: 60
      when: "pumba_ds_result is defined"

    - fail:
        msg: "pod_failure_by_sigkill lib failed"
      when: true
        