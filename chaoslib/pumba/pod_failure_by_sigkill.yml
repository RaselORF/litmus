--- 
- block:
    - block: 

        - name: Select the app pod
          shell: >
            kubectl get pod -l {{ a_label }} -n {{ namespace }}
            -o=custom-columns=:metadata.name --no-headers
            | shuf | head -1 
          args:
            executable: /bin/bash
          register: app_pod_name

        - name: Record app pod name
          set_fact:
            app_pod: "{{ app_pod_name.stdout }}"

      when: "app_pod is not defined or app_pod == ''"

    - name: Identify the application node
      shell: >
        kubectl get pod {{ app_pod }} -n {{ namespace }}
        --no-headers -o custom-columns=:spec.nodeName
      args:
        executable: /bin/bash
      register: app_node

    - set_fact: 
        app_node: "{{ app_node.stdout }}"

    - name: Patch the chaoslib image
      template:
        src:  /chaoslib/pumba/pumba.j2
        dest: /chaoslib/pumba/pumba_kube.yml
      vars:
        pumba_image: "{{ lib_image }}"
        chaosUID: "{{ chaos_uid }}"
        app_node: "{{ app_node }}"
        app_pod: "{{ app_pod }}"
        app_container: "{{ a_container }}"
        
    - name: Setup pumba chaos infrastructure
      shell: >
        kubectl apply -f /chaoslib/pumba/pumba_kube.yml
        -n {{ namespace }}
      args:
        executable: /bin/bash
      register: pumba_job_result

    - name: Confirm that the pumba job is running on {{ app_node }} nodes
      shell: >
        kubectl get pod -l app=pumba
        --no-headers -o custom-columns=:status.phase
        -n {{ namespace }} | sort | uniq
      args:
        executable: /bin/bash
      register: result
      until: "result.stdout == 'Running'"
      delay: 2
      retries: 60

    - block:

      - name: Record the application container
        shell: >
          kubectl get pods -l {{ label }} -n {{ namespace }} -o jsonpath='{.items[0].spec.containers[0].name}'
        args:
          executable: /bin/bash
        register: container

      - name: Record the app_container
        set_fact:
          a_container: "{{ container.stdout }}"

      when: app_container is not defined or app_container == ''

    - block:

      - name: Record the app_container
        set_fact:
          a_container: "{{ app_container }}"
        
      when: app_container is defined and app_container != ''

    - name: Record the pumba pod on app node
      shell: >
        kubectl get pod -l app=pumba -o wide
        -n {{ namespace }} | grep {{ app_node }}
        | awk '{print $1}'
      args:
        executable: /bin/bash
      register: pumba_pod

    - name: Record restartCount
      shell: >
        kubectl get pod {{ app_pod }} -n {{ namespace }}
        -o=jsonpath='{.status.containerStatuses[?(@.name=="{{ a_container }}")].restartCount}'
      args:
        executable: /bin/bash
      register: restartCnt_prev

    - name: Confirm that pumba container is in running state 
      include_tasks: "/utils/common/status_app_pod.yml"
      vars:
        app_label: "app=pumba"
        app_ns: "{{ namespace }}"  
        delay: 2
        retries: 60

    - name: Wait for the specified ramp time before injecting chaos
      wait_for: timeout="{{ ramp_time }}"
      when: "ramp_time is defined and ramp_time != ''"

    # - name: Force kill the application pod using pumba
    #   shell: >
    #     kubectl exec {{ pumba_pod.stdout}} -n {{ namespace }}
    #     -- pumba kill --signal SIGKILL re2:k8s_{{ a_container }}_{{ app_pod }};
    #   args:
    #     executable: /bin/bash
    #   ignore_errors: true
    #   register: result

    - name: Verify restartCount
      shell: >
        kubectl get pod {{ app_pod }} -n {{ namespace }}
        -o=jsonpath='{.status.containerStatuses[?(@.name=="{{ a_container }}")].restartCount}'
      args:
        executable: /bin/bash
      register: restartCnt
      until: "restartCnt.stdout|int > restartCnt_prev.stdout|int"
      delay: 2
      retries: 60

    - name: Tear down pumba infrastructure
      shell: >
        kubectl delete -f /chaoslib/pumba/pumba_kube.yml -n {{ namespace }}
      args:
        executable: /bin/bash

    - name: Confirm that the pumba job is deleted successfully
      shell: >
        kubectl get pods -l app=pumba --no-headers -n {{ namespace }}
      args:
        executable: /bin/bash
      register: result
      until: "'No resources found' in result.stderr"
      delay: 2
      retries: 60

  rescue: 

    - block: 

        - name: Tear down pumba infrastructure, if setup
          shell: >
            kubectl delete -f /chaoslib/pumba/pumba_kube.yml -n {{ namespace }}
          args:
            executable: /bin/bash
          when: pumba_job_result.rc == 0
        
        - name: Confirm that the pumba job is not present
          shell: >
            kubectl get pods -l app=pumba --no-headers -n {{ namespace }}
          args:
            executable: /bin/bash
          register: result
          until: "'No resources found' in result.stderr"
          delay: 2
          retries: 60
      when: "pumba_job_result is defined"

    - fail:
        msg: "pod_failure_by_sigkill lib failed"
      when: true