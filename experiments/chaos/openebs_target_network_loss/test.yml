---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml
    - /mnt/parameters.yml

  tasks:
    - block:

        - include_tasks: /utils/k8s/application_liveness_check.yml
          when: liveness_label != ''    

        ## DERIVE THE APP STORAGE CLASS AND CHAOS UTIL TO USE

        - include: test_prerequisites.yml

        - include_vars:
            file: data_persistence.yml

        - include_vars:
            file: chaosutil.yml

        - name: Record the chaos util path
          set_fact:
            chaos_util_path: "/chaoslib/{{ chaosutil }}"

        - name: Record the data consistency util path
          set_fact:
            data_consistency_util_path: "{{ consistencyutil }}"
          when: data_persistence != ''

        ## RECORD START-OF-TEST IN LITMUS RESULT CR
        
        - include_tasks: /utils/fcm/create_testname.yml

        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'SOT'
            chaostype: "{{ chaosutil.split('.')[0] }}"

        ## DISPLAY APP INFORMATION

        - name: Display the app information passed via the test job
          debug:
            msg:
              - "The application info is as follows:"
              - "Namespace    : {{ namespace }}"
              - "Label        : {{ label }}"
              - "PVC          : {{ pvc }}"
              - "StorageClass : {{ sc }}"

        ## PRE-CHAOS APPLICATION LIVENESS CHECK
        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}" 
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"       
            delay: 5
            retries: 60

        - name: Get application pod name
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: app_pod_name

        - name: Create some test data
          include: "{{ data_consistency_util_path }}"
          vars:
            status: 'LOAD'
            ns: "{{ namespace }}"
            pod_name: "{{ app_pod_name.stdout }}"
          when: data_persistence != ''

        ## STORAGE FAULT INJECTION

        - include: "{{ chaos_util_path }}"
          app_ns: "{{ namespace }}"
          app_pvc: "{{ pvc }}"
          network_delay: "{{ n_delay }}"
          chaos_duration: "{{ c_duration }}"

        ## POST-CHAOS APPLICATION LIVENESS CHECK

        - name: Verify AUT liveness post fault-injection
          include_tasks: "/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}" 
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"       
            delay: 5
            retries: 60

        - name: Delete the application pod
          shell: kubectl delete pod {{ app_pod_name.stdout }} -n {{ namespace }}
          args:
           executable: /bin/bash
          register: app_pod

        - name: Check whether the application pod is deleted 
          shell: kubectl get pods -n {{ namespace }}
          args:
            executable: /bin/bash
          register: pod_status
          until: "app_pod_name.stdout not in pod_status.stdout"
          delay: 20
          retries: 15

        - name: Check the application pod is rescheduled
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o custom-columns=:status.phase
          args:
            executable: /bin/bash
          register: new_app_status
          until: "((new_app_status.stdout_lines|unique)|length) == 1 and 'Running' in new_app_status.stdout"
          delay: 10
          retries: 15

        - name: Get the rescheduled  application pod name
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: new_pod_name

        - include_tasks: /utils/k8s/application_liveness_check.yml
          when: liveness_label != ''

        - name: Verify application data persistence
          include: "{{ data_consistency_util_path }}"
          vars:
            status: 'VERIFY'
            ns: "{{ namespace }}"
            pod_name: "{{ new_pod_name.stdout }}"
          when: data_persistence != ''

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:

        ## RECORD END-OF-TEST IN LITMUS RESULT CR

        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'EOT'
            chaostype: "{{ chaosutil.split('.')[0] }}"
