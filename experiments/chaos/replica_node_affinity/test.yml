---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:
         
        ## Create test name append with run_id 
        - include_tasks: "/utils/fcm/create_testname.yml"

        ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/utils/fcm/update_litmus_result_resource.yml"
          vars:
            status: 'SOT'

        - name: Getting replica-pod name
          shell: >
            kubectl get pod -n {{ namespace }} -l openebs.io/replica=jiva-replica 
            -o jsonpath='{.items[0].metadata.name}'
          register: rep_pod

        - name: Checking the status of replica pod
          shell: kubectl get pod {{ rep_pod.stdout }} -n {{ namespace }} -o jsonpath='{.status.phase}'
          register: status
          until: "'Running' in status.stdout"
          delay: 30
          retries: 10
 
        - name: Getting the Node name on which replica-pod is scheduled
          shell: kubectl get pod {{ rep_pod.stdout }} -n {{ namespace }} -o jsonpath='{.spec.nodeName}' 
          register: node

        - name: Obtaining the deployment name for the replica pod
          shell: >
             kubectl get deployments -n {{ namespace }} -l openebs.io/replica=jiva-replica 
             -o jsonpath='{.items[0].metadata.name}' 
          register: deployment_name
    
        - name: Checking the node affinity for replica-pod
          include_tasks: "/funclib/kubectl/pod_node_affinity.yml"
          vars:
              ns: "{{ namespace }}"
              pod_name: "{{ rep_pod.stdout }}"
              pod_label: "openebs.io/replica=jiva-replica"

        - name: Checking the status of replica-pod
          shell: >
             kubectl get pod {{ new_pod_name.stdout }} -n {{ namespace }} -o jsonpath='{.status.phase}'
          until: "'Running' in status.stdout"
          delay: 30
          retries: 10      

        - set_fact:
            flag: "Pass" 
               
      rescue:
        - set_fact:
            flag: "Fail"           
  
      always:    
          #This Task is added inside always because if it the fails node will be available for scheduling
        - name: Uncordon node                          
          shell: kubectl uncordon {{ node_name.stdout }}
         
          ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/utils/fcm/update_litmus_result_resource.yml"
          vars:
            status: 'EOT' 
