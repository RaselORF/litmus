---
- hosts: localhost
  connection: local

  vars:
    a_label: "{{ lookup('env','APP_LABEL') }}"
    a_ns: "{{ lookup('env','APP_NAMESPACE') }}"
    c_experiment: "node-drain"
    data_persistance: "{{ lookup('env','DATA_PERSISTENCY') }}"
    liveness_label: "{{ lookup('env','LIVENESS_APP_LABEL') }}"
    liveness_namespace: "{{ lookup('env','LIVENESS_APP_NAMESPACE') }}"

  tasks:
    - block:

        ## PRE-CHAOS APPLICATION LIVENESS CHECK
        - include_tasks: /utils/common/application_liveness_check.yml
          when: liveness_label != ''

        ## RECORD START-OF-TEST IN CHAOS RESULT CR
        
        - include_tasks: /utils/runtime/create_testname.yml

        - include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'SOT'
            namespace: "{{ a_ns }}"

        ## DISPLAY APP INFORMATION 
 
        - name: Display the app information passed via the test job
          debug: 
            msg: 
              - "The application info is as follows:"
              - "Namespace    : {{ a_ns }}"
              - "Label        : {{ a_label }}"

        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/utils/common/status_app_pod.yml"
          vars:       
            delay: 5
            retries: 60

        - name: Get application pod name
          shell: >
            kubectl get pods -n {{ a_ns }} -l {{ a_label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: app_pod_name

        - name: Generate unique string for use in dbname
          shell: echo $(mktemp) | cut -d '.' -f 2
          args:
            executable: /bin/bash
          register: uniqstr

        - name: Create some test data in the mysql database
          include_tasks: "/utils/apps/mysql/mysql_data_persistence.yml"
          vars:
            status: 'LOAD'
            ns: "{{ a_ns }}"
            pod_name: "{{ app_pod_name.stdout }}"
            dbuser: 'root'
            dbpassword: 'k8sDem0'
            dbname: "tdb{{ uniqstr.stdout }}"
          when: data_persistance != ''

        ## STORAGE FAULT INJECTION 

        - include_tasks: /chaoslib/litmus/cordon_drain_node.yaml
          vars:
            action: "drain"      
            app_ns: "{{ a_ns }}"
            app_pod: "{{ app_pod_name.stdout }}"

        - name: Verify AUT liveness post fault-injection
          include_tasks: "/utils/common/status_app_pod.yml"
          vars:
            delay: 5
            retries: 60

        ## POST-CHAOS APPLICATION LIVENESS CHECK

        - include_tasks: /utils/common/application_liveness_check.yml
          when: liveness_label != ''
        
        - name: Get application pod name
          shell: >
            kubectl get pods -n {{ a_ns }} -l {{ a_label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: rescheduled_app_pod  

        - name: Verify mysql data persistence
          include_tasks: "/utils/apps/mysql/mysql_data_persistence.yml"
          vars:
            status: 'VERIFY'
            ns: "{{ a_ns }}"
            pod_name: "{{ rescheduled_app_pod.stdout }}"
            dbuser: 'root'
            dbpassword: 'k8sDem0'
            dbname: "tdb{{ uniqstr.stdout }}"
          when: data_persistance != ''

        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 

        - name: Uncordon the application node
          include_tasks: "/chaoslib/litmus/cordon_drain_node.yaml"
          vars:
            action: "uncordon"      
            app_ns: "{{ a_ns }}"
            app_pod: "{{ rescheduled_app_pod.stdout }}"

         ## RECORD END-OF-TEST IN CHAOS RESULT CR    
        - include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'EOT'
            namespace: "{{ a_ns }}"
      