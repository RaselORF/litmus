---
   - name: Get the pvc label values from env
     set_fact:
         pvc_lkey: "{{ pvc_label.split('=')[0] }}"
         pvc_lvalue: "{{ pvc_label.split('=')[1] }}"

   - name: Replace the pvc label placeholder in spec
     replace:
        path: "{{ pvc_deployment }}"
        regexp: "lkey: lvalue"
        replace: "{{ pvc_lkey }}: {{ pvc_lvalue }}{{i}}"
 
   - name: Change the claim name in deployment.
     replace:
       dest: "{{ pvc_deployment }}"
       regexp: "testclaim"
       replace: "{{pvc_name}}-{{i}}"

   - name: Deploy the test pvc
     shell: kubectl apply -f {{ pvc_deployment }} -n {{ namespace }}
     args:
       executable: /bin/bash
     register: pvc

   - name: check if the PVC is created
     shell: kubectl get pvc "{{ pvc_name }}-{{i}}" -n {{ namespace }} -o jsonpath='{.status.phase}'
     args: 
       executable: /bin/bash
     register: pvc_status
     until: "'Bound' in pvc_status.stdout"
     delay: 10
     retries: 20

   - name: Check if the target pod is running
     shell: >
       kubectl get pods -n {{ operator_ns }} -l openebs.io/persistent-volume-claim="{{ pvc_name }}-{{i}}" 
       -o custom-columns=:status.phase --no-headers
     args:
       executable: /bin/bash
     register: target
     until: "'Running' in target.stdout"
     delay: 10
     retries: 20
   
   ### Revert the changes ########
   
   - name: Revert the claim name in deployment.
     replace:
       dest: "{{ pvc_deployment }}"
       regexp: "{{pvc_name}}-{{i}}"
       replace: "testclaim"

   - name: Revert the label in spec file.
     replace:
        dest: "{{ pvc_deployment }}"
        regexp: "{{ pvc_lkey }}: {{ pvc_lvalue }}{{i}}"
        replace: "lkey: lvalue"

   ## For continuos iteration of "i" value ## 
   - set_fact:
       i: '{{ i | int + 1 }}'
