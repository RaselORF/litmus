- hosts: localhost
  connection: local

  vars:
    c_experiment: "openebs-control-plane-chaos"
    c_duration: "{{ lookup('env','TOTAL_CHAOS_DURATION') }}"
    c_interval: "{{ lookup('env','CHAOS_INTERVAL') }}"
    ramp_time: "{{ lookup('env','RAMP_TIME') }}"
    c_force: "{{ lookup('env','FORCE') }}"
    c_lib: "{{ lookup('env','LIB') }}"
    c_svc_acc: "{{ lookup('env','CHAOS_SERVICE_ACCOUNT') }}"
    openebs_ns: "{{ lookup('env','OPENEBS_NAMESPACE') }}"
    kill_count: "{{ lookup('env','KILL_COUNT') }}"
    c_engine: "{{ lookup('env','CHAOS_ENGINE') }}"
    
  tasks:
    - block:
        - include: openebs_control_plane_chaos_ansible_prerequisites.yml
    
        - include_vars:
            file: chaosutil.yml

        - name: Include openebs control plane components
          include_vars:
            file: /experiments/openebs/openebs_control_plane_components.yml
            name: openebs

        ## GENERATE EXP RESULT NAME
        - name: Construct chaos result name
          set_fact:
            c_result: "{{ c_engine }}-{{ c_experiment }}"
          when: "c_engine is defined and c_engine != ''"

        ## RECORD START-OF-EXPERIMENT IN LITMUSCHAOS RESULT CR
        - include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'SOT'
            namespace: "{{ openebs_ns }}"

        ## INJECT CHAOS ON CONTROL PLANE COMPONENTS
        - name: Including main components
          include_tasks: openebs_control_plane_chaos_internal_tasks.yml
          loop: "{{ openebs.components }}"

        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 
        ## RECORD END-OF-TEST IN LITMUSCHAOS RESULT CR
        - include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'EOT'
            namespace: "{{ openebs_ns }}"