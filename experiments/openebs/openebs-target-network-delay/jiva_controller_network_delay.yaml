- block:
  - name: Identify the jiva controller pod belonging to the PV
    shell: >
      set -o pipefail &&
      kubectl get pods -l {{ jiva_controller_pod_label }} \
      -n {{ a_ns }} -o jsonpath='{.items[?(@.metadata.labels.openebs\.io/persistent-volume=="{{ pv_name }}")].metadata.name}'
    args:
      executable: /bin/bash
    register: jiva_controller_pod

  - name: Record the jiva controller pod and container name
    set_fact:
      jiva_controller_container_name: "{{ pv.stdout }}-{{ jiva_controller_pod_suffix }}-{{ jiva_controller_container_suffix }}"
      jiva_controller_pod_name: "{{ jiva_controller_pod.stdout }}"

  - name: Get controller svc
    shell: >
      set -o pipefail &&
      kubectl get svc -l {{ jiva_controller_svc_label }} \
      -n {{ a_ns }} -o=jsonpath='{.items[0].spec.clusterIP}'
    args:
      executable: /bin/bash
    register: controller_svc
    failed_when: controller_svc.stdout | length == 0

  - name: Install jq package inside a controller container
    shell: >
      set -o pipefail &&
      kubectl exec -it {{ jiva_controller_pod.stdout }} -n {{ a_ns }} -c {{ jiva_controller_container_name }} \
      -- bash -c "apt-get update && apt-get install -y jq && apt-get install -y iproute2"
    args:
      executable: /bin/bash

  - name: Getting the ReplicaCount before injecting delay
    shell: >
      set -o pipefail &&
      kubectl exec -it {{ jiva_controller_pod.stdout }} -n {{ a_ns }} \
      -c {{ jiva_controller_container_name }} curl http://"{{ controller_svc.stdout }}":9501/v1/volumes | jq -r '.data[].replicaCount'
    args:
      executable: /bin/bash
    register: rcount_before

  # including pumba lib  -> network_chaos
  - name: Inject egress delay of {{ n_delay }}ms on jiva controller for {{ c_duration }}ms
    include_tasks: /chaoslib/pumba/network_chaos/network_chaos.yml
    vars:
      n_interface: "eth0"
      n_latency: "{{ n_delay }}"
      c_container: "{{ jiva_controller_container_name }}"
      app_pod:  "{{ jiva_controller_pod_name }}"
      app_ns: "{{ a_ns }}"

  - name: Verifying the Replica getting disconnected
    shell: >
      set -o pipefail &&
      kubectl exec -it {{ jiva_controller_pod.stdout }} -n {{ a_ns }} \
      -c {{ jiva_controller_container_name }} curl http://"{{ controller_svc.stdout }}":9501/v1/volumes | jq -r '.data[].replicaCount'
    args:
      executable: /bin/bash
    register: resp
    until: resp.stdout != rcount_before.stdout
    retries: 10
    delay: 15

  - name: Verifying the replicas post network recovery
    shell: >
      set -o pipefail &&
      kubectl exec -it {{ jiva_controller_pod.stdout }} -n {{ a_ns }} \
      -c {{ jiva_controller_container_name }} curl http://"{{ controller_svc.stdout }}":9501/v1/volumes | jq -r '.data[].replicaCount'
    args:
      executable: /bin/bash
    register: replica
    until: replica.stdout == rcount_before.stdout
    retries: 10
    delay: 15