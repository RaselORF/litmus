---

- block: 
    - name: Verify if node taints are present 
      shell: >
        kubectl describe node 
        {{ percona_node }}
        | grep {{ taint }}
      args:
        executable: /bin/bash
      register: output 
      ignore_errors: true 

    - name: Untaint the node if taints are present
      shell: >
        kubectl taint node 
        {{ percona_node }}
        {{ taint }}:NoExecute-
      args:
        executable: /bin/bash
      register: result
      failed_when: "'untainted' not in result.stdout"
      when: output.rc == 0 

  when: percona_node is defined

- name: Get pvc name to verify successful pvc deletion
  shell: >
    kubectl get pvc {{ test_name }} 
    -o custom-columns=:spec.volumeName -n litmus 
    --no-headers
  args:
    executable: /bin/bash
  register: pv

- name: Delete percona mysql pod 
  shell: >
    source ~/.profile; kubectl delete -f {{ pod_yaml_alias }} 
    -n litmus 
  args:
    executable: /bin/bash

- name: Confirm percona pod has been deleted
  shell: source ~/.profile; kubectl get pods -n litmus 
  args:
    executable: /bin/bash
  register: result
  until: "'percona' not in result.stdout"
  delay: 30 
  retries: 12

- block: 
    - name: Confirm pvc pod has been deleted
      shell: >
        kubectl get pods -n litmus | grep {{ pv.stdout }}
      args:
        executable: /bin/bash
      register: result
      failed_when: "'pvc' and 'Running' in result.stdout"
      delay: 30
      retries: 12
  when: "'openebs-standard' in lookup('env','PROVIDER_STORAGE_CLASS')"

