---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:
    
        - name: Generate the litmus result CR to reflect SOT (Start of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: in-progress
            verdict: none
    
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"
          
        - name: Getting replica-pod name
          shell: kubectl get pod -n {{ namespace }} -l openebs.io/replica=jiva-replica -o jsonpath='{.items[0].metadata.name}'
          register: rep_pod

        - name: Checking the status of replica pod
          shell: kubectl get pod {{ rep_pod.stdout }} -n {{ namespace }} -o jsonpath='{.status.phase}'
          register: status
          until: "'Running' in status.stdout"
          delay: 10
          retries: 10
 
        - name: Getting the Node name on which replica-pod is scheduled
          shell: kubectl get pod {{ rep_pod.stdout }} -n {{ namespace }} -o jsonpath='{.spec.nodeName}' 
          register: node

        - name: Obtaining the deployment name for the replica pod
          shell: kubectl get deployments -n {{ namespace }} -l openebs.io/replica=jiva-replica -o jsonpath='{.items[0].metadata.name}'  
          register: deployment_name

        - name: Replacing the Node name in Patch yaml
          replace:
           path: "{{ patch_file }}"
           regexp: 'nodename_where_replica_pod_got_scheduled'
           replace: '{{ node.stdout }}'
 
        - name: Update the replica deployment with node affinity property
          shell: kubectl patch deployment {{ deployment_name.stdout }} -n {{ namespace }} -p "$(cat {{ patch_file }})"
          register: patch_status
          failed_when: "'patched' not in patch_status.stdout"
    
        - name: Checking the node affinity for replica-pod
          include_tasks: "/funclib/kubectl/pod_node_affinity.yml"
          vars:
              ns: "{{ namespace }}"
              pod_name: "{{ rep_pod.stdout }}"

        - name: Checking the status of replica-pod
          shell: kubectl get pod {{ new_pod_name.stdout }} -n {{ namespace }} -o jsonpath='{.status.phase}'
          until: "'Running' in status.stdout"
          delay: 5
          retries: 10      

        - set_fact:
            flag: "Pass" 
               
      rescue:
        - set_fact:
            flag: "Fail"           
  
      always:    
         
        - name: Generate the litmus result CR to reflect EOT (End of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: completed
            verdict: "{{ flag }}"
             
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status
          failed_when: "lr_status.rc != 0" 