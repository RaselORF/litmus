---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:
        ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - name: Generate the litmus result CR to reflect SOT (Start of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: in-progress
            verdict: none
        
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"

     ## Actual Test to deploy Crunchy Postgress  on k8s
        - name: Check whether the provider storageclass is applied
          shell: kubectl get sc {{ lookup('env','PROVIDER_STORAGE_CLASS') }}
          args:
            executable: /bin/bash
          register: result

        - name: Replace the pvc placeholder with provider
          replace:
            path: "{{ pg_statefulset }}"
            regexp: "testclaim"
            replace: "{{ lookup('env','PROVIDER_PVC') }}"

        - name: Replace the storageclass placeholder with provider
          replace:
            path: "{{ pg_statefulset }}"
            regexp: "testclass"
            replace: "{{ lookup('env','PROVIDER_STORAGE_CLASS') }}"

        - name: Create test specific namespace.
          shell: source ~/.profile;  kubectl create ns {{ namespace }}
          args:
           executable: /bin/bash
          when: namespace != 'litmus'

        - name: Checking the status  of test specific namespace.
          shell: kubectl get ns {{ namespace }} -o custom-columns=:status.phase --no-headers 
          args:
           executable: /bin/bash
          register: npstatus
          until: "'Active' in npstatus.stdout"
          delay: 30
          retries: 10

        - name: Deploying postgres statefulset and services
          shell: kubectl apply -f {{ pg_statefulset }} -n {{ namespace }}
          args:
            executable: /bin/bash
          register: result

        - name: Verify that the postgres master and replica are available as cluster services
          shell: kubectl get svc -n {{ namespace }}
          args:
            executable: /bin/bash
          register: result_service
          failed_when: "'pgset-primary' and 'pgset-replica' not in result_service.stdout"

        - block:

            - name: Obtain the number of replicas.
              shell: >
                 kubectl get sts -n {{ namespace }} -o jsonpath='{.items[?(@.metadata.labels.app=="pgset")].spec.replicas}'
              args:
                executable: /bin/bash
              register: rep_count
              until: "rep_count.rc == 0"
              delay: 60
              retries: 15

            - name: Obtain the ready replica count and compare with the replica count.
              shell: >
                kubectl get sts -n {{ namespace }} -o jsonpath='{.items[?(@.metadata.labels.app=="pgset")].status.readyReplicas}'
              args:
                executable: /bin/bash
              register: ready_rep
              until: "ready_rep.rc == 0 and ready_rep.stdout|int == rep_count.stdout|int"
              delay: 60
              retries: 15

          when: lookup('env','DEPLOY_TYPE') == 'statefulset'

        - name: Checking postgress replicas pods are running state
          shell: kubectl get pods -n {{ namespace }} -o jsonpath='{.items[?(@.metadata.labels.app=="pgset")].status.phase}'
          register: result
          until: "((result.stdout_lines|unique)|length) == 1 and 'Running' in result.stdout"
          delay: 10
          retries: 100

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"
          
      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR 
        - name: Generate the litmus result CR to reflect EOT (End of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: completed
            verdict: "{{ flag }}"
           
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"
