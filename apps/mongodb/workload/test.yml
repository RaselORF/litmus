---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:
        - block:

            - name: Record test instance/run ID
              set_fact:
                run_id: "{{ lookup('env','RUN_ID') }}"

            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ test_name }}-{{ run_id }}"

          when: lookup('env','RUN_ID')

        ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - name: Generate the litmus result CR to reflect SOT (Start of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: in-progress
            verdict: none
            
        
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"
        
        - name: Obtaining the loadgen pod label from env.
          set_fact:
            loadgen_lkey: "{{ loadgen_label.split('=')[0] }}"
            loadgen_lvalue: "{{ loadgen_label.split('=')[1] }}"

        - name: Replace the label in loadgen job spec.
          replace:
            path: "{{ mongodb_loadgen }}"
            regexp: "loadgen_lkey: loadgen_lvalue"
            replace: "{{ loadgen_lkey }}: {{ loadgen_lvalue }}"

        - name: Replace service placeholder in mongo-loadgen
          replace:
            path: "{{ mongodb_loadgen }}"
            regexp: "servicename"
            replace: "{{ lookup('env','SERVICE_NAME') }}"

        - name: Replace pod placeholder in mongo-loadgen
          replace:
            path: "{{ mongodb_loadgen }}"
            regexp: "podname"
            replace: "{{ lookup('env','POD_NAME') }}" 

        - name: Replace database-name placeholder in mongo-loadgen
          replace:
            path: "{{ mongodb_loadgen }}"
            regexp: "database_name"
            replace: "{{ lookup('env','DATABASE_NAME') }}"       

        - name: Create test specific namespace.
          shell: kubectl create namespace {{ namespace }}
          args:
           executable: /bin/bash
          when: namespace != 'litmus'

        - name: Checking the status  of test specific namespace.
          shell: kubectl get namespace {{ namespace }} -o jsonpath='{.status.phase}'
          args:
           executable: /bin/bash
          register: npstatus
          until: "'Active' in npstatus.stdout"
          delay: 30
          retries: 10
        
        - name: Create Mongodb Loadgen Job
          shell: kubectl apply -f {{ mongodb_loadgen }} -n {{ namespace }} 

        - name: Verify load-gen pod is running
          shell: kubectl get pods -n {{ namespace }} -l {{ loadgen_label }} -o jsonpath='{.items[0].status.phase}'
          args:
            executable: /bin/bash
          register: result
          until: "'Running' in result.stdout"
          delay: 30
          retries: 15

        - name: Verifying load-generation  
          shell: kubectl exec -it mongo-0 -n {{ namespace }} -- mongo --eval 'db.getMongo().getDBNames()'
          register: output
          until: "'sbtest' in output.stdout"
          delay: 30
          retries: 15

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"  

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR 
        - name: Generate the litmus result CR to reflect EOT (End of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: completed
            verdict: "{{ flag }}"
           
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"
