# TODO
# Change pod status checks to container status checks (containerStatuses)
# O/P result

- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
   - block:

       - block:

            - name: Record test instance/run ID
              set_fact:
                run_id: "{{ lookup('env','RUN_ID') }}"

            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ test_name }}-{{ run_id }}"

         when: lookup('env','RUN_ID')

        ## RECORD START-OF-TEST IN LITMUS RESULT CR
       - name: Generate the litmus result CR to reflect SOT (Start of Test)
         template:
           src: /litmus-result.j2
           dest: litmus-result.yaml
         vars:
           test: "{{ test_name }}"
           app: ""
           chaostype: ""
           phase: in-progress
           verdict: none

       - name: Apply the litmus result CR
         command: kubectl apply -f litmus-result.yaml
         register: lr_status
         failed_when: "lr_status.rc != 0"

       ## VERIFY AVAILABILITY OF SELECTED STORAGE CLASS

       - name: Check whether the provider storageclass is applied
         shell: kubectl get sc {{ lookup('env','PROVIDER_STORAGE_CLASS') }}
         args:
           executable: /bin/bash
         register: result

       - name: Replace the storageclass placeholder with provider
         replace:
           path: "{{ fio_write_yml }}"
           regexp: "testclass"
           replace: "{{ lookup('env','PROVIDER_STORAGE_CLASS') }}"

       - name: Create test specific namespace.
         shell: kubectl create ns {{ app_ns }}
         args:
           executable: /bin/bash
         when: app_ns != 'litmus'

       - name: Checking the status  of test specific namespace.
         shell: kubectl get ns {{ app_ns }} -o jsonpath='{.status.phase}'
         args:
           executable: /bin/bash
         register: npstatus
         until: "'Active' in npstatus.stdout"
         delay: 30
         retries: 10

       - name: Replace the data sample size with user-defined size
         replace:
           path: "{{ fio_write_yml }}"
           regexp: "256m"
           replace: "{{ lookup('env','FIO_SAMPLE_SIZE') }}"

       - name: Replace the default I/O test duration with user-defined period
         replace:
           path: "{{ fio_write_yml }}"
           regexp: "60"
           replace: "{{ lookup('env','FIO_TESTRUN_PERIOD') }}"

       ## RUN FIO WORKLOAD TEST

       - name: Deploy fio write test job
         shell: kubectl apply -f {{ fio_write_yml }} -n {{ app_ns }}
         args:
           executable: /bin/bash

       - name: Confirm fio pod status is running
         shell: >
           kubectl get pods -n {{ app_ns }} -l name=fio-write -o custom-columns=:metadata.name --no-headers
         args:
           executable: /bin/bash
         register: fio_pod_name

       - name: Check if fio write job is completed
         shell: >
           kubectl get pods -n {{ app_ns }} -o jsonpath='{.items[?(@.metadata.labels.name=="fio-write")].status.containerStatuses[*].state.terminated.reason}'
         args:
           executable: /bin/bash
         register: result_fio_pod
         until: "'Completed' in result_fio_pod.stdout"
         delay: 60
         retries: 10

       - name: Verify the fio logs to check if run is complete w/o errors
         shell: >
           kubectl logs {{ fio_pod_name.stdout }} -n {{ app_ns }}
           | grep -i error | cut -d ":" -f 2
           | sort | uniq
         args:
           executable: /bin/bash
         register: result
         failed_when: result.stdout != " 0,"

       - name: Replace the data sample size with user-defined size
         replace:
           path: "{{ fio_read_yml }}"
           regexp: "256m"
           replace: "{{ lookup('env','FIO_SAMPLE_SIZE') }}"

       - name: Replace the default I/O test duration with user-defined period
         replace:
           path: "{{ fio_read_yml }}"
           regexp: "60"
           replace: "{{ lookup('env','FIO_TESTRUN_PERIOD') }}"

       - name: Deploy fio read test job
         shell: kubectl apply -f {{ fio_read_yml }} -n {{ app_ns }}
         args:
           executable: /bin/bash

       - name: Obtaining the fio read job pod name
         shell: >
           kubectl get pods -n fio -l name=fio-read -o custom-columns=:metadata.name --no-headers
         args:
           executable: /bin/bash
         register: read_pod

       - name: Check if fio read job is completed
         shell: >
           kubectl get pods -n {{ app_ns }} -o jsonpath='{.items[?(@.metadata.labels.name=="fio-read")].status.containerStatuses[*].state.terminated.reason}'
         args:
           executable: /bin/bash
         register: result_read_job
         until: "'Completed' in result_read_job.stdout"
         delay: 60
         retries: 10

       - name: Verify the data integrity check
         shell: >
           kubectl logs {{ read_pod.stdout }} -n {{ app_ns }}
           | grep -i error | cut -d ":" -f 2
           | sort | uniq
         args:
           executable: /bin/bash
         register: result_di
         failed_when: result_di.stdout != " 0,"

       - set_fact:
           flag: "Pass"

     rescue:
       - set_fact:
           flag: "Fail"

     always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
       - name: Generate the litmus result CR to reflect EOT (End of Test)
         template:
           src: /litmus-result.j2
           dest: litmus-result.yaml
         vars:
           test: "{{ test_name }}"
           app: ""
           chaostype: ""
           phase: completed
           verdict: "{{ flag }}"

       - name: Apply the litmus result CR
         command: kubectl apply -f litmus-result.yaml
         register: lr_status
         failed_when: "lr_status.rc != 0"
