# TODO
# Change pod status checks to container status checks (containerStatuses)
# O/P result

- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
   - block:

       - block:

            - name: Record test instance/run ID
              set_fact:
                run_id: "{{ lookup('env','RUN_ID') }}"

            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ test_name }}-{{ run_id }}"

         when: lookup('env','RUN_ID')

        ## RECORD START-OF-TEST IN LITMUS RESULT CR
       - include_tasks: /common/utils/update_litmus_result_resource.yml
         vars:
           status: 'SOT'

       ## VERIFY AVAILABILITY OF SELECTED STORAGE CLASS

       - name: Check whether the provider storageclass is applied
         shell: kubectl get sc {{ lookup('env','PROVIDER_STORAGE_CLASS') }}
         args:
           executable: /bin/bash
         register: result

       - name: Replace the storageclass placeholder with provider
         replace:
           path: "{{ pvc_yml }}"
           regexp: "testclass"
           replace: "{{ lookup('env','PROVIDER_STORAGE_CLASS') }}"

       - name: Create test specific namespace.
         shell: kubectl create ns {{ app_ns }}
         args:
           executable: /bin/bash
         when: app_ns != 'litmus'

       - name: Checking the status  of test specific namespace.
         shell: kubectl get ns {{ app_ns }} -o jsonpath='{.status.phase}'
         args:
           executable: /bin/bash
         register: npstatus
         until: "'Active' in npstatus.stdout"
         delay: 30
         retries: 10

       - name: Deploy PVC to get size of volume requested application namespace
         shell: kubectl apply -f {{ pvc_yml }} -n {{ app_ns }}
         args:
          executable: /bin/bash

       - set_fact:
           pvc_label: demo-vol1-claim
           execute: 1          

       - include_tasks: /common/utils/disable_compression_on_pools.yml
         when: data_check == 'data_accessibility'

       - name: Replace the data sample size with user-defined size
         replace:
           path: "{{ fio_write_yml }}"
           regexp: "256m"
           replace: "{{ lookup('env','FIO_SAMPLE_SIZE') }}"
         when: data_check == 'data_integrity'

       - block:

           - name: Fetch the Storage from PVC using namespace(need to modify)
             shell: kubectl get pvc -n {{ app_ns }} -o jsonpath={.items[0].spec.resources.requests.storage}
             args:
               executable: /bin/bash
             register: storage_capacity

           - name: Fetch the alphabet(G,M,m,g) from storage capacity
             shell: echo "{{ storage_capacity.stdout }}" | grep -o -E '[A-Za-z]+'
             args:
               executable: /bin/bash
             register: symbol

           - name: Fetch the alphabet(G,M,m,g) from storage capacity
             shell: echo "{{ storage_capacity.stdout }}" | grep -o -E '[0-9]+'
             args:
               executable: /bin/bash
             register: value_str

           - set_fact:
               value_num: '{{ ( (value_str.stdout | int - 0.2) * 0.93 * 1024) |  int }}'
             when: "'G' in symbol.stdout"

           - set_fact:
               value_num: '{{ ((value_str.stdout | int - 0.2) * 0.93 * 1024 * 1024) | int }}'
             when: "'T' in symbol.stdout"

           - name: Replace the data sample size with 90% of pvc size in {{ fio_write_yml }}
             replace:
               path: "{{ fio_write_yml }}"
               regexp: "256m"
               replace: "{{ value_num }}m"
             when: "'G' in symbol.stdout or 'T' in symbol.stdout"

           - name: Replace the data sample size with 90% of pvc size in {{ fio_write_yml }}
             replace:
               path: "{{ fio_write_yml }}"
               regexp: "256m"
               replace: "{{ storage_capacity.stdout }}"
             when: "'M' in symbol.stdout"

         when: data_check == 'data_accessibility'

       ## RUN FIO WORKLOAD TEST

       - name: Deploy fio write test job
         shell: kubectl apply -f {{ fio_write_yml }} -n {{ app_ns }}
         args:
           executable: /bin/bash

       - name: Fetch the pod name in {{ app_ns }}
         shell: >
           kubectl get pods -n {{ app_ns }} -l name=fio-write -o custom-columns=:metadata.name --no-headers
         args:
           executable: /bin/bash
         register: fio_pod_name

       - name: Check the status of pod
         shell: kubectl get po {{ fio_pod_name.stdout }} -n {{ app_ns }} -o jsonpath={.status.phase}
         args:
           executable: /bin/bash
         register: status_fio_pod
         until: "'Running' in status_fio_pod.stdout"
         delay: 5
         retries: 100

       - name: Check if fio write job is completed
         shell: >
           kubectl get pods -n {{ app_ns }} -o jsonpath='{.items[?(@.metadata.labels.name=="fio-write")].status.containerStatuses[*].state.terminated.reason}'
         args:
           executable: /bin/bash
         register: result_fio_pod
         until: "'Completed' in result_fio_pod.stdout"
         delay: 60
         retries: 900

       - name: Verify the fio logs to check if run is complete w/o errors
         shell: >
           kubectl logs {{ fio_pod_name.stdout }} -n {{ app_ns }}
           | grep -i error | cut -d ":" -f 2
           | sort | uniq
         args:
           executable: /bin/bash
         register: result
         failed_when: result.stdout != " 0,"

       - name: Deploy fio read test job
         shell: kubectl apply -f {{ fio_read_yml }} -n {{ app_ns }}
         args:
           executable: /bin/bash

       - name: Obtaining the fio read job pod name
         shell: >
           kubectl get pods -n {{ app_ns }} -l name=fio-read -o custom-columns=:metadata.name --no-headers
         args:
           executable: /bin/bash
         register: read_pod

       - name: Check if fio read job is completed
         shell: >
           kubectl get pods -n {{ app_ns }} -o jsonpath='{.items[?(@.metadata.labels.name=="fio-read")].status.containerStatuses[*].state.terminated.reason}'
         args:
           executable: /bin/bash
         register: result_read_job
         until: "'Completed' in result_read_job.stdout"
         delay: 60
         retries: 20

       - name: Verify the data integrity check
         shell: >
           kubectl logs {{ read_pod.stdout }} -n {{ app_ns }}
           | grep -i '"error"' | cut -d ":" -f 2
           | sort | uniq
         args:
           executable: /bin/bash
         register: result_di
         failed_when: result_di.stdout != " 0,"

       - set_fact:
           flag: "Pass"

     rescue:
       - set_fact:
           flag: "Fail"

     always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /common/utils/update_litmus_result_resource.yml
          vars:
            status: 'EOT'
