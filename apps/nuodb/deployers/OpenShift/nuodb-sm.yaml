apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sm-test
  labels:
    group: nuodb
    subgroup: storage
spec:
  serviceName: sm
  replicas: 1
  selector:
    matchLabels:
      nodetype: sm
      app: sm
      group: nuodb
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        nodetype: sm
        app: sm
        group: nuodb
        subgroup: storage
    spec:
      terminationGracePeriodSeconds: 15
      securityContext:
        runAsUser: 0
        fsGroup: 0
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - { key: "nuodb.com/zone",      operator: Exists }
              - { key: "nuodb.com/zone",      operator: In, values: [ "a" ] }
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                nodetype: sm
            topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - { key: database, operator: In, values: [ "test" ] }
                - { key: nodetype, operator: In, values: [ "te", "ssm" ] }
              topologyKey: kubernetes.io/hostname
      containers:
      - name: sm
        image: nuodb/nuodb-ce:latest
        imagePullPolicy: IfNotPresent
        args: [ "nuosm", "--servers-ready-timeout", "300" ]
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: "nuodb.secret"
              key: database-name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: "nuodb.secret"
              key: database-username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "nuodb.secret"
              key: database-password
        - { name: NUOCMD_API_SERVER,   value: "a.$(NAMESPACE).svc:8888" }
        - { name: PEER_ADDRESS,        value: "admin.$(NAMESPACE).svc" }
        - { name: NUODB_OPTIONS,       value: "mem 8g" }
        - { name: NUODB_LABELS,        value: "backup disabled" }
        ports:
        - containerPort: 48006
          protocol: TCP
        resources:
          requests:
            memory: "8Gi"
            cpu: "4"
        volumeMounts:
        - mountPath: /var/opt/nuodb/archive
          name: archive-volume
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      # volumes:
      # - name: archive-volume
      #   emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: archive-volume
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: testsc
      resources:
        requests:
          storage: 20G
