---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:

        - block:

            - name: Checking status of liveness pod
              shell: kubectl get pod -n {{ liveness_namespace }} -l {{ liveness_label }} -o jsonpath='{.items[0].status.phase}'
              register: liveness_pod
              until: "'Running' in liveness_pod.stdout"
              delay: 10
              retries: 10
             
          when: liveness_label != ''  

        ## Record the chaosutil path ##

        - name: Record the chaosutil  path
          set_fact:
            chaosutil_path: "/chaoslib/kubectl/app_pod_failure.yaml"

        ## RECORD START-OF-TEST IN LITMUS RESULT CR

        - block:
 
            - name: Record test instance/run ID 
              set_fact: 
                run_id: "{{ lookup('env','RUN_ID') }}"
           
            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ test_name }}-{{ run_id }}"

          when: lookup('env','RUN_ID')

        - name: Generate the litmus result CR to reflect SOT (Start of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            chaostype: ""
            app: ""
            phase: in-progress
            verdict: none

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"

        ## DISPLAY APP INFORMATION 
 
        - name: Display the app information passed via the test job
          debug: 
            msg: 
              - "The application info is as follows:"
              - "Namespace    : {{ app_ns }}"
              - "Label        : {{ app_label }}"

        ## PRE-CHAOS APPLICATION LIVENESS CHECK

        - name: Verify that the AUT (Application Under Test) is running 
          shell: >
            kubectl get pods -n {{ app_ns }} -l {{ app_label }} --no-headers
            -o custom-columns=:status.phase
          args:
            executable: /bin/bash
          register: app_status
          until: "'Running' in app_status.stdout"
          delay: 10
          retries: 12

        ## APPLICATION FAULT INJECTION 

        - include: "{{ chaosutil_path }}"
          namespace: "{{ app_ns }}"
          label: "{{ app_label }}"

        ## POST-CHAOS APPLICATION LIVENESS CHECK

        - name: Verify AUT liveness post fault-injection
          shell: >
            kubectl get pods -n {{ app_ns }} -l {{ app_label }} --no-headers
            -o custom-columns=:status.phase
          args:
            executable: /bin/bash
          register: app_status
          until: "'Running' in app_status.stdout"
          delay: 10
          retries: 12

        - block:

            - name: Checking status of liveness pod
              shell: kubectl get pod -n {{ liveness_namespace }} -l {{ liveness_label }} -o jsonpath='{.items[0].status.phase}'
              register: liveness_pod
              until: "'Running' in liveness_pod.stdout"
              delay: 10
              retries: 10
             
          when: liveness_label != ''  

        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 

        ## RECORD END-OF-TEST IN LITMUS RESULT CR
 
        - name: Generate the litmus result CR to reflect EOT (End of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            chaostype: ""
            app: ""
            phase: completed
            verdict: "{{ flag }}"
           
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"
           
