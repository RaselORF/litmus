---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:
        - block:
          # Add run id to test instance
            - name: Record test instance/run ID
              set_fact:
                run_id: "{{ lookup('env','RUN_ID') }}"
            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ test_name }}-{{ run_id }}"
          when: lookup('env','RUN_ID')

        ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - name: Generate the litmus result CR to reflect SOT (Start of Test)
          template:
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars:
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: in-progress
            verdict: none

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status
          failed_when: "lr_status.rc != 0"

        - name: Checking the status  of test specific namespace.
          shell: kubectl get ns {{ namespace }} -o jsonpath='{.status.phase}'
          args:
           executable: /bin/bash
          register: npstatus
          until: "'Active' in npstatus.stdout"
          delay: 30
          retries: 10

        # Checking if the application is deployed.
        #
        - name: Obtain the number of replicas.
          shell: kubectl get statefulset -n {{ namespace }} -l {{ application_label }} -o custom-columns=:spec.replicas
          args:
            executable: /bin/bash
          register: rep_count
          until: "rep_count.rc == 0"
          delay: 60
          retries: 30

        - name: Obtain the ready replica count and compare with the replica count.
          shell: kubectl get statefulset -n {{ namespace }} -l {{ application_label }} -o custom-columns=:..readyReplicas
          args:
            executable: /bin/bash
          register: ready_rep
          until: "ready_rep.rc == 0 and ready_rep.stdout|int == rep_count.stdout|int"
          delay: 60
          retries: 30

        - name: Obtaining the loadgen pod label from env.
          set_fact:
            loadgen_lkey: "{{ loadgen_label.split('=')[0] }}"
            loadgen_lvalue: "{{ loadgen_label.split('=')[1] }}"

        - name: Replace the label in loadgen job spec.
          replace:
            path: "{{ cassandra_loadgen }}"
            regexp: "loadgen_lkey: loadgen_lvalue"
            replace: "{{ loadgen_lkey }}: {{ loadgen_lvalue }}"

        - name: Create Cassandra Loadgen Job
          shell: kubectl apply -f {{ cassandra_loadgen }} -n {{ namespace }}

        - name: Verify load is running for specified duration
          shell: kubectl get pods -n {{ namespace }} -l {{ loadgen_label }}
          args:
            executable: /bin/bash
          register: result
          until: "'Running' in result.stdout"
          delay: 30
          retries: 15

        - name: Wait for {{ (io_minutes) | int *60 }} secs to run load.
          wait_for:
            timeout: "{{ (io_minutes) | int *60 }}"

        - name: Verify load by using describe keyspaces
          shell: >
            kubectl exec cassandra-0 -n {{ namespace }}
            -- cqlsh --execute "describe keyspaces;"
          args:
            executable: /bin/bash
          register: result
          until: "'keyspace1' in result.stdout"
          delay: 60
          retries: 5

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - name: Generate the litmus result CR to reflect EOT (End of Test)
          template:
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars:
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: completed
            verdict: "{{ flag }}"

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status
          failed_when: "lr_status.rc != 0"
