- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
   - block:

       - block:

            - name: Record test instance/run ID
              set_fact:
                run_id: "{{ lookup('env','RUN_ID') }}"

            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ test_name }}-{{ run_id }}"

         when: lookup('env','RUN_ID')

        ## RECORD START-OF-TEST IN LITMUS RESULT CR
       - name: Generate the litmus result CR to reflect SOT (Start of Test)
         template:
           src: /litmus-result.j2
           dest: litmus-result.yaml
         vars:
           test: "{{ test_name }}"
           app: ""
           chaostype: ""
           phase: in-progress
           verdict: none

       - name: Apply the litmus result CR
         command: kubectl apply -f litmus-result.yaml
         register: lr_status
         failed_when: "lr_status.rc != 0"

       ## VERIFY AVAILABILITY OF SELECTED STORAGE CLASS

       - name: Check whether the provider storageclass is applied
         shell: kubectl get sc {{ lookup('env','PROVIDER_STORAGE_CLASS') }}
         args:
           executable: /bin/bash
         register: result

       - name: Replace the storageclass placeholder with provider
         replace:
           path: "{{ memleak_yml }}"
           regexp: "testclass"
           replace: "{{ lookup('env','PROVIDER_STORAGE_CLASS') }}"

       - name: Create test specific namespace.
         shell: kubectl create ns {{ app_ns }}
         args:
           executable: /bin/bash
         when: app_ns != 'litmus'

       - name: Checking the status  of test specific namespace.
         shell: kubectl get ns {{ app_ns }} -o jsonpath='{.status.phase}'
         args:
           executable: /bin/bash
         register: npstatus
         until: "'Active' in npstatus.stdout"
         delay: 30
         retries: 10

       ## RUN MEMLEAK TEST

       - name: Deploy OpenEBS volume and run dd Load
         shell: kubectl apply -f {{ memleak_yml }} -n {{ app_ns }}
         args:
           executable: /bin/bash

       - name: Confirm volume status is running
         shell: >
           kubectl get pods -n {{ app_ns }} -o jsonpath='{.items[?(@.metadata.labels.name=="memleak")].status.phase}'
         args:
           executable: /bin/bash
         register: result
         until: "'Running' in result.stdout"
         delay: 30
         retries: 10

       - name: Run python script for memory usage validation it takes couple of minutes
         shell: python test-mem.py {{ app_ns }}
         args:
           executable: /bin/bash
         register: result
         failed_when: "'Pass' not in result.stdout"

       - set_fact:
           flag: "Pass"

     rescue:
       - set_fact:
           flag: "Fail"

     always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
       - name: Generate the litmus result CR to reflect EOT (End of Test)
         template:
           src: /litmus-result.j2
           dest: litmus-result.yaml
         vars:
           test: "{{ test_name }}"
           app: ""
           chaostype: ""
           phase: completed
           verdict: "{{ flag }}"

       - name: Apply the litmus result CR
         command: kubectl apply -f litmus-result.yaml
         register: lr_status
         failed_when: "lr_status.rc != 0"
