---
#### Required changes #########

   - name: Get the application label values from env
     set_fact:
         app_lkey: "{{ app_label.split('=')[0] }}"
         app_lvalue: "{{ app_label.split('=')[1] }}"

   - name: Replace the application label placeholder in spec
     replace:
        path: "{{ application_deployment }}"
        regexp: "lkey: lvalue"
        replace: "{{ app_lkey }}: {{ app_lvalue }}{{i}}"
 
   - name: Change the claim name in deployment.
     replace:
       dest: "{{application_deployment}}"
       regexp: "{{app_pvc}}"
       replace: "{{app_pvc}}-{{i}}"
   
   - name: Change the app name in deployment.
     replace:
       dest: "{{application_deployment}}"
       regexp: "{{app_name}}"
       replace: "{{app_name}}-{{i}}"
   
   - block:
       - name: Create namespace for deployment.
         shell: kubectl create ns {{ namespace }}-{{i}}
         args:
           executable: /bin/bash
         register: app_ns
         failed_when: "'created' not in app_ns.stdout"

       ## Deploying the application (statefulset/deployment) and its related services.
       - include_tasks: /common/utils/deploy_single_app.yml
         vars:
           app_ns: "{{ namespace }}-{{ i }}"
           check_app_pod: 'no'
           delay: 10
           retries: 20

       - include_tasks: /common/utils/check_deployment_status.yml  
         vars:
           app_ns: "{{namespace}}-{{i}}" 
           app_label: "{{ app_lkey }}={{ app_lvalue }}{{i}}"

     when: lookup('env', 'ACTION') == 'create'

       ## Cleanup tasks for application  deployments ##  
   - block:
   
       - name: Delete application and its deployments.
         shell: kubectl delete -f {{application_deployment}} -n {{namespace}}-{{i}}
         args:
           executable: /bin/bash

       - name: Delete the namespaces.
         shell: kubectl delete ns {{namespace}}-{{i}}
         args:
           executable: /bin/bash
  
       - name: Verify the presence of application pod after deprovision.
         shell: kubectl get pod -n {{namespace}}-{{i}} -o=custom-columns=NAME:.metadata.name --no-headers
         args:
           executable: /bin/bash
         register: pod_status
         until: "pod_status.rc == 0"
         delay: 5
         retries: 10
         
       - name: Verify the presence of application related PVC after deprovision.
         shell: kubectl get pvc  -n {{namespace}}-{{i}} -o=custom-columns=NAME:.metadata.name --no-headers
         args:
           executable: /bin/bash
         register: pvc_status
         until: "pvc_status.rc == 0"
         delay: 5
         retries: 10 
     
     when: lookup('env', 'ACTION') == 'delete'
   
   
   ### Revert the changes ########
   
   - name: Revert the claim name in deployment.
     replace:
       dest: "{{application_deployment}}"
       regexp: "{{app_pvc}}-{{i}}"
       replace: "{{app_pvc}}"
   
   - name: Revert the  app name in deployment.
     replace:
       dest: "{{application_deployment}}"
       regexp: "{{app_name}}-{{i}}"
       replace: "{{app_name}}"

   - name: Revert the label in spec file.
     replace:
        dest: "{{application_deployment}}"
        regexp: "{{ app_lkey }}: {{ app_lvalue }}{{i}}"
        replace: "lkey: lvalue"

   ## For continuos iteration of "i" value ## 
   - set_fact:
       i: '{{ i | int + 1 }}'
   


