---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:
        ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - block:
 
            - name: Record test instance/run ID 
              set_fact: 
                run_id: "{{ lookup('env','RUN_ID') }}"
           
            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ test_name }}-{{ run_id }}"

          when: lookup('env','RUN_ID')

        - name: Generate the litmus result CR to reflect SOT (Start of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            chaostype: ""
            app: ""
            phase: in-progress
            verdict: none

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"

        - name: Create test specific namespace.
          shell: kubectl create ns {{ namespace }}
          args:
           executable: /bin/bash
          when: namespace != 'litmus' 

        - name: Checking the status  of test specific namespace.
          shell: kubectl get ns {{ namespace }} -o jsonpath='{.status.phase}'
          args:
           executable: /bin/bash
          register: npstatus
          until: "'Active' in npstatus.stdout"
          delay: 30
          retries: 10

        ## STARTING OF LIVENESS CHECK  

        - name: Trigger liveness job for job creation.
          shell:  kubectl create -f {{ liveness }} -n {{ namespace }} 

        - name: Verify the liveness job pod created and running
          shell: > 
              kubectl get pods -n {{ namespace }} -l app=jupyter-liveness 
              -o jsonpath='{.items[0].status.phase}'     
          args:
            executable: /bin/bash      
          register: status
          until: "'Running' in status.stdout"
          delay: 30
          retries: 15

        - name: Get the name of liveness pod for liveness status check.
          shell: >
              kubectl get pods -n {{ namespace }} -l  app=jupyter-liveness
              -o jsonpath='{.items[0].metadata.name}'  
          args:
            executable: /bin/bash 
          register: pod     
        
        - name: Verify liveness status.
          shell: >
              kubectl logs  {{ pod.stdout }} -n {{ namespace }}
          args:
            executable: /bin/bash
          register: logs
          until: "'Liveness Running' in logs.stdout"
          delay: 20
          retries: 10         

        - set_fact:
            flag: " Pass"

      rescue: 
        - set_fact: 
            flag: " Fail"

      always: 

        ## RECORD END-OF-TEST IN LITMUS RESULT CR
 
        - name: Generate the litmus result CR to reflect EOT (End of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            chaostype: ""
            app: ""
            phase: completed
            verdict: "{{ flag }}"

        - name: Analyze the cr yaml
          shell: cat litmus-result.yaml    
           
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"
           
