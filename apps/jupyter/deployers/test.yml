---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:
        ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - name: Generate the litmus result CR to reflect SOT (Start of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: in-progress
            verdict: none
        
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"

        ## Actual Test to deploy Jupyter NoteBook on k8s
        - name: Check whether the provider storageclass is applied
          shell: kubectl get sc {{ lookup('env','PROVIDER_STORAGE_CLASS') }}
          args:
            executable: /bin/bash
          register: result

        - name: Create test specific namespace.
          shell: source ~/.profile;  kubectl create ns {{ namespace }}
          args:
           executable: /bin/bash
          when: namespace != 'litmus'

        - name: Checking the status  of test specific namespace.
          shell: kubectl get ns {{ namespace }} -o custom-columns=:status.phase --no-headers 
          args:
           executable: /bin/bash
          register: npstatus
          until: "'Active' in npstatus.stdout"
          delay: 30
          retries: 10

        - name: Deploying jupyter notebook
          shell: kubectl apply -f {{ jupyter_deployment }} -n {{ namespace }}

        - name: Check if jupyter is deployed successfully
          shell: kubectl get pods -n {{ namespace }} -l name=jupyter-server
          register: result
          until: "'Running' in result.stdout"
          delay: 60
          retries: 20

        - set_fact:
           flag: "Pass"

    - rescue:
        - set_fact:
          flag: "Fail"
          
      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR 
        - name: Generate the litmus result CR to reflect EOT (End of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: completed
            verdict: "{{ flag }}"
           
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"
