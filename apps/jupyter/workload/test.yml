---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:
        ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - name: Generate the litmus result CR to reflect SOT (Start of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: in-progress
            verdict: none
        
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"

        - name: Create test specific namespace.
          shell: kubectl create ns {{ namespace }}
          args:
           executable: /bin/bash
          when: namespace != 'jupyter'

        - name: Checking the status  of test specific namespace.
          shell: kubectl get ns {{ namespace }} -o jsonpath='{.status.phase}'
          args:
           executable: /bin/bash
          register: npstatus
          until: "'Active' in npstatus.stdout"
          delay: 30
          retries: 10

        - name: Get the name of jupyter-notebook application pod.
          shell: >
              kubectl get po -l name=jupyter-server -n {{ namespace }} --no-headers | awk {'print $1'}    
          args:
            executable: /bin/bash      
          register: pod_name

        - name: Copy and trigger the loadgen file inside jupyter application pod
          shell: >
             kubectl exec {{ pod_name.stdout }} -n {{ namespace }} 
             -- bash -c "curl  https://raw.githubusercontent.com/vibhor995/helper_files/master/jupyter-loadgen.py | python -" & 
          args:
            executable: /bin/bash      


        - name: Wait for {{ (io_minutes) | int *60 }} secs to run load.
          wait_for:
            timeout: "{{ (io_minutes) | int *60 }}"

        - name: Verify load generated.
          shell: >
            kubectl exec {{ pod_name.stdout }} -n {{ namespace }} -- bash -c "ls /mnt/data/"      
          args:
          executable: /bin/bash
          register: result
          until: "'Women in higer education.html' in result.stdout"
          delay: 60
          retries: 5

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"  

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR 
        - name: Generate the litmus result CR to reflect EOT (End of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: completed
            verdict: "{{ flag }}"
           
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"
