# TODO 
# Change pod status checks to container status checks (containerStatuses)
# O/P result

- hosts: localhost
  connection: local  

  vars_files:
    - test_vars.yaml
 
  tasks:
   - block:

       ## VERIFY AVAILABILITY OF SELECTED TEST JOB PARAMS 

       - name: Check whether the provider storageclass is applied
         shell: kubectl get sc {{ lookup('env','PROVIDER_STORAGE_CLASS') }}
         args:
           executable: /bin/bash
         register: result

       - name: Get the chaos type from test job
         set_fact:
           chaos_util: "{{ lookup('env','CHAOS_TYPE') }}"

       - name: Verify if chaos type is supported by the test
         fail:
           msg: "Unsupported chaos type"
         when: "chaos_util not in supported_chaos_types"

       ## PRE-CONDITION THE APPLICATION DEPLOYMENT SPECS WITH TEST PARAMS 
                  
       - name: Replace the pvc placeholder with test param
         replace:
           path: "{{ pod_yaml_alias }}"
           regexp: "testClaim"
           replace: "{{ test_name }}"
          
       - name: Replace the storageclass placeholder with provider
         replace:
           path: "{{ pod_yaml_alias }}"
           regexp: "testClass"
           replace: "{{ lookup('env','PROVIDER_STORAGE_CLASS') }}"
       
       ## RUN APPLICATION PERSISTENCE TEST

       - name: Deploy percona mysql pod
         shell: kubectl apply -f {{ pod_yaml_alias }} -n litmus  
         args: 
           executable: /bin/bash

       - name: Confirm mysql pod status is running
         shell: >
           kubectl get pods -l name=percona -n litmus 
           --no-headers 
         args: 
           executable: /bin/bash
         register: result
         until: "'percona' and 'Running' in result.stdout"
         delay: 60
         retries: 15

       - name: Obtain name of mysql pod 
         set_fact: 
           percona_pod_name: "{{ result.stdout.split()[0] }}"

       - name: Check for successful database init
         shell: > 
           kubectl logs {{ percona_pod_name }} -n litmus 
           | grep 'ready for connections' | wc -l
         args:
           executable: /bin/bash
         register: result
         until: result.stdout == "2"
         delay: 10
         retries: 30 

       - name: Create some test data in the mysql database
         shell: >
           kubectl exec {{ percona_pod_name }} -n litmus 
           -- {{ item }}
         args:
           executable: /bin/bash
         register: result
         failed_when: "result.rc != 0"
         with_items:
           - mysql -uroot -pk8sDem0 -e 'create database tdb;'
           - mysql -uroot -pk8sDem0 -e 'create table ttbl (Data VARCHAR(20));' tdb
           - mysql -uroot -pk8sDem0 -e 'insert into ttbl (Data) VALUES ("tdata");' tdb

       - include: /chaoslib/kubectl/pod_evict_by_taint.yaml
         app: "{{ percona_pod_name }}"
         taint: "node.kubernetes.io/out-of-disk"
         when: chaos_util ==  "APP_POD_EVICT/KUBECTL"

       - include: /chaoslib/kubectl/cordon_drain_node.yaml
         app: "{{ percona_pod_name }}"
         when: chaos_util ==  "APP_NODE_DRAIN/KUBECTL"
         
       - include: /chaoslib/pumba/pod_failure_by_sigkill.yaml
         app: "{{ percona_pod_name }}"
         when: chaos_util ==  "APP_POD_KILL/PUMBA"

       - name: Confirm mysql pod status is running
         shell: >
           kubectl get pods -l name=percona -n litmus 
           --no-headers 
         args: 
           executable: /bin/bash
         register: result
         until: "'percona' and 'Running' in result.stdout"
         delay: 30 
         retries: 20

       - name: Obtain name of mysql pod 
         set_fact: 
           percona_pod_name: "{{ result.stdout.split()[0] }}"
       
       - name: Verify mysql data persistence  
         shell: > 
           kubectl exec {{ percona_pod_name }} -n litmus
           -- mysql -uroot -pk8sDem0 -e 'select * from ttbl' tdb;
         args:
           executable: /bin/bash
         register: result 
         failed_when: "'tdata' not in result.stdout"

       - set_fact:
           flag: "Pass"

     rescue: 
       - set_fact: 
           flag: "Fail"

     always:

       - name: Create results file
         lineinfile:
           create: yes
           state: present
           path: '/var/log/ansible/result.json'
           line: '{ "Testname" : {{ test_name | to_json }}, "status" : {{ flag | to_json }} }'

       - include: test_cleanup.yaml
