# Description:
# OpenEBS volume snapshot creation and restoring it to the earlier state..
# Author: Giri
# Prerequisites: Application deployed in K8s cluster.

#########################################################################################################
# Test steps:
# Create LitmusResult CR.
# Obtain volume name using the app label and app namespace provided as envs.
# Create a database and a table.
# Obtain maya-apiserver pod name and create snapshot.

##########################################################################################################

- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:

   - block:

       - block:

           - name: Record test instance/run ID.
             set_fact:
               run_id: "{{ lookup('env','RUN_ID') }}"

           - name: Construct testname appended with runID.
             set_fact:
               test_name: "{{ test_name }}-{{ run_id }}"

         when: lookup('env','RUN_ID')

              ## RECORD START-OF-TEST IN LITMUS RESULT CR
       - name: Generate the litmus result CR to reflect SOT (Start of Test)
         template:
           src: /litmus-result.j2
           dest: litmus-result.yaml
         vars:
           test: "{{ test_name }}"
           app: ""
           chaostype: ""
           phase: in-progress
           verdict: none

       - name: Apply the litmus result CR.
         shell: kubectl apply -f litmus-result.yaml
         args:
           executable: /bin/bash
         register: lr_status
         failed_when: "lr_status.rc != 0"

       - name: Checking the status  of test specific namespace.
         shell: kubectl get ns {{ app_ns }} -o jsonpath='{.status.phase}'
         args:
          executable: /bin/bash
         register: ns_status
         until: "'Active' in ns_status.stdout"
         delay: 30
         retries: 10

       - name: Obtain the application pod name using its label.
         shell: >
           kubectl get pods -n {{ app_ns }} -l {{ app_label }}
           --no-headers -o custom-columns=:metadata.name
         args:
           executable: /bin/bash
         register: app_pod

       - name: Obtaining pvc name using pod name.
         shell: >
           kubectl get pod {{ app_pod.stdout }} -n {{ app_ns }}
           -o custom-columns=:..claimName --no-headers
         args:
           executable: /bin/bash
         register: pvc_name

       - name: Obtaining PV name using PVC name.
         shell: >
           kubectl get pvc {{ pvc_name.stdout }} -n {{ app_ns }}
           -o custom-columns=:spec.volumeName --no-headers
         args:
           executable: /bin/bash
         register: volume_name

       - name: setting volume name to a variable.
         set_fact:
           volume_name: "{{ volume_name.stdout }}"

       - name: Setting pod name to a variable.
         set_fact:
           pod_name: "{{ app_pod.stdout }}"

       - name: Write a test database into percona mysql.
         shell: |
           kubectl exec -it {{ pod_name }} -n {{ app_ns }} -- mysql -u{{ user_name }} -p{{ password }} -e "create database tdb;"
           kubectl exec -it {{ pod_name }} -n {{ app_ns }} -- mysql -u{{ user_name }} -p{{ password }} -e "create table ttbl (Data VARCHAR(20));" tdb
           kubectl exec -it {{ pod_name }} -n {{ app_ns }} -- mysql -u{{ user_name }} -p{{ password }} -e "insert into ttbl (Data) VALUES ('tdata');" tdb
           kubectl exec -it {{ pod_name }} -n {{ app_ns }} -- mysql -u{{ user_name }} -p{{ password }} -e "flush tables with read lock;"
         args:
           executable: /bin/bash
         register: result
         failed_when: "result.rc != 0"

       - name: Perform file system sync on percona pod before creating the snapshot.
         shell: kubectl exec {{ pod_name }} -n {{ app_ns}} -- bash -c "sync;sync;sync"
         args:
           executable: /bin/bash

       - name: Creating snapshot.
         include_tasks: /funclib/openebs/openebs_snapshot_restore.yml
         vars:
           action: create_snapshot

       - name: Make changes to the database.
         shell: |
           kubectl exec -it {{ pod_name }} -n {{ app_ns }} -- mysql -u{{user_name}} -p{{ password }} -e "unlock tables;"
           kubectl exec -it {{ pod_name }} -n {{ app_ns }} -- mysql -u{{user_name}} -p{{ password }} -e "drop database tdb"
           sleep 5
         args:
           executable: /bin/bash
         register: result
         failed_when: "result.rc != 0"

       - name: Restoring the volume data using snapshot.
         include_tasks: /funclib/openebs/openebs_snapshot_restore.yml
         vars:
           action: restore_snapshot

       - name: Delete application pod to force volume remount upon rescheduling.
         shell: kubectl delete pod {{pod_name}} -n {{ app_ns }}
         args:
           executable: /bin/bash
         register: result
         failed_when: "pod_name and 'deleted' not in result.stdout"

       - name: Checking if the application pod is scheduled again
         shell: kubectl get pod -n {{ app_ns }} -l {{ app_label }}
         args:
           executable: /bin/bash
         register: result
         until: "'Running' in result.stdout"
         delay: 30
         retries: 15

       - name: Obtaining application pod details after restart.
         shell: >
           kubectl get pods -n {{ app_ns }} -l {{ app_label }} -o custom-columns=:.metadata.name
           --no-headers
         args:
           executable: /bin/bash
         register: result

       - name: Store new percona pod name in variable.
         set_fact:
           pod_name: "{{ result.stdout }}"

       - name: Verifying whether the restore operation is successful.
         shell: >
           kubectl exec -it {{ pod_name }} -n {{ app_ns }} -- mysql -u{{ user_name }} -p{{ password }}
           -e "select * from ttbl;" tdb
         args:
           executable: /bin/bash
         register: result
         failed_when: "'tdata' not in result.stdout"

       - name: Test Passed
         set_fact:
           flag: "Test Passed"

     rescue:
       - name: Test Failed
         set_fact:
           flag: "Test Failed"

     always:

        ## RECORD END-OF-TEST IN LITMUS RESULT CR

       - name: Generate the litmus result CR to reflect EOT (End of Test)
         template:
           src: /litmus-result.j2
           dest: litmus-result.yaml
         vars:
           test: "{{ test_name }}"
           app: ""
           chaostype: ""
           phase: completed
           verdict: "{{ flag }}"

       - name: Apply the litmus result CR
         shell: kubectl apply -f litmus-result.yaml
         args:
           executable: /bin/bash
         register: lr_status
         failed_when: "lr_status.rc != 0"
