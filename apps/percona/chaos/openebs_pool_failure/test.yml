---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:

        ## DERIVE THE APP STORAGE CLASS AND CHAOS UTIL TO USE       
        - include_tasks: /common/utils/application_liveness_check.yml
          when: liveness_label != ''

        - name: Get application pod name 
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: app_pod_name 

        - name: Generate unique string for use in dbname
          shell: echo $(mktemp) | cut -d '.' -f 2
          args:
            executable: /bin/bash
          register: uniqstr

        - name: Create some test data in the mysql database
          include_tasks: "/common/utils/mysql_data_persistence.yml"
          vars:
            status: 'LOAD'
            ns: "{{ namespace }}"
            pod_name: "{{ app_pod_name.stdout }}"
            dbuser: 'root'
            dbpassword: 'k8sDem0'
            dbname: "tdb{{ uniqstr.stdout }}"
          when: data_persistance != '' 

        - name: Record the chaos util path
          set_fact:
            chaos_util_path: "/chaoslib/openebs/cstor_pool_kill.yml"
          when: chaos_type == "pool-kill"

        - name: Record the chaos util path
          set_fact:
            chaos_util_path: "/chaoslib/openebs/cstor_pool_delete.yml"
          when: chaos_type == "pool-delete"

        ## RECORD START-OF-TEST IN LITMUS RESULT CR

        - include_tasks: /common/utils/create_testname.yml

        - include_tasks: /common/utils/update_litmus_result_resource.yml
          vars:
            status: 'SOT'
            chaostype: "{{ test_name }}"

        ## DISPLAY APP INFORMATION 
 
        - name: Display the app information passed via the test job
          debug: 
            msg: 
              - "The application info is as follows:"
              - "Namespace    : {{ namespace }}"
              - "Label        : {{ label }}"
              - "PVC          : {{ pvc }}"  

        ## PRE-CHAOS APPLICATION LIVENESS CHECK
        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/common/utils/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}"
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"
            delay: 5
            retries: 60

        ## STORAGE FAULT INJECTION 

        - include: "{{ chaos_util_path }}"
          app_ns: "{{ namespace }}"
          app_pvc: "{{ pvc }}"
          chaos_repeat: "{{ chaos_iterations }}"
          error_messages: "{{ pool_debug_msg }}"
          post_chaos_soak_time : "{{ chaos_duration }}"

        ## POST-CHAOS APPLICATION LIVENESS CHECK

        - name: Verify AUT liveness post fault-injection
          include_tasks: "/common/utils/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}"
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"
            delay: 5
            retries: 60


        - name: Verify mysql data persistence  
          include_tasks: "/common/utils/mysql_data_persistence.yml"
          vars:
            status: 'VERIFY'
            ns: "{{ namespace }}"
            pod_name: "{{ app_pod_name.stdout }}"
            dbuser: 'root'
            dbpassword: 'k8sDem0'
            dbname: "tdb{{ uniqstr.stdout }}"
          when: data_persistance != '' 

        - name: Verify successful database delete
          include_tasks: "/common/utils/mysql_data_persistence.yml"
          vars:
            status: 'DELETE'
            ns: "{{ namespace }}"
            pod_name: "{{ app_pod_name.stdout }}"
            dbuser: 'root'
            dbpassword: 'k8sDem0'
            dbname: "tdb{{ uniqstr.stdout }}"
          when: data_persistance != '' 

          # Check application liveness post chaos
        - include_tasks: /common/utils/application_liveness_check.yml
          when: liveness_label != ''  

        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 

        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - block:
            - include_tasks: /common/utils/update_litmus_result_resource.yml
              vars:
                status: 'EOT'
                chaostype: "{{ chaosutil.split('.')[0] }}"
          when: lookup('env','RUN_ID')
