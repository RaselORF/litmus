---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:

        - include_tasks: /common/utils/application_liveness_check.yml
          when: liveness_label != ''

         ## RECORD START OF THE TEST IN LITMUS RESULT CR
        - include_tasks: /common/utils/create_testname.yml

        - include_tasks: /chaoslib/aws_chaos/prerequisites_aws.yml
          when: lookup('env','PLATFORM') == 'AWS'

        # RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/common/utils/update_litmus_result_resource.yml"
          vars:
            status: 'SOT'
       
        # DISPLAY APP INFORMATION 
 
        - name: Display the app information passed via the test job
          debug: 
            msg: 
              - "The application info is as follows:"
              - "Namespace    : {{ app_ns }}"
              - "Label        : {{ app_label }}"

        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/common/utils/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}"
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"
            delay: 5
            retries: 60   

        - name: Generate unique string for use in dbname
          shell: echo $(mktemp) | cut -d '.' -f 2
          args:
            executable: /bin/bash
          register: uniqstr

        - name: Create some test data in the mysql database
          include_tasks: "/common/utils/mysql_data_persistence.yml"
          vars:
            status: 'LOAD'
            ns: "{{ app_ns }}"
            pod_name: "{{ app_pod_name.stdout }}"
            dbuser: 'root'
            dbpassword: 'k8sDem0'
            dbname: "tdb{{ uniqstr.stdout }}"
          when: data_persistance != ''

        ## STORAGE FAULT INJECTION 

        - include_tasks: /chaoslib/chaoskube/node_freeze_chaos.yml
          vars:
            nodeaction: "memory-freeze"      
            namespace: "{{ app_ns }}"

        - name: wait for app pod to reschedule
          shell: >
            sleep {{ f_duration | int + 100 }}
          args:
            executable: /bin/bash

        - name: Verify AUT liveness post fault-injection
          include_tasks: "/common/utils/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}"
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"
            delay: 5
            retries: 60  

        - include_tasks: /common/utils/application_liveness_check.yml
          when: liveness_label != ''

        - name: Verify mysql data persistence
          include_tasks: "/common/utils/mysql_data_persistence.yml"
          vars:
            status: 'VERIFY'
            ns: "{{ app_ns }}"
            pod_name: "{{ rescheduled_app_pod.stdout }}"
            dbuser: 'root'
            dbpassword: 'k8sDem0'
            dbname: "tdb{{ uniqstr.stdout }}"
          when: data_persistance != ''

        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always:

        - block:

            ## Fetch the AWS instance details(instance_id, region)
            - include_tasks: /common/utils/aws/fetch_aws_details.yml

            # Execute the chaos util
            - include_tasks: /chaoslib/aws_chaos/chaosutil_aws.yml
              vars:
                action: "restarted"

            # wait for some time and check node status

            - name: wait after node restarted.
              shell: >
                  sleep {{ f_duration }}
              args:
                executable: /bin/bash

            - name: Check the node status after node restarted.
              shell: kubectl get node {{ app_node }} --no-headers | awk '{print $2}'
              args:
                executable: /bin/bash
              register: node_status
              until: "'Ready' in node_status.stdout"
              delay: 5
              retries: 60 
             
          when: lookup('env', 'PLATFORM') == 'AWS'     

        # RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/common/utils/update_litmus_result_resource.yml"
          vars:
            status: 'EOT'

