---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:

        ## PRE-CHAOS APPLICATION LIVENESS CHECK
        - block:

            - name: Get the liveness pods
              shell: kubectl get pod -n {{ liveness_namespace }} -l {{ liveness_label }} -o=custom-columns=NAME:".metadata.name" --no-headers
              register: liveness_pods_before_drain

            - name: Checking status of liveness pods
              shell: kubectl get pods {{ item }} -n {{ liveness_namespace }} -o=custom-columns=NAME:".status.phase" --no-headers
              register: result
              with_items: "{{ liveness_pods_before_drain.stdout_lines }}"
              until: "'Running' in result.stdout"
              delay: 10
              retries: 10
             
          when: liveness_label != ''  

        ## RECORD START-OF-TEST IN LITMUS RESULT CR

        - block:
 
            - name: Record test instance/run ID 
              set_fact: 
                run_id: "{{ lookup('env','RUN_ID') }}"
           
            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ test_name }}-{{ run_id }}"

          when: lookup('env','RUN_ID')

        - name: Generate the litmus result CR to reflect SOT (Start of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            chaostype: "drain-node"
            app: "percona"
            phase: in-progress
            verdict: none

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"

        ## DISPLAY APP INFORMATION 
 
        - name: Display the app information passed via the test job
          debug: 
            msg: 
              - "The application info is as follows:"
              - "Namespace    : {{ namespace }}"
              - "Label        : {{ label }}"

        - name: Verify that the AUT (Application Under Test) is running
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o custom-columns=:status.phase
          args:
            executable: /bin/bash
          register: app_status
          until: "((app_status.stdout_lines|unique)|length) == 1 and 'Running' in app_status.stdout"
          delay: 10
          retries: 12

        - name: Get application pod name
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: app_pod_name

        ## STORAGE FAULT INJECTION 

        - include_tasks: /chaoslib/kubectl/cordon_drain_node.yaml
          vars:
            action: "drain"      
            app_ns: "{{ namespace }}"
            app: "{{ app_pod_name.stdout }}"

        - name: Verify AUT liveness post fault-injection
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o custom-columns=:status.phase
          args:
            executable: /bin/bash
          register: app_status
          until: "((app_status.stdout_lines|unique)|length) == 1 and 'Running' in app_status.stdout"
          delay: 10
          retries: 12

        ## POST-CHAOS APPLICATION LIVENESS CHECK
        - block:

            - name: Get the liveness pods
              shell: kubectl get pod -n {{ liveness_namespace }} -l {{ liveness_label }} -o=custom-columns=NAME:".metadata.name" --no-headers
              register: liveness_pods_after_drain

            - name: Checking status of liveness pods
              shell: kubectl get pods {{ item }} -n {{ liveness_namespace }} -o=custom-columns=NAME:".status.phase" --no-headers
              register: result
              with_items: "{{ liveness_pods_after_drain.stdout_lines }}"
              until: "'Running' in result.stdout"
              delay: 10
              retries: 10
             
          when: liveness_label != ''  

        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 

        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - name: Uncordon the application node
          shell: >
            kubectl uncordon {{ app_node }}
          args:
            executable: /bin/bash
          register: result
          until: "'uncordoned' in result.stdout"
          delay: 20
          retries: 12 

        - name: Generate the litmus result CR to reflect EOT (End of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            chaostype: "drain-node"
            app: "percona"
            phase: completed
            verdict: "{{ flag }}"
           
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"
           
