---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:
       ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - name: Generate the litmus result CR to reflect SOT (Start of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: in-progress
            verdict: none
        
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"

        - name: Obtaining the loadgen pod label from env.
          set_fact:
            loadgen_lkey: "{{ loadgen_label.split('=')[0] }}"
            loadgen_lvalue: "{{ loadgen_label.split('=')[1] }}"

        - name: Replace the label in loadgen job spec.
          replace:
            path: "{{ percona_loadgen }}"
            regexp: "loadgen_lkey: loadgen_lvalue"
            replace: "{{ loadgen_lkey }}: {{ loadgen_lvalue }}"

        - name: Replace the db-user placeholder in tpcc-config file
          replace:
            path: "{{ tpcc_conf }}"
            regexp: "testuser"
            replace: "{{ db_user }}"

        - name: Replace the password placeholder in tpcc-config file
          replace:
            path: "{{ tpcc_conf }}"
            regexp: "password"
            replace: "{{ db_password }}"

        - name: Getting the Sevice IP of Application
          shell: kubectl get svc -n {{ namespace }} -l {{ app_service_label }} -o jsonpath='{.items[0].spec.clusterIP}'
          register: ip  

        - name: Replace the Service IP placeholder
          replace:
            path: "{{ percona_loadgen }}"
            regexp: "service_ip"
            replace: "{{ ip.stdout }}"

        - name: Create test specific namespace.
          shell: kubectl create ns {{ namespace }}
          args:
           executable: /bin/bash
          when: namespace != 'litmus'

        - name: Checking the status of test specific namespace.
          shell: kubectl get ns {{ namespace }} -o jsonpath='{.status.phase}'
          args:
           executable: /bin/bash
          register: npstatus
          until: "'Active' in npstatus.stdout"
          delay: 30
          retries: 10

        - name: Checking for configmap  
          shell: kubectl get configmap -n {{ namespace }}
          register: configmap

        - name: Creating a kubernetes config map to hold the tpcc benchmark config
          shell: kubectl create configmap tpcc-config --from-file {{ tpcc_conf }} -n {{ namespace }}
          when: "'tpcc-config' not in configmap.stdout"

        - name: Verifying successful creation of the configmap
          shell: kubectl describe configmap -n {{ namespace }} 
          register: config
          until: "'tpcc-config' in config.stdout"
          delay: 15
          retries: 15

        - name: Checking whether application is running
          shell: kubectl get pod -n {{ namespace }} -l {{ app_label }}
          register: running_status
          until: "'Running' in running_status.stdout"
          delay: 30
          retries: 60
        
        - name: Create Percona Loadgen Job
          shell: kubectl apply -f {{ percona_loadgen }} -n {{ namespace }} 

        - name: Verify load-gen pod is running
          shell: kubectl get pods -n {{ namespace }} -l {{ loadgen_label }} -o jsonpath='{.items[0].status.phase}'
          args:
            executable: /bin/bash
          register: result
          until: "'Running' in result.stdout"
          delay: 30
          retries: 15

        - name: Getting the Percona POD name
          shell: kubectl get po -n {{ namespace }} -l {{ app_label }} -o jsonpath='{.items[0].metadata.name}'
          register: pod_name  

        - name: Verifying load-generation  
          shell: kubectl exec -it {{ pod_name.stdout }} -n {{ namespace }} -- mysql -u{{ db_user }} -p{{ db_password }} -e "show databases"
          register: output
          until: "'tpcc-' in output.stdout"
          delay: 30
          retries: 15

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"  

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR 
        - name: Generate the litmus result CR to reflect EOT (End of Test) 
          template: 
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: completed
            verdict: "{{ flag }}"
           
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"
