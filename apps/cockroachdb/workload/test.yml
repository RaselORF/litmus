---
# This playbook generates the load on the cockroachdb application already deployed on the cluster.
# Steps:
# 1) Create litmus-result customr resource for logging.
# 2) Create cockroachdb loadgen job
# 3) Verify if the corresponding pod is running successfully.

- hosts: localhost
  connection: local

  vars_files: 
    - test_vars.yml

  tasks:

    - block:

           ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - name: Generate the litmus result CR to reflect SOT (Start of Test)
          template:
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars:
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: in-progress
            verdict: none

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args: 
            executable: /bin/bash
          register: lr_status
          failed_when: "lr_status.rc != 0"

        - name: Obtaining the application label from env.
          set_fact:
            app_lkey: "{{ app_label.split('=')[0] }}"
            app_lvalue: "{{ app_label.split('=')[1] }}"

        - name: Obtaining the service name.
          shell: kubectl get svc -n {{ namespace }} -l {{ app_lkey }}={{ app_lvalue }} -o jsonpath='{.items[0].metadata.name}'
          args:
            executable: /bin/bash
          register: svc_name

        - name: Recording the service name.
          set_fact:
            svc_name: "{{ svc_name.stdout }}"

        - name: Form FQDN using namespace and service name.
          set_fact:
            fqdn: "{{ namespace }}.{{svc_name}}.svc.cluster.local"

        - name: Obtaining the loadgen pod label from env.
          set_fact:
            loadgen_lkey: "{{ loadgen_label.split('=')[0] }}"
            loadgen_lvalue: "{{ loadgen_label.split('=')[1] }}"

        - name: Replace the label in loadgen job spec.
          replace:
            path: "{{ cockroachdb_loadgen }}"
            regexp: "loadgen_lkey: loadgen_lvalue"
            replace: "{{ loadgen_lkey }}: {{ loadgen_lvalue }}"

        - name: Place the FQDN in loadgen yaml.
          replace:
            path: "{{ cockroachdb_loadgen }}"
            regexp: 'fqdn'
            replace: "{{ fqdn }}"

        - name: Updating the time duration in loadgen yaml.
          replace:
            path: "{{ cockroachdb_loadgen }}"
            regexp: 'time_duration'
            replace: "{{ lookup('env','TIME_INTERVAL') }}"
        
        - name: Creating cockroachdb loadgen job.
          shell: kubectl apply -f {{ cockroachdb_loadgen }} -n {{ namespace }}
          args:
            executable: /bin/bash
          register: result
          failed_when: 'result.rc != 0'

        - name: Obtain the cockroachdb pod name
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ app_lkey }}={{ app_lvalue }} -o jsonpath='{.items[0].metadata.name}'
          args:
            executable: /bin/bash
          register: pod_name

        - name: Verify the data written
          shell: >
            kubectl exec -it {{ pod_name.stdout }} -n {{ namespace }} -- /cockroach/cockroach sql --insecure 
            --host=cockroachdb-public.cockroachdb -d test -e 'show tables;' 
          args:
            executable: /bin/bash
          register: tables
          until: "'kv' in tables.stdout"
          delay: 60
          retries: 5
        
        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - name: Generate the litmus result CR to reflect EOT (End of Test)
          template:
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars:
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: completed
            verdict: "{{ flag }}"

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status
          failed_when: "lr_status.rc != 0" 

