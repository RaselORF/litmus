---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:

    - block:
        - block:

            - name: Record test instance/run ID
              set_fact:
                run_id: "{{ lookup('env','RUN_ID') }}"

            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ test_name }}-{{ run_id }}"

          when: lookup('env','RUN_ID')

         ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /common/utils/update_litmus_result_resource.yml
          vars:
            status: 'SOT'

         ##Actual test
        - name: Check whether the provider storageclass was created.
          shell: kubectl get sc {{ lookup('env','PROVIDER_STORAGE_CLASS') }}
          args:
            executable: /bin/bash
          register: result

        - name: Replace the pvc placeholder with provider
          replace:
            path: "{{ cockroachdb_deployment }}"
            regexp: "testclaim"
            replace: "{{ lookup('env','APP_PVC') }}"

        - name: Get the application label values from env
          set_fact:
             app_lkey: "{{ app_label.split('=')[0] }}"
             app_lvalue: "{{ app_label.split('=')[1] }}"

        - name: Replace the application label placeholder in deployment spec
          replace:
            path: "{{ cockroachdb_deployment }}"
            regexp: "lkey: lvalue"
            replace: "{{ app_lkey }}: {{ app_lvalue }}"

        - name: Replace the application label placeholder in service spec
          replace:
            path: "{{ cockroachdb_svc }}"
            regexp: "lkey: lvalue"
            replace: "{{ app_lkey }}: {{ app_lvalue }}"

        - name: Replace the storageclass placeholder with provider
          replace:
            path: "{{ cockroachdb_deployment }}"
            regexp: "testclass"
            replace: "{{ lookup('env','PROVIDER_STORAGE_CLASS') }}"

        - name: Create test specific namespace.
          shell: kubectl create ns {{ app_ns }}
          args:
           executable: /bin/bash
          when: app_ns != 'litmus'

        - name: Checking the status of test specific namespace.
          shell: kubectl get ns {{ app_ns }} -o custom-columns=:status.phase --no-headers
          args:
           executable: /bin/bash
          register: npstatus
          until: "'Active' in npstatus.stdout"
          delay: 30
          retries: 10

        - name: Deploying cockroachdb statefulset.
          shell: kubectl apply -f {{ cockroachdb_deployment }} -n {{ app_ns }}
          args:
            executable: /bin/bash

        - name: Deploying cockroachdb service
          shell: kubectl apply -f {{ cockroachdb_svc }} -n {{ app_ns }}
          args:
            executable: /bin/bash

        - block:

            - name: Obtain the number of replicas.
              shell: kubectl get statefulset -n {{ app_ns }} -l "{{ app_label }}" -o custom-columns=:spec.replicas
              args:
                executable: /bin/bash
              register: rep_count
              until: "rep_count.rc == 0"
              delay: 60
              retries: 15

            - name: Obtain the ready replica count and compare with the replica count.
              shell: kubectl get statefulset -n {{ app_ns }} -l "{{ app_label }}" -o custom-columns=:..readyReplicas
              args:
                executable: /bin/bash
              register: ready_rep
              until: "ready_rep.rc == 0 and ready_rep.stdout|int == rep_count.stdout|int"
              delay: 60
              retries: 30

          when: lookup('env','DEPLOY_TYPE') == 'statefulset'

        - name: Check if cockroachdb replica pods are running.
          shell: kubectl get pods -n {{ namespace }} -o jsonpath='{.items[?(@.metadata.labels.{{app_lkey}}=="{{app_lvalue}}")].status.phase}'
          register: result
          until: "((result.stdout.split()|unique)|length) == 1 and 'Running' in result.stdout"
          delay: 60
          retries: 15

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /common/utils/update_litmus_result_resource.yml
          vars:
            status: 'EOT'