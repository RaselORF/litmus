// Code generated by MockGen. DO NOT EDIT.
// Source: kubectl.go

// Package kubectl is a generated GoMock package.
package kubectl

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKubeRunner is a mock of KubeRunner interface
type MockKubeRunner struct {
	ctrl     *gomock.Controller
	recorder *MockKubeRunnerMockRecorder
}

// MockKubeRunnerMockRecorder is the mock recorder for MockKubeRunner
type MockKubeRunnerMockRecorder struct {
	mock *MockKubeRunner
}

// NewMockKubeRunner creates a new mock instance
func NewMockKubeRunner(ctrl *gomock.Controller) *MockKubeRunner {
	mock := &MockKubeRunner{ctrl: ctrl}
	mock.recorder = &MockKubeRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeRunner) EXPECT() *MockKubeRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockKubeRunner) Run(args []string) (string, error) {
	ret := m.ctrl.Call(m, "Run", args)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockKubeRunnerMockRecorder) Run(args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockKubeRunner)(nil).Run), args)
}

// MockKubeCtlRunner is a mock of KubeCtlRunner interface
type MockKubeCtlRunner struct {
	ctrl     *gomock.Controller
	recorder *MockKubeCtlRunnerMockRecorder
}

// MockKubeCtlRunnerMockRecorder is the mock recorder for MockKubeCtlRunner
type MockKubeCtlRunnerMockRecorder struct {
	mock *MockKubeCtlRunner
}

// NewMockKubeCtlRunner creates a new mock instance
func NewMockKubeCtlRunner(ctrl *gomock.Controller) *MockKubeCtlRunner {
	mock := &MockKubeCtlRunner{ctrl: ctrl}
	mock.recorder = &MockKubeCtlRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeCtlRunner) EXPECT() *MockKubeCtlRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockKubeCtlRunner) Run(args []string) (string, error) {
	ret := m.ctrl.Call(m, "Run", args)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockKubeCtlRunnerMockRecorder) Run(args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockKubeCtlRunner)(nil).Run), args)
}
