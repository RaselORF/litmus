---
apiVersion: v1
kind: Namespace
metadata:
  name: litmus
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: litmus-portal-admin-config
  namespace: litmus
data:
  AgentScope: cluster
  AgentNamespace: litmus
  DataBaseServer: "mongodb://mongo-service:27017"
  JWTSecret: "litmus-portal@123"
  DB_USER: "admin"
  DB_PASSWORD: "1234"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: litmusportal-frontend
  namespace: litmus
  labels:
    component: litmusportal-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      component: litmusportal-frontend
  template:
    metadata:
      labels:
        component: litmusportal-frontend
    spec:
      containers:
        - name: litmusportal-frontend
          image: litmuschaos/litmusportal-frontend:ci
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: AGENT_SCOPE
              valueFrom:
                configMapKeyRef:
                  name: litmus-portal-admin-config
                  key: AgentScope
---
apiVersion: v1
kind: Service
metadata:
  name: litmusportal-frontend-service
  namespace: litmus
spec:
  type: NodePort
  ports:
    - name: http
      port: 9091
      targetPort: 8080
  selector:
    component: litmusportal-frontend
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: litmus-server-account
  namespace: litmus
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: litmus-server
  namespace: litmus
  labels:
    name: litmus-server
rules:
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - "*"
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: litmus-server-rb
  namespace: litmus
subjects:
  - kind: ServiceAccount
    name: litmus-server-account
    namespace: litmus
roleRef:
  kind: ClusterRole
  name: litmus-server
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: litmusportal-server
  namespace: litmus
  labels:
    component: litmusportal-server
spec:
  replicas: 1
  selector:
    matchLabels:
      component: litmusportal-server
  template:
    metadata:
      labels:
        component: litmusportal-server
    spec:
      containers:
        - name: graphql-server
          image: litmuschaos/litmusportal-server:ci
          env:
            - name: DB_SERVER
              valueFrom:
                configMapKeyRef:
                  name: litmus-portal-admin-config
                  key: DataBaseServer
            - name: JWT_SECRET
              valueFrom:
                configMapKeyRef:
                  name: litmus-portal-admin-config
                  key: JWTSecret
            - name: SELF_CLUSTER
              value: "true"
            - name: AGENT_SCOPE
              valueFrom:
                configMapKeyRef:
                  name: litmus-portal-admin-config
                  key: AgentScope
            - name: AGENT_NAMESPACE
              valueFrom:
                configMapKeyRef:
                  name: litmus-portal-admin-config
                  key: AgentNamespace
            - name: LITMUS_PORTAL_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  name: litmus-portal-admin-config
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: litmus-portal-admin-config
                  key: DB_PASSWORD
            - name: PORTAL_SCOPE
              value: "cluster"
            - name: SUBSCRIBER_IMAGE
              value: "litmuschaos/litmusportal-subscriber:ci"
            - name: EVENT_TRACKER_IMAGE
              value: "litmuschaos/litmusportal-event-tracker:ci"
            - name: ARGO_WORKFLOW_CONTROLLER_IMAGE
              value: "litmuschaos/workflow-controller:v2.11.0"
            - name: ARGO_WORKFLOW_EXECUTOR_IMAGE
              value: "litmuschaos/argoexec:v2.11.0"
            - name: LITMUS_CHAOS_OPERATOR_IMAGE
              value: "litmuschaos/chaos-operator:1.13.6"
            - name: LITMUS_CHAOS_RUNNER_IMAGE
              value: "litmuschaos/chaos-runner:1.13.6"
            - name: LITMUS_CHAOS_EXPORTER_IMAGE
              value: "litmuschaos/chaos-exporter:1.13.6"
            - name: SERVER_SERVICE_NAME
              value: "litmusportal-server-service"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: INGRESS
              value: "false"
            - name: INGRESS_NAME
              value: "litmus-ingress"
            - name: CONTAINER_RUNTIME_EXECUTOR
              value: "k8sapi"
            - name: HUB_BRANCH_NAME
              value: "v1.13.x"
            - name: NODE_SELECTOR
              value: ""
          ports:
            - containerPort: 8080
          imagePullPolicy: Always
        - name: auth-server
          image: litmuschaos/litmusportal-auth-server:ci
          env:
            - name: STRICT_PASSWORD_POLICY
              value: "false"
            - name: DB_SERVER
              valueFrom:
                configMapKeyRef:
                  name: litmus-portal-admin-config
                  key: DataBaseServer
            - name: JWT_SECRET
              valueFrom:
                configMapKeyRef:
                  name: litmus-portal-admin-config
                  key: JWTSecret
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  name: litmus-portal-admin-config
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: litmus-portal-admin-config
                  key: DB_PASSWORD
            - name: ADMIN_USERNAME
              value: "admin"
            - name: ADMIN_PASSWORD
              value: "litmus"
          ports:
            - containerPort: 3000
          imagePullPolicy: Always
      serviceAccountName: litmus-server-account
---
apiVersion: v1
kind: Service
metadata:
  name: litmusportal-server-service
  namespace: litmus
spec:
  type: NodePort
  ports:
    - name: graphql-server
      port: 9002
      targetPort: 8080
    - name: auth-server
      port: 9003
      targetPort: 3000
  selector:
    component: litmusportal-server
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: perconaservermongodbs.psmdb.percona.com
spec:
  group: psmdb.percona.com
  names:
    kind: PerconaServerMongoDB
    listKind: PerconaServerMongoDBList
    plural: perconaservermongodbs
    singular: perconaservermongodb
    shortNames:
      - psmdb
  scope: Namespaced
  versions:
    - name: v1alpha1
      storage: false
      served: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: ENDPOINT
          type: string
          jsonPath: .status.host
        - name: Status
          type: string
          jsonPath: .status.state
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
    - name: v1
      storage: false
      served: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: ENDPOINT
          type: string
          jsonPath: .status.host
        - name: Status
          type: string
          jsonPath: .status.state
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
    - name: v1-1-0
      storage: false
      served: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: ENDPOINT
          type: string
          jsonPath: .status.host
        - name: Status
          type: string
          jsonPath: .status.state
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
    - name: v1-2-0
      storage: false
      served: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: ENDPOINT
          type: string
          jsonPath: .status.host
        - name: Status
          type: string
          jsonPath: .status.state
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
    - name: v1-3-0
      storage: false
      served: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: ENDPOINT
          type: string
          jsonPath: .status.host
        - name: Status
          type: string
          jsonPath: .status.state
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
    - name: v1-4-0
      storage: false
      served: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: ENDPOINT
          type: string
          jsonPath: .status.host
        - name: Status
          type: string
          jsonPath: .status.state
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
    - name: v1-5-0
      storage: false
      served: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: ENDPOINT
          type: string
          jsonPath: .status.host
        - name: Status
          type: string
          jsonPath: .status.state
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
    - name: v1-6-0
      storage: false
      served: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: ENDPOINT
          type: string
          jsonPath: .status.host
        - name: Status
          type: string
          jsonPath: .status.state
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
    - name: v1-7-0
      storage: false
      served: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: ENDPOINT
          type: string
          jsonPath: .status.host
        - name: Status
          type: string
          jsonPath: .status.state
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
    - name: v1-8-0
      storage: false
      served: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: ENDPOINT
          type: string
          jsonPath: .status.host
        - name: Status
          type: string
          jsonPath: .status.state
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
    - name: v1-9-0
      storage: false
      served: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: ENDPOINT
          type: string
          jsonPath: .status.host
        - name: Status
          type: string
          jsonPath: .status.state
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
    - name: v1-10-0
      storage: true
      served: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: ENDPOINT
          type: string
          jsonPath: .status.host
        - name: Status
          type: string
          jsonPath: .status.state
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: perconaservermongodbbackups.psmdb.percona.com
spec:
  group: psmdb.percona.com
  names:
    kind: PerconaServerMongoDBBackup
    listKind: PerconaServerMongoDBBackupList
    plural: perconaservermongodbbackups
    singular: perconaservermongodbbackup
    shortNames:
      - psmdb-backup
  scope: Namespaced
  versions:
    - name: v1
      storage: true
      served: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: Cluster
          type: string
          description: Cluster name
          jsonPath: .spec.psmdbCluster
        - name: Storage
          type: string
          description: Storage name from pxc spec
          jsonPath: .spec.storageName
        - name: Destination
          type: string
          description: Backup destination
          jsonPath: .status.destination
        - name: Status
          type: string
          description: Job status
          jsonPath: .status.state
        - name: Completed
          description: Completed time
          type: date
          jsonPath: .status.completed
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: perconaservermongodbrestores.psmdb.percona.com
spec:
  group: psmdb.percona.com
  names:
    kind: PerconaServerMongoDBRestore
    listKind: PerconaServerMongoDBRestoreList
    plural: perconaservermongodbrestores
    singular: perconaservermongodbrestore
    shortNames:
      - psmdb-restore
  scope: Namespaced
  versions:
    - name: v1
      storage: true
      served: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: Cluster
          type: string
          description: Cluster name
          jsonPath: .spec.clusterName
        - name: Status
          type: string
          description: Job status
          jsonPath: .status.state
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: percona-server-mongodb-operator
  namespace: litmus
rules:
  - apiGroups:
      - psmdb.percona.com
    resources:
      - perconaservermongodbs
      - perconaservermongodbs/status
      - perconaservermongodbbackups
      - perconaservermongodbbackups/status
      - perconaservermongodbrestores
      - perconaservermongodbrestores/status
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/exec
      - services
      - persistentvolumeclaims
      - secrets
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - apps
    resources:
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - batch
    resources:
      - cronjobs
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - certmanager.k8s.io
      - cert-manager.io
    resources:
      - issuers
      - certificates
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
      - deletecollection
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: percona-server-mongodb-operator
  namespace: litmus
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: service-account-percona-server-mongodb-operator
  namespace: litmus
subjects:
  - kind: ServiceAccount
    name: percona-server-mongodb-operator
roleRef:
  kind: Role
  name: percona-server-mongodb-operator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: percona-server-mongodb-operator
  namespace: litmus
spec:
  replicas: 1
  selector:
    matchLabels:
      name: percona-server-mongodb-operator
  template:
    metadata:
      labels:
        name: percona-server-mongodb-operator
    spec:
      serviceAccountName: percona-server-mongodb-operator
      containers:
        - name: percona-server-mongodb-operator
          image: percona/percona-server-mongodb-operator:1.9.0
          ports:
            - containerPort: 60000
              name: metrics
          command:
            - percona-server-mongodb-operator
          imagePullPolicy: Always
          env:
            - name: WATCH_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OPERATOR_NAME
              value: percona-server-mongodb-operator
            - name: RESYNC_PERIOD
              value: 5s
            - name: LOG_VERBOSE
              value: "false"
---
apiVersion: psmdb.percona.com/v1-9-0
kind: PerconaServerMongoDB
metadata:
  name: litmus-mongo
  namespace: litmus
#  finalizers:
#    - delete-psmdb-pvc
spec:
  #  platform: openshift
  #  clusterServiceDNSSuffix: svc.cluster.local
  #  pause: true
  crVersion: 1.9.0
  image: percona/percona-server-mongodb:4.4.6-8
  imagePullPolicy: Always
  #  imagePullSecrets:
  #    - name: private-registry-credentials
  #  runUid: 1001
  allowUnsafeConfigurations: false
  updateStrategy: SmartUpdate
  upgradeOptions:
    versionServiceEndpoint: https://check.percona.com
    apply: 4.4-recommended
    schedule: "0 2 * * *"
    setFCV: false
  secrets:
    users: litmus-mongo-secrets
  pmm:
    enabled: false
    image: percona/pmm-client:2.18.0
    serverHost: monitoring-service
  #    mongodParams: --environment=ENVIRONMENT
  #    mongosParams: --environment=ENVIRONMENT
  replsets:

    - name: rs0
      size: 3
      #    # for more configuration fields refer to https://docs.mongodb.com/manual/reference/configuration-options/
      #    configuration: |
      #      operationProfiling:
      #        mode: slowOp
      #      systemLog:
      #         verbosity: 1
      #    storage:
      #      engine: wiredTiger
      #      inMemory:
      #        engineConfig:
      #          inMemorySizeRatio: 0.9
      #      wiredTiger:
      #        engineConfig:
      #          cacheSizeRatio: 0.5
      #          directoryForIndexes: false
      #          journalCompressor: snappy
      #        collectionConfig:
      #          blockCompressor: snappy
      #        indexConfig:
      #          prefixCompression: true
      #      affinity:
      #        antiAffinityTopologyKey: "kubernetes.io/hostname"
      #      advanced:
      #        nodeAffinity:
      #          requiredDuringSchedulingIgnoredDuringExecution:
      #            nodeSelectorTerms:
      #            - matchExpressions:
      #              - key: kubernetes.io/e2e-az-name
      #                operator: In
      #                values:
      #                - e2e-az1
      #                - e2e-az2
      #    tolerations:
      #    - key: "node.alpha.kubernetes.io/unreachable"
      #      operator: "Exists"
      #      effect: "NoExecute"
      #      tolerationSeconds: 6000
      #    priorityClassName: high-priority
      #    annotations:
      #    annotations:
      #      iam.amazonaws.com/role: role-arn
      #    labels:
      #      rack: rack-22
      #    nodeSelector:
      #      disktype: ssd
      #    livenessProbe:
      #      failureThreshold: 4
      #      initialDelaySeconds: 60
      #      periodSeconds: 30
      #      successThreshold: 1
      #      timeoutSeconds: 5
      #      startupDelaySeconds: 7200
      #    runtimeClassName: image-rc
      #    sidecars:
      #    - image: busybox
      #      command: ["/bin/sh"]
      #      args: ["-c", "while true; do echo echo $(date -u) 'test' >> /dev/null; sleep 5;done"]
      #      name: rs-sidecar-1
      podDisruptionBudget:
        maxUnavailable: 1
      #      minAvailable: 0
      expose:
        enabled: false
        exposeType: LoadBalancer
      #      loadBalancerSourceRanges:
      #        - 10.0.0.0/8
      #      serviceAnnotations:
      #        service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
      arbiter:
        enabled: false
        size: 1
      #        affinity:
      #          antiAffinityTopologyKey: "kubernetes.io/hostname"
      #        advanced:
      #          nodeAffinity:
      #            requiredDuringSchedulingIgnoredDuringExecution:
      #              nodeSelectorTerms:
      #              - matchExpressions:
      #                - key: kubernetes.io/e2e-az-name
      #                  operator: In
      #                  values:
      #                  - e2e-az1
      #                  - e2e-az2
      #      tolerations:
      #      - key: "node.alpha.kubernetes.io/unreachable"
      #        operator: "Exists"
      #        effect: "NoExecute"
      #        tolerationSeconds: 6000
      #      priorityClassName: high-priority
      #      annotations:
      #        iam.amazonaws.com/role: role-arn
      #      labels:
      #        rack: rack-22
      #      nodeSelector:
      #        disktype: ssd
      #    schedulerName: "default"
      #      resources:
      #        limits:
      #          cpu: "300m"
      #          memory: "0.5G"
      #        requests:
      #          cpu: "300m"
      #          memory: "0.5G"
      volumeSpec:
        #      emptyDir: {}
        #      hostPath:
        #        path: /data
        #        type: Directory
        persistentVolumeClaim:
          #        storageClassName: standard
          #        accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 20Gi

  sharding:
    enabled: true

    configsvrReplSet:
      size: 3
      #      # for more configuration fields refer to https://docs.mongodb.com/manual/reference/configuration-options/
      #      configuration: |
      #        operationProfiling:
      #          mode: slowOp
      #        systemLog:
      #           verbosity: 1
      #      affinity:
      #        antiAffinityTopologyKey: "kubernetes.io/hostname"
      #        advanced:
      #          nodeAffinity:
      #            requiredDuringSchedulingIgnoredDuringExecution:
      #              nodeSelectorTerms:
      #              - matchExpressions:
      #                - key: kubernetes.io/e2e-az-name
      #                  operator: In
      #                  values:
      #                  - e2e-az1
      #                  - e2e-az2
      #      tolerations:
      #      - key: "node.alpha.kubernetes.io/unreachable"
      #        operator: "Exists"
      #        effect: "NoExecute"
      #        tolerationSeconds: 6000
      #      priorityClassName: high-priority
      #      annotations:
      #        iam.amazonaws.com/role: role-arn
      #      labels:
      #        rack: rack-22
      #      nodeSelector:
      #        disktype: ssd
      #      storage:
      #        engine: wiredTiger
      #        wiredTiger:
      #          engineConfig:
      #            cacheSizeRatio: 0.5
      #            directoryForIndexes: false
      #            journalCompressor: snappy
      #          collectionConfig:
      #            blockCompressor: snappy
      #          indexConfig:
      #            prefixCompression: true
      #      runtimeClassName: image-rc
      #      sidecars:
      #      - image: busybox
      #        command: ["/bin/sh"]
      #        args: ["-c", "while true; do echo echo $(date -u) 'test' >> /dev/null; sleep 5;done"]
      #        name: rs-sidecar-1
      podDisruptionBudget:
        maxUnavailable: 1
      #      resources:
      #        limits:
      #          cpu: "300m"
      #          memory: "0.5G"
      #        requests:
      #          cpu: "300m"
      #          memory: "0.5G"
      volumeSpec:
        #       emptyDir: {}
        #       hostPath:
        #         path: /data
        #         type: Directory
        persistentVolumeClaim:
          #          storageClassName: standard
          #          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 20Gi

    mongos:
      size: 3
      #      # for more configuration fields refer to https://docs.mongodb.com/manual/reference/configuration-options/
      #      configuration: |
      #        systemLog:
      #           verbosity: 1
      #      affinity:
      #        antiAffinityTopologyKey: "kubernetes.io/hostname"
      #        advanced:
      #          nodeAffinity:
      #            requiredDuringSchedulingIgnoredDuringExecution:
      #              nodeSelectorTerms:
      #              - matchExpressions:
      #                - key: kubernetes.io/e2e-az-name
      #                  operator: In
      #                  values:
      #                  - e2e-az1
      #                  - e2e-az2
      #      tolerations:
      #      - key: "node.alpha.kubernetes.io/unreachable"
      #        operator: "Exists"
      #        effect: "NoExecute"
      #        tolerationSeconds: 6000
      #      priorityClassName: high-priority
      #      annotations:
      #        iam.amazonaws.com/role: role-arn
      #      labels:
      #        rack: rack-22
      #      nodeSelector:
      #        disktype: ssd
      #      runtimeClassName: image-rc
      #      sidecars:
      #      - image: busybox
      #        command: ["/bin/sh"]
      #        args: ["-c", "while true; do echo echo $(date -u) 'test' >> /dev/null; sleep 5;done"]
      #        name: rs-sidecar-1
      podDisruptionBudget:
        maxUnavailable: 1
      #      resources:
      #        limits:
      #          cpu: "300m"
      #          memory: "0.5G"
      #        requests:
      #          cpu: "300m"
      #          memory: "0.5G"
      expose:
        exposeType: ClusterIP
  #        loadBalancerSourceRanges:
  #          - 10.0.0.0/8
  #        serviceAnnotations:
  #          service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
  #      auditLog:
  #        destination: file
  #        format: BSON
  #        filter: '{}'

  mongod:
    net:
      port: 27017
      hostPort: 0
    security:
      redactClientLogData: false
      enableEncryption: true
      encryptionKeySecret: litmus-mongo-mongodb-encryption-key
      encryptionCipherMode: AES256-CBC
    setParameter:
      ttlMonitorSleepSecs: 60
      wiredTigerConcurrentReadTransactions: 128
      wiredTigerConcurrentWriteTransactions: 128
    storage:
      engine: wiredTiger
      inMemory:
        engineConfig:
          inMemorySizeRatio: 0.9
      wiredTiger:
        engineConfig:
          cacheSizeRatio: 0.5
          directoryForIndexes: false
          journalCompressor: snappy
        collectionConfig:
          blockCompressor: snappy
        indexConfig:
          prefixCompression: true
    operationProfiling:
      mode: slowOp
      slowOpThresholdMs: 100
      rateLimit: 100
  #    auditLog:
  #      destination: file
  #      format: BSON
  #      filter: '{}'

  backup:
    enabled: true
    restartOnFailure: true
    image: percona/percona-server-mongodb-operator:1.9.0-backup
    serviceAccountName: percona-server-mongodb-operator
    #    resources:
    #      limits:
    #        cpu: "300m"
    #        memory: "0.5G"
    #      requests:
    #        cpu: "300m"
    #        memory: "0.5G"
    storages:
    #      s3-us-west:
    #        type: s3
    #        s3:
    #          bucket: S3-BACKUP-BUCKET-NAME-HERE
    #          credentialsSecret: litmus-mongo-backup-s3
    #          region: us-west-2
    #      minio:
    #        type: s3
    #        s3:
    #          bucket: MINIO-BACKUP-BUCKET-NAME-HERE
    #          region: us-east-1
    #          credentialsSecret: litmus-mongo-backup-minio
    #          endpointUrl: http://minio.psmdb.svc.cluster.local:9000/minio/
    pitr:
      enabled: false
    tasks:
#      - name: daily-s3-us-west
#        enabled: true
#        schedule: "0 0 * * *"
#        keep: 3
#        storageName: s3-us-west
#        compressionType: gzip
#      - name: weekly-s3-us-west
#        enabled: false
#        schedule: "0 0 * * 0"
#        keep: 5
#        storageName: s3-us-west
#        compressionType: gzip
