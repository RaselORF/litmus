# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @authorized on FIELD_DEFINITION

"""
Defines the details for a cluster
"""
type Cluster {
  """
  ID of the cluster
  """
  clusterID: ID!
  """
  Project ID the cluster is being connected to
  """
  projectID: ID!
  """
  Name of the cluster
  """
  clusterName: String!
  """
  Description of the cluster
  """
  description: String
  """
  Cluster Platform Name eg. GKE,AWS, Others
  """
  platformName: String!

  accessKey: String!
  """
  Bool value indicating if the cluster agent is registered or not
  """
  isRegistered: Boolean!
  """
  Bool value indicating if the cluster agent is confirmed or not
  """
  isClusterConfirmed: Boolean!
  """
  Bool value indicating if the cluster agent is active or not
  """
  isActive: Boolean!
  """
  Timestamp when the cluster agent was last updated
  """
  updatedAt: String!
  """
  Timestamp when the cluster agent was created
  """
  createdAt: String!
  """
  Cluster type : Internal or External
  """
  clusterType: String!
  """
  Number of schedules created in the cluster agent
  """
  noOfSchedules: Int
  """
  Number of workflows run in the cluster agent
  """
  noOfWorkflows: Int
  """
  Token used to verify and retrieve the cluster agent manifest
  """
  token: String!
  """
  Namespace where the cluster agent is being installed
  """
  agentNamespace: String
  """
  Name of service account used by cluster agent
  """
  serviceAccount: String
  """
  Scope of the cluster agent : ns or cluster
  """
  agentScope: String!
  """
  Bool value indicating whether agent ns used already exists on cluster or not
  """
  agentNsExists: Boolean
  """
  Bool value indicating whether service account used already exists on cluster or not
  """
  agentSaExists: Boolean
  """
  Timestamp of the last workflow run in the cluster agent
  """
  lastWorkflowTimestamp: String!
  """
  Timestamp when the cluster agent got connected
  """
  startTime: String!
  """
  Version of the cluster agent
  """
  version: String!
}

"""
Defines the details for the new cluster being connected
"""
input ClusterInput {
  """
  Name of the cluster
  """
  clusterName: String!
  """
  Description of the cluster
  """
  description: String
  """
  Cluster Platform Name eg. GKE,AWS, Others
  """
  platformName: String!
  """
  Project ID the cluster is being connected to
  """
  projectID: ID!
  """
  Cluster type : Internal or External
  """
  clusterType: String!
  """
  Namespace where the cluster agent is being installed
  """
  agentNamespace: String
  """
  Name of service account used by cluster agent
  """
  serviceAccount: String
  """
  Scope of the cluster agent : ns or cluster
  """
  agentScope: String!
  """
  Bool value indicating whether agent ns used already exists on cluster or not
  """
  agentNsExists: Boolean
  """
  Bool value indicating whether service account used already exists on cluster or not
  """
  agentSaExists: Boolean
  """
  Bool value indicating whether agent will skip ssl checks or not
  """
  skipSsl: Boolean
  """
  Node selectors used by cluster agent
  """
  nodeSelector: String
  """
  Node tolerations used by cluster agent
  """
  tolerations: [Toleration]
}

input Toleration {
  tolerationSeconds: Int
  key: String
  operator: String
  effect: String
  value: String
}

type ClusterEvent {
  eventID: ID!
  eventType: String!
  eventName: String!
  description: String!
  cluster: Cluster!
}

type ActionPayload {
  requestType: String!
  k8sManifest: String!
  namespace: String!
  externalData: String
}

type ClusterAction {
  projectID: ID!
  action: ActionPayload!
}

input ClusterEventInput {
  eventName: String!
  description: String!
  clusterID: String!
  accessKey: String!
}

input ClusterIdentity {
  clusterID: String!
  accessKey: String!
  version: String!
}

type ClusterConfirmResponse {
  isClusterConfirmed: Boolean!
  newAccessKey: String
  clusterID: String
}

"""
Defines the details of the weightages of each chaos experiment in the workflow
"""
input WeightagesInput {
  """
  Name of the experiment
  """
  experimentName: String!
  """
  Weightage of the experiment
  """
  weightage: Int!
}

"""
Defines the details for a chaos workflow
"""
input chaosWorkFlowInput {
  """
  ID of the workflow
  """
  workflowID: String
  """
  Manifest of the workflow
  """
  workflowManifest: String!
  """
  Cron syntax of the workflow schedule
  """
  cronSyntax: String!
  """
  Name of the workflow
  """
  workflowName: String!
  """
  Description of the workflow
  """
  workflowDescription: String!
  """
  Array containing weightage and name of each chaos experiment in the workflow
  """
  weightages: [WeightagesInput!]!
  """
  Bool value indicating whether the workflow is a custom workflow or not
  """
  isCustomWorkflow: Boolean!
  """
  ID of the project under which the workflow is scheduled
  """
  projectID: ID!
  """
  ID of the target cluster in which the workflow will run
  """
  clusterID: ID!
}

"""
Defines the response received for querying the details of chaos workflow
"""
type ChaosWorkFlowResponse {
  """
  ID of the workflow
  """
  workflowID: String!
  """
  Cron syntax of the workflow schedule
  """
  cronSyntax: String!
  """
  Name of the workflow
  """
  workflowName: String!
  """
  Description of the workflow
  """
  workflowDescription: String!
  """
  Bool value indicating whether the workflow is a custom workflow or not
  """
  isCustomWorkflow: Boolean!
}

"""
Defines the details for a workflow run
"""
input WorkflowRunInput {
  """
  ID of the workflow
  """
  workflowID: ID!
  """
  ID of the workflow run which is to be queried
  """
  workflowRunID: ID!
  """
  Name of the workflow
  """
  workflowName: String!
  """
  Stores all the workflow run details related to the nodes of DAG graph and chaos results of the experiments
  """
  executionData: String!
  """
  ID of the cluster in which the workflow is running
  """
  clusterID: ClusterIdentity!
  """
  Bool value indicating if the workflow run has completed
  """
  completed: Boolean!
  """
  Bool value indicating if the workflow run has removed
  """
  isRemoved: Boolean
}

"""
Defines the response received for querying querying the pod logs
"""
type PodLogResponse {
  """
  ID of the workflow run which is to be queried
  """
  workflowRunID: ID!
  """
  Name of the pod for which logs are queried
  """
  podName: String!
  """
  Type of the pod: chaosengine
  """
  podType: String!
  """
  Logs for the pod
  """
  log: String!
}

"""
Response received for querying pod logs
"""
input PodLog {
  """
  ID of the cluster
  """
  clusterID: ClusterIdentity!
  """
  Unique request ID of a particular node which is being queried
  """
  requestID: ID!
  """
  ID of a workflow run
  """
  workflowRunID: ID!
  """
  Name of the pod for which logs are required
  """
  podName: String!
  """
  Type of the pod: chaosengine
  """
  podType: String!
  """
  Logs for the pod
  """
  log: String!
}

"""
Defines the details for fetching the pod logs
"""
input PodLogRequest {
  """
  ID of the cluster
  """
  clusterID: ID!
  """
  ID of a workflow run
  """
  workflowRunID: ID!
  """
  Name of the pod for which logs are required
  """
  podName: String!
  """
  Namespace where the pod is running
  """
  podNamespace: String!
  """
  Type of the pod: chaosengine or not pod
  """
  podType: String!
  """
  Name of the experiment pod fetched from execution data
  """
  expPod: String
  """
  Name of the runner pod fetched from execution data
  """
  runnerPod: String
  """
  Namespace where the experiment is executing
  """
  chaosNamespace: String
}

"""
Response received for registering a new cluster
"""
type ClusterRegResponse {
  """
  Token used to verify and retrieve the cluster agent manifest
  """
  token: String!
  """
  Unique ID for the newly registered cluster
  """
  clusterID: String!
  """
  Cluster name as sent in request
  """
  clusterName: String!
}

"""
Defines the SSHKey details
"""
type SSHKey {
  """
  Public SSH key authenticating into git repository
  """
  publicKey: String!
  """
  Private SSH key authenticating into git repository
  """
  privateKey: String!
}

"""
Details of setting a Git repository
"""
input GitConfig {
  """
  ID of the project where GitOps is configured
  """
  projectID: String!
  """
  Git branch where the chaos charts will be pushed and synced
  """
  branch: String!
  """
  URL of the Git repository
  """
  repoURL: String!
  """
  Type of authentication used: 	BASIC, SSH,	TOKEN
  """
  authType: AuthType!
  """
  Token used for private repository
  """
  token: String
  """
  Git username
  """
  userName: String
  """
  Git password
  """
  password: String
  """
  Private SSH key authenticating into git repository
  """
  sshPrivateKey: String
}

"""
Response received after configuring GitOps
"""
type GitConfigResponse {
  """
  Bool value indicating whether GitOps is enabled or not
  """
  enabled: Boolean!
  """
  ID of the project where GitOps is configured
  """
  projectID: String!
  """
  Git branch where the chaos charts will be pushed and synced
  """
  branch: String
  """
  URL of the Git repository
  """
  repoURL: String
  """
  Type of authentication used: 	BASIC, SSH,	TOKEN
  """
  authType: AuthType
  """
  Token used for private repository
  """
  token: String
  """
  Git username
  """
  userName: String
  """
  Git password
  """
  password: String
  """
  Private SSH key authenticating into git repository
  """
  sshPrivateKey: String
}

"""
Details for a workflow template
"""
type ManifestTemplate {
  """
  ID of the template
  """
  templateID: ID!
  """
  Workflow manifest in JSON escaped string
  """
  manifest: String!
  """
  Name of the template
  """
  templateName: String!
  """
  Description of the template
  """
  templateDescription: String!
  """
  ID of the project
  """
  projectID: String!
  """
  Name of the project
  """
  projectName: String!
  """
  Time at which the manifest template was created
  """
  createdAt: String!
  """
  Bool value indicating if the workflow template has removed
  """
  isRemoved: Boolean!
  """
  Bool value indicating whether the workflow template is a custom or not
  """
  isCustomWorkflow: Boolean!
}

"""
Details for saving the template
"""
input TemplateInput {
  """
  Workflow manifest in JSON escaped format
  """
  manifest: String!
  """
  Name of the template
  """
  templateName: String!
  """
  Description of the template
  """
  templateDescription: String!
  """
  Name of the project
  """
  projectID: String!
  """
  Bool value indicating whether the workflow is a custom workflow or not
  """
  isCustomWorkflow: Boolean!
}

"""
Response received for querying Kubernetes Object
"""
type KubeObjectResponse {
  """
  ID of the cluster in which the Kubernetes object is present
  """
  clusterID: ID!
  """
  Type of the Kubernetes object
  """
  kubeObj: String!
}

"""
Defines the details of Kubernetes object
"""
input KubeObjectData {
  """
  Unique request ID for fetching Kubernetes object details
  """
  requestID: ID!
  """
  ID of the cluster in which the Kubernetes object is present
  """
  clusterID: ClusterIdentity!
  """
  Type of the Kubernetes object
  """
  kubeObj: String!
}

"""
Defines details for fetching Kubernetes object data
"""
input KubeObjectRequest {
  """
  ID of the cluster in which the Kubernetes object is present
  """
  clusterID: ID!
  """
  Type of the Kubernetes object to be fetched
  """
  objectType: String!
  kubeObjRequest: KubeGVRRequest!
}

input KubeGVRRequest {
  group: String!
  version: String!
  resource: String!
}

type Query {
  getWorkflowRuns(
    workflowRunsInput: GetWorkflowRunsInput!
  ): GetWorkflowsOutput! @authorized

  getCluster(projectID: String!, clusterType: String): [Cluster!]! @authorized

  # Query to fetch manifest
  getManifest(
    projectID: String!
    clusterID: String!
    accessKey: String!
  ): String! @authorized

  # Query to fetch agent details based on projectID and agent_name
  getAgentDetails(clusterID: String!, projectID: String!): Cluster! @authorized

  # Query to fetch workflow data for heatmap
  getHeatmapData(
    projectID: String!
    workflowID: String!
    year: Int!
  ): [HeatmapData]! @authorized

  getWorkflowStats(
    projectID: ID!
    filter: TimeFrequency!
    showWorkflowRuns: Boolean!
  ): [WorkflowStats]! @authorized

  getWorkflowRunStats(
    workflowRunStatsRequest: WorkflowRunStatsRequest!
  ): WorkflowRunStatsResponse! @authorized

  listWorkflow(workflowInput: ListWorkflowsInput!): ListWorkflowsOutput!
    @authorized

  getCharts(hubName: String!, projectID: String!): [Chart!]! @authorized

  getHubExperiment(experimentInput: ExperimentInput!): Chart! @authorized

  getHubStatus(projectID: String!): [MyHubStatus]! @authorized

  getYAMLData(experimentInput: ExperimentInput!): String!

  getPredefinedWorkflowList(hubName: String!, projectID: String!): [String!]!

  getPredefinedExperimentYAML(experimentInput: ExperimentInput!): String!

  listDataSource(projectID: String!): [DSResponse]! @authorized

  getPromQuery(query: PromInput): PromResponse! @authorized

  getPromLabelNamesAndValues(series: PromSeriesInput): PromSeriesResponse!
    @authorized

  getPromSeriesList(dsDetails: DsDetails): PromSeriesListResponse! @authorized

  listDashboard(
    projectID: String!
    clusterID: String
    dbID: String
  ): [ListDashboardResponse] @authorized

  portalDashboardData(
    projectID: String!
    hubName: String!
  ): [PortalDashboardData!]! @authorized

  # Git Ops
  getGitOpsDetails(projectID: String!): GitConfigResponse! @authorized

  # Manifest Template
  listManifestTemplate(projectID: String!): [ManifestTemplate]! @authorized

  getTemplateManifestByID(templateID: String!): ManifestTemplate! @authorized

  #Image Registry Queries
  listImageRegistry(projectID: String!): [ImageRegistryResponse!] @authorized

  getImageRegistry(
    imageRegistryID: String!
    projectID: String!
  ): ImageRegistryResponse! @authorized

  usageQuery(query: UsageQuery!): UsageData! @authorized
}

type Mutation {
  """
  Registers a new cluster for a user in a specified project
  """
  userClusterReg(
    """
    Details for the cluster being registered
    """
    clusterInput: ClusterInput!
  ): ClusterRegResponse! @authorized

  ## Workflow APIs
  # It is used to create chaosworkflow
  createChaosWorkFlow(input: chaosWorkFlowInput!): ChaosWorkFlowResponse!
    @authorized

  reRunChaosWorkFlow(workflowID: String!): String! @authorized

  # removes workflow from cluster and db
  deleteChaosWorkflow(workflowID: String, workflowRunID: String): Boolean!
    @authorized

  # removes workflow run from the cluster only
  terminateChaosWorkflow(workflowID: String, workflowRunID: String): Boolean!
    @authorized

  syncWorkflow(workflowID: String!, workflowRunID: String!): Boolean!
    @authorized

  #It is used to confirm the subscriber registration
  clusterConfirm(identity: ClusterIdentity!): ClusterConfirmResponse!

  #It is used to send cluster related events from the subscriber
  newClusterEvent(clusterEvent: ClusterEventInput!): String!

  chaosWorkflowRun(workflowData: WorkflowRunInput!): String!

  podLog(log: PodLog!): String!

  kubeObj(kubeData: KubeObjectData!): String!

  addMyHub(myhubInput: CreateMyHub!, projectID: String!): MyHub! @authorized

  saveMyHub(myhubInput: CreateMyHub!, projectID: String!): MyHub! @authorized

  syncHub(id: ID!): [MyHubStatus!]! @authorized

  updateChaosWorkflow(input: chaosWorkFlowInput): ChaosWorkFlowResponse!
    @authorized

  deleteClusterReg(clusterID: String!): String! @authorized

  generaterSSHKey: SSHKey! @authorized

  updateMyHub(myhubInput: UpdateMyHub!, projectID: String!): MyHub! @authorized

  deleteMyHub(hubID: String!): Boolean! @authorized

  # Gitops
  gitopsNotifer(clusterInfo: ClusterIdentity!, workflowID: String!): String!

  enableGitOps(config: GitConfig!): Boolean! @authorized

  disableGitOps(projectID: String!): Boolean! @authorized

  updateGitOps(config: GitConfig!): Boolean! @authorized

  # Analytics
  createDataSource(datasource: DSInput): DSResponse @authorized

  createDashBoard(dashboard: CreateDBInput): ListDashboardResponse! @authorized

  updateDataSource(datasource: DSInput!): DSResponse! @authorized

  updateDashboard(
    dashboard: UpdateDBInput!
    chaosQueryUpdate: Boolean!
  ): String! @authorized

  updatePanel(panelInput: [Panel]): String! @authorized

  deleteDashboard(dbID: String): Boolean! @authorized

  deleteDataSource(input: DeleteDSInput!): Boolean! @authorized

  # Manifest Template
  createManifestTemplate(templateInput: TemplateInput): ManifestTemplate!
    @authorized

  deleteManifestTemplate(templateID: String!): Boolean! @authorized

  #Image Registry Mutations
  createImageRegistry(
    projectID: String!
    imageRegistryInfo: ImageRegistryInput!
  ): ImageRegistryResponse! @authorized

  updateImageRegistry(
    imageRegistryID: String!
    projectID: String!
    imageRegistryInfo: ImageRegistryInput!
  ): ImageRegistryResponse! @authorized

  deleteImageRegistry(imageRegistryID: String!, projectID: String!): String!
    @authorized
}

type Subscription {
  #It is used to listen cluster events from the graphql server
  clusterEventListener(projectID: String!): ClusterEvent! @authorized

  workflowEventListener(projectID: String!): WorkflowRun! @authorized

  getPodLog(podDetails: PodLogRequest!): PodLogResponse! @authorized

  #It is used to listen cluster operation request from the graphql server
  clusterConnect(clusterInfo: ClusterIdentity!): ClusterAction!

  getKubeObject(kubeObjectRequest: KubeObjectRequest!): KubeObjectResponse!
    @authorized

  viewDashboard(
    dashboardID: String
    promQueries: [PromQueryInput!]!
    dashboardQueryMap: [QueryMapForPanelGroup!]!
    dataVariables: DataVars!
  ): DashboardPromResponse! @authorized
}
