# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @authorized on FIELD_DEFINITION

type Cluster {
  clusterID: ID!
  projectID: ID!
  clusterName: String!
  description: String
  platformName: String!
  accessKey: String!
  isRegistered: Boolean!
  isClusterConfirmed: Boolean!
  isActive: Boolean!
  updatedAt: String!
  createdAt: String!
  clusterType: String!
  noOfSchedules: Int
  noOfWorkflows: Int
  token: String!
  agentNamespace: String
  serviceAccount: String
  agentScope: String!
  agentNsExists: Boolean
  agentSaExists: Boolean
  lastWorkflowTimestamp: String!
  startTime: String!
  version: String!
}

"""
Defines the details for the new cluster being connected
"""
input ClusterInput {
  """ Name of the cluster """
  clusterName: String!
  """ Description of the cluster """
  description: String
  """ Cluster Platform Name eg. GKE,AWS, Others """
  platformName: String!
  """ Project ID the cluster is being connected to """
  projectID: ID!
  """ Cluster type : Internal or External """
  clusterType: String!
  """ Namespace where the cluster agent is bein installed """
  agentNamespace: String
  """ Name of service account used by cluster agent """
  serviceAccount: String
  """ Scope of the cluster agent : ns or cluster """
  agentScope: String!
  """ Bool value indicating whether agent ns used already exists on cluster or not """
  agentNsExists: Boolean
  """ Bool value indicating whether service account used already exists on cluster or not """
  agentSaExists: Boolean
  """ Bool value indicating whether agent will skip ssl checks or not """
  skipSsl: Boolean
  """ Node selectors used by cluster agent """
  nodeSelector: String
  """ Node tolerations used by cluster agent """
  tolerations: [Toleration]
}

input Toleration {
  tolerationSeconds: Int
  key: String
  operator: String
  effect: String
  value: String
}

type ClusterEvent {
  eventID: ID!
  eventType: String!
  eventName: String!
  description: String!
  cluster: Cluster!
}

type ActionPayload {
  requestType: String!
  k8sManifest: String!
  namespace: String!
  externalData: String
}

type ClusterAction {
  projectID: ID!
  action: ActionPayload!
}

input ClusterEventInput {
  eventName: String!
  description: String!
  clusterID: String!
  accessKey: String!
}

input ClusterIdentity {
  clusterID: String!
  accessKey: String!
  version: String!
}

type ClusterConfirmResponse {
  isClusterConfirmed: Boolean!
  newAccessKey: String
  clusterID: String
}

input WeightagesInput {
  experimentName: String!
  weightage: Int!
}

input chaosWorkFlowInput {
  workflowID: String
  workflowManifest: String!
  cronSyntax: String!
  workflowName: String!
  workflowDescription: String!
  weightages: [WeightagesInput!]!
  isCustomWorkflow: Boolean!
  projectID: ID!
  clusterID: ID!
}

type ChaosWorkFlowResponse {
  workflowID: String!
  cronSyntax: String!
  workflowName: String!
  workflowDescription: String!
  isCustomWorkflow: Boolean!
}

input WorkflowRunInput {
  workflowID: ID!
  workflowRunID: ID!
  workflowName: String!
  executionData: String!
  clusterID: ClusterIdentity!
  completed: Boolean!
  isRemoved: Boolean
}

type PodLogResponse {
  workflowRunID: ID!
  podName: String!
  podType: String!
  log: String!
}

input PodLog {
  clusterID: ClusterIdentity!
  requestID: ID!
  workflowRunID: ID!
  podName: String!
  podType: String!
  log: String!
}

input PodLogRequest {
  clusterID: ID!
  workflowRunID: ID!
  podName: String!
  podNamespace: String!
  podType: String!
  expPod: String
  runnerPod: String
  chaosNamespace: String
}

""" Response received for registering a new cluster """
type ClusterRegResponse {
  """ Token used to verify and retrieve the cluster agent manifest """
  token: String!
  """ Unique ID for the newly registered cluster """
  clusterID: String!
  """ Cluster name as sent in request """
  clusterName: String!
}

type SSHKey {
  publicKey: String!
  privateKey: String!
}

input GitConfig {
  projectID: String!
  branch: String!
  repoURL: String!
  authType: AuthType!
  token: String
  userName: String
  password: String
  sshPrivateKey: String
}
type GitConfigResponse {
  enabled: Boolean!
  projectID: String!
  branch: String
  repoURL: String
  authType: AuthType
  token: String
  userName: String
  password: String
  sshPrivateKey: String
}

type ManifestTemplate {
  templateID: ID!
  manifest: String!
  templateName: String!
  templateDescription: String!
  projectID: String!
  projectName: String!
  createdAt: String!
  isRemoved: Boolean!
  isCustomWorkflow: Boolean!
}

input TemplateInput {
  manifest: String!
  templateName: String!
  templateDescription: String!
  projectID: String!
  isCustomWorkflow: Boolean!
}

type KubeObjectResponse {
  clusterID: ID!
  kubeObj: String!
}

input KubeObjectData {
  requestID: ID!
  clusterID: ClusterIdentity!
  kubeObj: String!
}

input KubeObjectRequest {
  clusterID: ID!
  objectType: String!
  kubeObjRequest: KubeGVRRequest!
}

input KubeGVRRequest {
  group: String!
  version: String!
  resource: String!
}

type Query {
  getWorkflowRuns(
    workflowRunsInput: GetWorkflowRunsInput!
  ): GetWorkflowsOutput! @authorized

  getCluster(projectID: String!, clusterType: String): [Cluster!]! @authorized

  # Query to fetch manifest
  getManifest(
    projectID: String!
    clusterID: String!
    accessKey: String!
  ): String! @authorized

  # Query to fetch agent details based on projectID and agent_name
  getAgentDetails(clusterID: String!, projectID: String!): Cluster! @authorized

  # Query to fetch workflow data for heatmap
  getHeatmapData(
    projectID: String!
    workflowID: String!
    year: Int!
  ): [HeatmapData]! @authorized

  getWorkflowStats(
    projectID: ID!
    filter: TimeFrequency!
    showWorkflowRuns: Boolean!
  ): [WorkflowStats]! @authorized

  getWorkflowRunStats(
    workflowRunStatsRequest: WorkflowRunStatsRequest!
  ): WorkflowRunStatsResponse! @authorized

  listWorkflow(workflowInput: ListWorkflowsInput!): ListWorkflowsOutput!
    @authorized

  getCharts(hubName: String!, projectID: String!): [Chart!]! @authorized

  getHubExperiment(experimentInput: ExperimentInput!): Chart! @authorized

  getHubStatus(projectID: String!): [MyHubStatus]! @authorized

  getYAMLData(experimentInput: ExperimentInput!): String!

  getPredefinedWorkflowList(hubName: String!, projectID: String!): [String!]!

  getPredefinedExperimentYAML(experimentInput: ExperimentInput!): String!

  listDataSource(projectID: String!): [DSResponse]! @authorized

  getPromQuery(query: PromInput): PromResponse! @authorized

  getPromLabelNamesAndValues(series: PromSeriesInput): PromSeriesResponse!
    @authorized

  getPromSeriesList(dsDetails: DsDetails): PromSeriesListResponse! @authorized

  listDashboard(
    projectID: String!
    clusterID: String
    dbID: String
  ): [ListDashboardResponse] @authorized

  portalDashboardData(
    projectID: String!
    hubName: String!
  ): [PortalDashboardData!]! @authorized

  # Git Ops
  getGitOpsDetails(projectID: String!): GitConfigResponse! @authorized

  # Manifest Template
  listManifestTemplate(projectID: String!): [ManifestTemplate]! @authorized

  getTemplateManifestByID(templateID: String!): ManifestTemplate! @authorized

  #Image Registry Queries
  listImageRegistry(projectID: String!): [ImageRegistryResponse!] @authorized

  getImageRegistry(
    imageRegistryID: String!
    projectID: String!
  ): ImageRegistryResponse! @authorized

  usageQuery(query: UsageQuery!): UsageData! @authorized
}

type Mutation {
  """ Registers a new cluster for a user in a specified project """
  userClusterReg(
    """ Details for the cluster being registered """
    clusterInput: ClusterInput!
  ): ClusterRegResponse! @authorized

  ## Workflow APIs
  # It is used to create chaosworkflow
  createChaosWorkFlow(input: chaosWorkFlowInput!): ChaosWorkFlowResponse!
    @authorized

  reRunChaosWorkFlow(workflowID: String!): String! @authorized

  # removes workflow from cluster and db
  deleteChaosWorkflow(workflowID: String, workflowRunID: String): Boolean!
    @authorized

  # removes workflow run from the cluster only
  terminateChaosWorkflow(workflowID: String, workflowRunID: String): Boolean!
    @authorized

  syncWorkflow(workflowID: String!, workflowRunID: String!): Boolean!
    @authorized

  #It is used to confirm the subscriber registration
  clusterConfirm(identity: ClusterIdentity!): ClusterConfirmResponse!

  #It is used to send cluster related events from the subscriber
  newClusterEvent(clusterEvent: ClusterEventInput!): String!

  chaosWorkflowRun(workflowData: WorkflowRunInput!): String!

  podLog(log: PodLog!): String!

  kubeObj(kubeData: KubeObjectData!): String!

  addMyHub(myhubInput: CreateMyHub!, projectID: String!): MyHub! @authorized

  saveMyHub(myhubInput: CreateMyHub!, projectID: String!): MyHub! @authorized

  syncHub(id: ID!): [MyHubStatus!]! @authorized

  updateChaosWorkflow(input: chaosWorkFlowInput): ChaosWorkFlowResponse!
    @authorized

  deleteClusterReg(clusterID: String!): String! @authorized

  generaterSSHKey: SSHKey! @authorized

  updateMyHub(myhubInput: UpdateMyHub!, projectID: String!): MyHub! @authorized

  deleteMyHub(hubID: String!): Boolean! @authorized

  # Gitops
  gitopsNotifer(clusterInfo: ClusterIdentity!, workflowID: String!): String!

  enableGitOps(config: GitConfig!): Boolean! @authorized

  disableGitOps(projectID: String!): Boolean! @authorized

  updateGitOps(config: GitConfig!): Boolean! @authorized

  # Analytics
  createDataSource(datasource: DSInput): DSResponse @authorized

  createDashBoard(dashboard: CreateDBInput): ListDashboardResponse! @authorized

  updateDataSource(datasource: DSInput!): DSResponse! @authorized

  updateDashboard(
    dashboard: UpdateDBInput!
    chaosQueryUpdate: Boolean!
  ): String! @authorized

  updatePanel(panelInput: [Panel]): String! @authorized

  deleteDashboard(dbID: String): Boolean! @authorized

  deleteDataSource(input: DeleteDSInput!): Boolean! @authorized

  # Manifest Template
  createManifestTemplate(templateInput: TemplateInput): ManifestTemplate!
    @authorized

  deleteManifestTemplate(templateID: String!): Boolean! @authorized

  #Image Registry Mutations
  createImageRegistry(
    projectID: String!
    imageRegistryInfo: ImageRegistryInput!
  ): ImageRegistryResponse! @authorized

  updateImageRegistry(
    imageRegistryID: String!
    projectID: String!
    imageRegistryInfo: ImageRegistryInput!
  ): ImageRegistryResponse! @authorized

  deleteImageRegistry(imageRegistryID: String!, projectID: String!): String!
    @authorized
}

type Subscription {
  #It is used to listen cluster events from the graphql server
  clusterEventListener(projectID: String!): ClusterEvent! @authorized

  workflowEventListener(projectID: String!): WorkflowRun! @authorized

  getPodLog(podDetails: PodLogRequest!): PodLogResponse! @authorized

  #It is used to listen cluster operation request from the graphql server
  clusterConnect(clusterInfo: ClusterIdentity!): ClusterAction!

  getKubeObject(kubeObjectRequest: KubeObjectRequest!): KubeObjectResponse!
    @authorized

  viewDashboard(
    dashboardID: String
    promQueries: [PromQueryInput!]!
    dashboardQueryMap: [QueryMapForPanelGroup!]!
    dataVariables: DataVars!
  ): DashboardPromResponse! @authorized
}
