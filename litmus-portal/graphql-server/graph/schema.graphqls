# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @authorized on FIELD_DEFINITION

type Query {
  getWorkflowRuns(
    workflowRunsInput: GetWorkflowRunsInput!
  ): GetWorkflowsOutput! @authorized

  getCluster(projectID: String!, clusterType: String): [Cluster!]! @authorized

  # Query to fetch manifest
  getManifest(
    projectID: String!
    clusterID: String!
    accessKey: String!
  ): String! @authorized

  # Query to fetch agent details based on projectID and agent_name
  getAgentDetails(clusterID: String!, projectID: String!): Cluster! @authorized

  # Query to fetch workflow data for heatmap
  getHeatmapData(
    projectID: String!
    workflowID: String!
    year: Int!
  ): [HeatmapData]! @authorized

  getWorkflowStats(
    projectID: ID!
    filter: TimeFrequency!
    showWorkflowRuns: Boolean!
  ): [WorkflowStats]! @authorized

  getWorkflowRunStats(
    workflowRunStatsRequest: WorkflowRunStatsRequest!
  ): WorkflowRunStatsResponse! @authorized

  listWorkflow(workflowInput: ListWorkflowsInput!): ListWorkflowsOutput!
    @authorized

  getCharts(hubName: String!, projectID: String!): [Chart!]! @authorized

  getHubExperiment(experimentInput: ExperimentInput!): Chart! @authorized

  getHubStatus(projectID: String!): [MyHubStatus]! @authorized

  getYAMLData(experimentInput: ExperimentInput!): String! @authorized

  getPredefinedWorkflowList(hubName: String!, projectID: String!): [String!]!
    @authorized

  getPredefinedExperimentYAML(experimentInput: ExperimentInput!): String!
    @authorized

  listDataSource(projectID: String!): [DSResponse]! @authorized

  getPromQuery(query: PromInput): PromResponse! @authorized

  getPromLabelNamesAndValues(series: PromSeriesInput): PromSeriesResponse!
    @authorized

  getPromSeriesList(dsDetails: DsDetails): PromSeriesListResponse! @authorized

  listDashboard(
    projectID: String!
    clusterID: String
    dbID: String
  ): [ListDashboardResponse] @authorized

  portalDashboardData(
    projectID: String!
    hubName: String!
  ): [PortalDashboardData!]! @authorized

  # Git Ops
  getGitOpsDetails(projectID: String!): GitConfigResponse! @authorized

  # Manifest Template
  listManifestTemplate(projectID: String!): [ManifestTemplate]! @authorized

  GetTemplateManifestByID(
    projectID: String!
    templateID: String!
  ): ManifestTemplate! @authorized

  # Image Registry Queries
  listImageRegistry(projectID: String!): [ImageRegistryResponse!] @authorized

  getImageRegistry(
    imageRegistryID: String!
    projectID: String!
  ): ImageRegistryResponse! @authorized

  usageQuery(query: UsageQuery!): UsageData! @authorized
}

type Mutation {
  """
  Registers a new cluster for a user in a specified project
  """
  userClusterReg(
    """
    Details for the cluster being registered
    """
    clusterInput: ClusterInput!
  ): ClusterRegResponse! @authorized

  ## Workflow APIs
  # It is used to create chaosworkflow
  createChaosWorkFlow(input: ChaosWorkFlowInput!): ChaosWorkFlowResponse!
    @authorized

  reRunChaosWorkFlow(projectID: String!, workflowID: String!): String!
    @authorized

  # removes workflow from cluster and db
  deleteChaosWorkflow(
    projectID: String!
    workflowID: String
    workflowRunID: String
  ): Boolean! @authorized

  # removes workflow run from the cluster only
  terminateChaosWorkflow(
    projectID: String!
    workflowID: String
    workflowRunID: String
  ): Boolean! @authorized

  syncWorkflow(
    projectID: String!
    workflowID: String!
    workflowRunID: String!
  ): Boolean! @authorized

  # It is used to confirm the subscriber registration
  # authorized directive not required
  clusterConfirm(identity: ClusterIdentity!): ClusterConfirmResponse!

  # It is used to send cluster related events from the subscriber
  # authorized directive not required
  newClusterEvent(clusterEvent: ClusterEventInput!): String!

  # authorized directive not required
  # authorized directive not required
  chaosWorkflowRun(workflowData: WorkflowRunInput!): String!

  # authorized directive not required
  podLog(log: PodLog!): String!

  # authorized directive not required
  kubeObj(kubeData: KubeObjectData!): String!

  addMyHub(myhubInput: CreateMyHub!, projectID: String!): MyHub! @authorized

  saveMyHub(myhubInput: CreateMyHub!, projectID: String!): MyHub! @authorized

  syncHub(id: ID!, projectID: String!): [MyHubStatus!]! @authorized

  updateChaosWorkflow(input: ChaosWorkFlowInput): ChaosWorkFlowResponse!
    @authorized

  deleteClusters(projectID: String!, clusterIDs: [String]!): String! @authorized

  generaterSSHKey: SSHKey! @authorized

  updateMyHub(myhubInput: UpdateMyHub!, projectID: String!): MyHub! @authorized

  deleteMyHub(projectID: String!, hubID: String!): Boolean! @authorized

  # Gitops
  gitopsNotifer(clusterInfo: ClusterIdentity!, workflowID: String!): String!

  enableGitOps(config: GitConfig!): Boolean! @authorized

  disableGitOps(projectID: String!): Boolean! @authorized

  updateGitOps(config: GitConfig!): Boolean! @authorized

  # Analytics
  createDataSource(datasource: DSInput): DSResponse @authorized

  createDashBoard(dashboard: CreateDBInput): ListDashboardResponse! @authorized

  updateDataSource(datasource: DSInput!): DSResponse! @authorized

  updateDashboard(
    projectID: String!
    dashboard: UpdateDBInput!
    chaosQueryUpdate: Boolean!
  ): String! @authorized

  updatePanel(panelInput: [Panel]): String! @authorized

  deleteDashboard(projectID: String!, dbID: String): Boolean! @authorized

  deleteDataSource(projectID: String!, input: DeleteDSInput!): Boolean!
    @authorized

  # Manifest Template
  createManifestTemplate(templateInput: TemplateInput): ManifestTemplate!
    @authorized

  deleteManifestTemplate(projectID: String!, templateID: String!): Boolean!
    @authorized

  # Image Registry Mutations
  createImageRegistry(
    projectID: String!
    imageRegistryInfo: ImageRegistryInput!
  ): ImageRegistryResponse! @authorized

  updateImageRegistry(
    imageRegistryID: String!
    projectID: String!
    imageRegistryInfo: ImageRegistryInput!
  ): ImageRegistryResponse! @authorized

  deleteImageRegistry(imageRegistryID: String!, projectID: String!): String!
    @authorized
}

type Subscription {
  # It is used to listen cluster events from the graphql server
  clusterEventListener(projectID: String!): ClusterEvent! @authorized

  workflowEventListener(projectID: String!): WorkflowRun! @authorized

  getPodLog(podDetails: PodLogRequest!): PodLogResponse! @authorized

  # It is used to listen cluster operation request from the graphql server
  # authorized directive not required
  clusterConnect(clusterInfo: ClusterIdentity!): ClusterAction!

  getKubeObject(kubeObjectRequest: KubeObjectRequest!): KubeObjectResponse!
    @authorized

  viewDashboard(
    dashboardID: String
    promQueries: [PromQueryInput!]!
    dashboardQueryMap: [QueryMapForPanelGroup!]!
    dataVariables: DataVars!
  ): DashboardPromResponse! @authorized
}
