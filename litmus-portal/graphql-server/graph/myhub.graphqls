enum AuthType {
	BASIC
	NONE
	SSH
	TOKEN
}

type MyHub {
	id: ID!
	repoURL: String!
	repoBranch: String!
	projectID: String!
	hubName: String!
	isPrivate: Boolean!
	# Auth Types-
	#  token: Token based authentication
	#  basic: Username/Password based authentication
	#  ssh: SSH based authentication
	authType: AuthType!
	token: String
	userName: String
	password: String
	sshPrivateKey: String
	isRemoved: Boolean!
	createdAt: String!
	updatedAt: String!
	lastSyncedAt: String!
}

#type Charts {
#	charts: [Chart!]!
#}

type Chart {
	apiVersion: String!
	kind: String!
	metadata: Metadata!
	spec: Spec!
	packageInfo: PackageInformation!
}

type Maintainer {
	name: String!
	email: String!
}

type Link {
	name: String!
	url: String!
}

type Metadata {
	name: String!
	version: String!
	annotations: Annotation!
}

type Annotation {
	categories: String!
	vendor: String!
	createdAt: String!
	repository: String!
	support: String!
	chartDescription: String!
}

type Spec {
	displayName: String!
	categoryDescription: String!
	keywords: [String!]!
	maturity: String!
	maintainers: [Maintainer!]!
	minKubeVersion: String!
	provider: String!
	links: [Link!]!
	experiments: [String!]!
	chaosExpCRDLink: String!
	platforms: [String!]!
	chaosType: String
}

#type Provider {
#	name: String!
#}

type PackageInformation {
	packageName: String!
	experiments: [Experiments!]!
}

type Experiments {
	name: String!
	cSV: String!
	desc: String!
}

type MyHubStatus {
	id: ID!
	repoURL: String!
	repoBranch: String!
	isAvailable: Boolean!
	totalExp: String!
	hubName: String!
	isPrivate: Boolean!
	# Auth Types-
	#  token: Token based authentication
	#  basic: Username/Password based authentication
	#  ssh: SSH based authentication
	authType: AuthType!
	token: String
	userName: String
	password: String
	isRemoved: Boolean!
	sshPrivateKey: String
	sshPublicKey: String
	lastSyncedAt: String!
}

input CreateMyHub {
	hubName: String!
	repoURL: String!
	repoBranch: String!
	isPrivate: Boolean!
	# Auth Types-
	#  token: Token based authentication
	#  basic: Username/Password based authentication
	#  ssh: SSH based authentication
	authType: AuthType!
	token: String
	userName: String
	password: String
	sshPrivateKey: String
	sshPublicKey: String
}

input ExperimentInput {
	projectID: String!
	chartName: String!
	experimentName: String!
	hubName: String!
	fileType: String
}

input CloningInput {
	hubName: String!
	projectID: String!
	repoBranch: String!
	repoURL: String!
	isPrivate: Boolean!
	# Auth Types-
	#  token: Token based authentication
	#  basic: Username/Password based authentication
	#  ssh: SSH based authentication
	authType: AuthType!
	token: String
	userName: String
	password: String
	sshPrivateKey: String
}

input UpdateMyHub {
	id: String!
	hubName: String!
	repoURL: String!
	repoBranch: String!
	isPrivate: Boolean!
	authType: AuthType!
	token: String
	userName: String
	password: String
	sshPrivateKey: String
	sshPublicKey: String
}
