// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ActionPayload struct {
	RequestType  string  `json:"requestType"`
	K8sManifest  string  `json:"k8sManifest"`
	Namespace    string  `json:"namespace"`
	ExternalData *string `json:"externalData"`
}

type AgentStat struct {
	Ns      int `json:"ns"`
	Cluster int `json:"cluster"`
	Total   int `json:"total"`
	Active  int `json:"active"`
}

type Annotation struct {
	Categories       string `json:"categories"`
	Vendor           string `json:"vendor"`
	CreatedAt        string `json:"createdAt"`
	Repository       string `json:"repository"`
	Support          string `json:"support"`
	ChartDescription string `json:"chartDescription"`
}

type AnnotationsPromResponse struct {
	QueryID      string                         `json:"queryID"`
	Legends      []*string                      `json:"legends"`
	Tsvs         [][]*AnnotationsTimeStampValue `json:"tsvs"`
	SubDataArray [][]*SubData                   `json:"subDataArray"`
}

type AnnotationsTimeStampValue struct {
	Date  *float64 `json:"date"`
	Value *int     `json:"value"`
}

type ApplicationMetadata struct {
	Namespace    string      `json:"namespace"`
	Applications []*Resource `json:"applications"`
}

type ApplicationMetadataResponse struct {
	Namespace    string              `json:"namespace"`
	Applications []*ResourceResponse `json:"applications"`
}

type ChaosWorkFlowResponse struct {
	WorkflowID          string `json:"workflowID"`
	CronSyntax          string `json:"cronSyntax"`
	WorkflowName        string `json:"workflowName"`
	WorkflowDescription string `json:"workflowDescription"`
	IsCustomWorkflow    bool   `json:"isCustomWorkflow"`
}

type Chart struct {
	APIVersion  string              `json:"apiVersion"`
	Kind        string              `json:"kind"`
	Metadata    *Metadata           `json:"metadata"`
	Spec        *Spec               `json:"spec"`
	PackageInfo *PackageInformation `json:"packageInfo"`
}

type CloningInput struct {
	HubName       string   `json:"hubName"`
	ProjectID     string   `json:"projectID"`
	RepoBranch    string   `json:"repoBranch"`
	RepoURL       string   `json:"repoURL"`
	IsPrivate     bool     `json:"isPrivate"`
	AuthType      AuthType `json:"authType"`
	Token         *string  `json:"token"`
	UserName      *string  `json:"userName"`
	Password      *string  `json:"password"`
	SSHPrivateKey *string  `json:"sshPrivateKey"`
}

type Cluster struct {
	ClusterID             string  `json:"clusterID"`
	ProjectID             string  `json:"projectID"`
	ClusterName           string  `json:"clusterName"`
	Description           *string `json:"description"`
	PlatformName          string  `json:"platformName"`
	AccessKey             string  `json:"accessKey"`
	IsRegistered          bool    `json:"isRegistered"`
	IsClusterConfirmed    bool    `json:"isClusterConfirmed"`
	IsActive              bool    `json:"isActive"`
	UpdatedAt             string  `json:"updatedAt"`
	CreatedAt             string  `json:"createdAt"`
	ClusterType           string  `json:"clusterType"`
	NoOfSchedules         *int    `json:"noOfSchedules"`
	NoOfWorkflows         *int    `json:"noOfWorkflows"`
	Token                 string  `json:"token"`
	AgentNamespace        *string `json:"agentNamespace"`
	ServiceAccount        *string `json:"serviceAccount"`
	AgentScope            string  `json:"agentScope"`
	AgentNsExists         *bool   `json:"agentNsExists"`
	AgentSaExists         *bool   `json:"agentSaExists"`
	LastWorkflowTimestamp string  `json:"lastWorkflowTimestamp"`
	StartTime             string  `json:"startTime"`
	Version               string  `json:"version"`
}

type ClusterAction struct {
	ProjectID string         `json:"projectID"`
	Action    *ActionPayload `json:"action"`
}

type ClusterConfirmResponse struct {
	IsClusterConfirmed bool    `json:"isClusterConfirmed"`
	NewAccessKey       *string `json:"newAccessKey"`
	ClusterID          *string `json:"clusterID"`
}

type ClusterEvent struct {
	EventID     string   `json:"eventID"`
	EventType   string   `json:"eventType"`
	EventName   string   `json:"eventName"`
	Description string   `json:"description"`
	Cluster     *Cluster `json:"cluster"`
}

type ClusterEventInput struct {
	EventName   string `json:"eventName"`
	Description string `json:"description"`
	ClusterID   string `json:"clusterID"`
	AccessKey   string `json:"accessKey"`
}

type ClusterIdentity struct {
	ClusterID string `json:"clusterID"`
	AccessKey string `json:"accessKey"`
	Version   string `json:"version"`
}

// Defines the details for the new cluster being connected
type ClusterInput struct {
	//  Name of the cluster
	ClusterName string `json:"clusterName"`
	//  Description of the cluster
	Description *string `json:"description"`
	//  Cluster Platform Name eg. GKE,AWS, Others
	PlatformName string `json:"platformName"`
	//  Project ID the cluster is being connected to
	ProjectID string `json:"projectID"`
	//  Cluster type : Internal or External
	ClusterType string `json:"clusterType"`
	//  Namespace where the cluster agent is bein installed
	AgentNamespace *string `json:"agentNamespace"`
	//  Name of service account used by cluster agent
	ServiceAccount *string `json:"serviceAccount"`
	//  Scope of the cluster agent : ns or cluster
	AgentScope string `json:"agentScope"`
	//  Bool value indicating whether agent ns used already exists on cluster or not
	AgentNsExists *bool `json:"agentNsExists"`
	//  Bool value indicating whether service account used already exists on cluster or not
	AgentSaExists *bool `json:"agentSaExists"`
	//  Bool value indicating whether agent will skip ssl checks or not
	SkipSsl *bool `json:"skipSsl"`
	//  Node selectors used by cluster agent
	NodeSelector *string `json:"nodeSelector"`
	//  Node tolerations used by cluster agent
	Tolerations []*Toleration `json:"tolerations"`
}

//  Response received for registering a new cluster
type ClusterRegResponse struct {
	//  Token used to verify and retrieve the cluster agent manifest
	Token string `json:"token"`
	//  Unique ID for the newly registered cluster
	ClusterID string `json:"clusterID"`
	//  Cluster name as sent in request
	ClusterName string `json:"clusterName"`
}

type CreateDBInput struct {
	DsID                      string                 `json:"dsID"`
	DbName                    string                 `json:"dbName"`
	DbTypeName                string                 `json:"dbTypeName"`
	DbTypeID                  string                 `json:"dbTypeID"`
	DbInformation             *string                `json:"dbInformation"`
	ChaosEventQueryTemplate   string                 `json:"chaosEventQueryTemplate"`
	ChaosVerdictQueryTemplate string                 `json:"chaosVerdictQueryTemplate"`
	ApplicationMetadataMap    []*ApplicationMetadata `json:"applicationMetadataMap"`
	PanelGroups               []*PanelGroup          `json:"panelGroups"`
	EndTime                   string                 `json:"endTime"`
	StartTime                 string                 `json:"startTime"`
	ProjectID                 string                 `json:"projectID"`
	ClusterID                 string                 `json:"clusterID"`
	RefreshRate               string                 `json:"refreshRate"`
}

type CreateMyHub struct {
	HubName       string   `json:"hubName"`
	RepoURL       string   `json:"repoURL"`
	RepoBranch    string   `json:"repoBranch"`
	IsPrivate     bool     `json:"isPrivate"`
	AuthType      AuthType `json:"authType"`
	Token         *string  `json:"token"`
	UserName      *string  `json:"userName"`
	Password      *string  `json:"password"`
	SSHPrivateKey *string  `json:"sshPrivateKey"`
	SSHPublicKey  *string  `json:"sshPublicKey"`
}

type DSInput struct {
	DsID              *string `json:"dsID"`
	DsName            string  `json:"dsName"`
	DsType            string  `json:"dsType"`
	DsURL             string  `json:"dsURL"`
	AccessType        string  `json:"accessType"`
	AuthType          string  `json:"authType"`
	BasicAuthUsername *string `json:"basicAuthUsername"`
	BasicAuthPassword *string `json:"basicAuthPassword"`
	ScrapeInterval    int     `json:"scrapeInterval"`
	QueryTimeout      int     `json:"queryTimeout"`
	HTTPMethod        string  `json:"httpMethod"`
	ProjectID         *string `json:"projectID"`
}

type DSResponse struct {
	DsID              *string `json:"dsID"`
	DsName            *string `json:"dsName"`
	DsType            *string `json:"dsType"`
	DsURL             *string `json:"dsURL"`
	AccessType        *string `json:"accessType"`
	AuthType          *string `json:"authType"`
	BasicAuthUsername *string `json:"basicAuthUsername"`
	BasicAuthPassword *string `json:"basicAuthPassword"`
	ScrapeInterval    *int    `json:"scrapeInterval"`
	QueryTimeout      *int    `json:"queryTimeout"`
	HTTPMethod        *string `json:"httpMethod"`
	ProjectID         string  `json:"projectID"`
	HealthStatus      string  `json:"healthStatus"`
	CreatedAt         *string `json:"createdAt"`
	UpdatedAt         *string `json:"updatedAt"`
}

type DashboardPromResponse struct {
	DashboardMetricsResponse []*MetricDataForPanelGroup `json:"dashboardMetricsResponse"`
	AnnotationsResponse      []*AnnotationsPromResponse `json:"annotationsResponse"`
}

type DataVars struct {
	URL             string `json:"url"`
	Start           string `json:"start"`
	End             string `json:"end"`
	RelativeTime    int    `json:"relativeTime"`
	RefreshInterval int    `json:"refreshInterval"`
}

type DateRange struct {
	StartDate string  `json:"startDate"`
	EndDate   *string `json:"endDate"`
}

type DeleteDSInput struct {
	ForceDelete bool   `json:"forceDelete"`
	DsID        string `json:"dsID"`
}

type DsDetails struct {
	URL   string `json:"url"`
	Start string `json:"start"`
	End   string `json:"end"`
}

type ExperimentInput struct {
	ProjectID      string  `json:"projectID"`
	ChartName      string  `json:"chartName"`
	ExperimentName string  `json:"experimentName"`
	HubName        string  `json:"hubName"`
	FileType       *string `json:"fileType"`
}

type Experiments struct {
	Name string `json:"name"`
	CSv  string `json:"cSV"`
	Desc string `json:"desc"`
}

type GetWorkflowRunsInput struct {
	ProjectID      string                  `json:"projectID"`
	WorkflowRunIDs []*string               `json:"workflowRunIDs"`
	WorkflowIDs    []*string               `json:"workflowIDs"`
	Pagination     *Pagination             `json:"pagination"`
	Sort           *WorkflowRunSortInput   `json:"sort"`
	Filter         *WorkflowRunFilterInput `json:"filter"`
}

type GetWorkflowsOutput struct {
	TotalNoOfWorkflowRuns int            `json:"totalNoOfWorkflowRuns"`
	WorkflowRuns          []*WorkflowRun `json:"workflowRuns"`
}

type GitConfig struct {
	ProjectID     string   `json:"projectID"`
	Branch        string   `json:"branch"`
	RepoURL       string   `json:"repoURL"`
	AuthType      AuthType `json:"authType"`
	Token         *string  `json:"token"`
	UserName      *string  `json:"userName"`
	Password      *string  `json:"password"`
	SSHPrivateKey *string  `json:"sshPrivateKey"`
}

type GitConfigResponse struct {
	Enabled       bool      `json:"enabled"`
	ProjectID     string    `json:"projectID"`
	Branch        *string   `json:"branch"`
	RepoURL       *string   `json:"repoURL"`
	AuthType      *AuthType `json:"authType"`
	Token         *string   `json:"token"`
	UserName      *string   `json:"userName"`
	Password      *string   `json:"password"`
	SSHPrivateKey *string   `json:"sshPrivateKey"`
}

type HeatmapData struct {
	Bins []*WorkflowRunsData `json:"bins"`
}

type ImageRegistry struct {
	IsDefault         *bool   `json:"isDefault"`
	ImageRegistryName string  `json:"imageRegistryName"`
	ImageRepoName     string  `json:"imageRepoName"`
	ImageRegistryType string  `json:"imageRegistryType"`
	SecretName        *string `json:"secretName"`
	SecretNamespace   *string `json:"secretNamespace"`
	EnableRegistry    *bool   `json:"enableRegistry"`
}

type ImageRegistryInput struct {
	IsDefault         bool    `json:"isDefault"`
	ImageRegistryName string  `json:"imageRegistryName"`
	ImageRepoName     string  `json:"imageRepoName"`
	ImageRegistryType string  `json:"imageRegistryType"`
	SecretName        *string `json:"secretName"`
	SecretNamespace   *string `json:"secretNamespace"`
	EnableRegistry    *bool   `json:"enableRegistry"`
}

type ImageRegistryResponse struct {
	IsDefault         bool           `json:"isDefault"`
	ImageRegistryInfo *ImageRegistry `json:"imageRegistryInfo"`
	ImageRegistryID   string         `json:"imageRegistryID"`
	ProjectID         string         `json:"projectID"`
	UpdatedAt         *string        `json:"updatedAt"`
	CreatedAt         *string        `json:"createdAt"`
	IsRemoved         *bool          `json:"isRemoved"`
}

type KubeGVRRequest struct {
	Group    string `json:"group"`
	Version  string `json:"version"`
	Resource string `json:"resource"`
}

type KubeObjectData struct {
	RequestID string           `json:"requestID"`
	ClusterID *ClusterIdentity `json:"clusterID"`
	KubeObj   string           `json:"kubeObj"`
}

type KubeObjectRequest struct {
	ClusterID      string          `json:"clusterID"`
	ObjectType     string          `json:"objectType"`
	KubeObjRequest *KubeGVRRequest `json:"kubeObjRequest"`
}

type KubeObjectResponse struct {
	ClusterID string `json:"clusterID"`
	KubeObj   string `json:"kubeObj"`
}

type LabelValue struct {
	Label  string    `json:"label"`
	Values []*Option `json:"values"`
}

type Link struct {
	Name string `json:"name"`
	URL  string `json:"url"`
}

type ListDashboardResponse struct {
	DsID                      string                         `json:"dsID"`
	DbID                      string                         `json:"dbID"`
	DbName                    string                         `json:"dbName"`
	DbTypeID                  string                         `json:"dbTypeID"`
	DbTypeName                string                         `json:"dbTypeName"`
	DbInformation             *string                        `json:"dbInformation"`
	ChaosEventQueryTemplate   string                         `json:"chaosEventQueryTemplate"`
	ChaosVerdictQueryTemplate string                         `json:"chaosVerdictQueryTemplate"`
	ApplicationMetadataMap    []*ApplicationMetadataResponse `json:"applicationMetadataMap"`
	ClusterName               *string                        `json:"clusterName"`
	DsName                    *string                        `json:"dsName"`
	DsType                    *string                        `json:"dsType"`
	DsURL                     *string                        `json:"dsURL"`
	DsHealthStatus            *string                        `json:"dsHealthStatus"`
	PanelGroups               []*PanelGroupResponse          `json:"panelGroups"`
	EndTime                   string                         `json:"endTime"`
	StartTime                 string                         `json:"startTime"`
	RefreshRate               string                         `json:"refreshRate"`
	ProjectID                 string                         `json:"projectID"`
	ClusterID                 string                         `json:"clusterID"`
	CreatedAt                 *string                        `json:"createdAt"`
	UpdatedAt                 *string                        `json:"updatedAt"`
	ViewedAt                  *string                        `json:"viewedAt"`
}

type ListWorkflowsInput struct {
	ProjectID   string               `json:"projectID"`
	WorkflowIDs []*string            `json:"workflowIDs"`
	Pagination  *Pagination          `json:"pagination"`
	Sort        *WorkflowSortInput   `json:"sort"`
	Filter      *WorkflowFilterInput `json:"filter"`
}

type ListWorkflowsOutput struct {
	TotalNoOfWorkflows int         `json:"totalNoOfWorkflows"`
	Workflows          []*Workflow `json:"workflows"`
}

type Maintainer struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

type ManifestTemplate struct {
	TemplateID          string `json:"templateID"`
	Manifest            string `json:"manifest"`
	TemplateName        string `json:"templateName"`
	TemplateDescription string `json:"templateDescription"`
	ProjectID           string `json:"projectID"`
	ProjectName         string `json:"projectName"`
	CreatedAt           string `json:"createdAt"`
	IsRemoved           bool   `json:"isRemoved"`
	IsCustomWorkflow    bool   `json:"isCustomWorkflow"`
}

type Metadata struct {
	Name        string      `json:"name"`
	Version     string      `json:"version"`
	Annotations *Annotation `json:"annotations"`
}

type MetricDataForPanel struct {
	PanelID              string                 `json:"panelID"`
	PanelMetricsResponse []*MetricsPromResponse `json:"panelMetricsResponse"`
}

type MetricDataForPanelGroup struct {
	PanelGroupID              string                `json:"panelGroupID"`
	PanelGroupMetricsResponse []*MetricDataForPanel `json:"panelGroupMetricsResponse"`
}

type MetricsPromResponse struct {
	QueryID string                     `json:"queryID"`
	Legends []*string                  `json:"legends"`
	Tsvs    [][]*MetricsTimeStampValue `json:"tsvs"`
}

type MetricsTimeStampValue struct {
	Date  *float64 `json:"date"`
	Value *float64 `json:"value"`
}

type MyHub struct {
	ID            string   `json:"id"`
	RepoURL       string   `json:"repoURL"`
	RepoBranch    string   `json:"repoBranch"`
	ProjectID     string   `json:"projectID"`
	HubName       string   `json:"hubName"`
	IsPrivate     bool     `json:"isPrivate"`
	AuthType      AuthType `json:"authType"`
	Token         *string  `json:"token"`
	UserName      *string  `json:"userName"`
	Password      *string  `json:"password"`
	SSHPrivateKey *string  `json:"sshPrivateKey"`
	IsRemoved     bool     `json:"isRemoved"`
	CreatedAt     string   `json:"createdAt"`
	UpdatedAt     string   `json:"updatedAt"`
	LastSyncedAt  string   `json:"lastSyncedAt"`
}

type MyHubStatus struct {
	ID            string   `json:"id"`
	RepoURL       string   `json:"repoURL"`
	RepoBranch    string   `json:"repoBranch"`
	IsAvailable   bool     `json:"isAvailable"`
	TotalExp      string   `json:"totalExp"`
	HubName       string   `json:"hubName"`
	IsPrivate     bool     `json:"isPrivate"`
	AuthType      AuthType `json:"authType"`
	Token         *string  `json:"token"`
	UserName      *string  `json:"userName"`
	Password      *string  `json:"password"`
	IsRemoved     bool     `json:"isRemoved"`
	SSHPrivateKey *string  `json:"sshPrivateKey"`
	SSHPublicKey  *string  `json:"sshPublicKey"`
	LastSyncedAt  string   `json:"lastSyncedAt"`
}

type Option struct {
	Name string `json:"name"`
}

type PackageInformation struct {
	PackageName string         `json:"packageName"`
	Experiments []*Experiments `json:"experiments"`
}

type Pagination struct {
	Page  int `json:"page"`
	Limit int `json:"limit"`
}

type Panel struct {
	PanelID      *string      `json:"panelID"`
	DbID         *string      `json:"dbID"`
	YAxisLeft    *string      `json:"yAxisLeft"`
	YAxisRight   *string      `json:"yAxisRight"`
	XAxisDown    *string      `json:"xAxisDown"`
	Unit         *string      `json:"unit"`
	PanelGroupID *string      `json:"panelGroupID"`
	CreatedAt    *string      `json:"createdAt"`
	PromQueries  []*PromQuery `json:"promQueries"`
	PanelOptions *PanelOption `json:"panelOptions"`
	PanelName    string       `json:"panelName"`
}

type PanelGroup struct {
	Panels         []*Panel `json:"panels"`
	PanelGroupName string   `json:"panelGroupName"`
}

type PanelGroupResponse struct {
	Panels         []*PanelResponse `json:"panels"`
	PanelGroupName string           `json:"panelGroupName"`
	PanelGroupID   *string          `json:"panelGroupID"`
}

type PanelOption struct {
	Points   *bool `json:"points"`
	GrIDs    *bool `json:"grIDs"`
	LeftAxis *bool `json:"leftAxis"`
}

type PanelOptionResponse struct {
	Points   *bool `json:"points"`
	GrIDs    *bool `json:"grIDs"`
	LeftAxis *bool `json:"leftAxis"`
}

type PanelResponse struct {
	PanelID      string               `json:"panelID"`
	YAxisLeft    *string              `json:"yAxisLeft"`
	YAxisRight   *string              `json:"yAxisRight"`
	XAxisDown    *string              `json:"xAxisDown"`
	Unit         *string              `json:"unit"`
	PromQueries  []*PromQueryResponse `json:"promQueries"`
	PanelOptions *PanelOptionResponse `json:"panelOptions"`
	PanelName    *string              `json:"panelName"`
	CreatedAt    *string              `json:"createdAt"`
}

type PodLog struct {
	ClusterID     *ClusterIdentity `json:"clusterID"`
	RequestID     string           `json:"requestID"`
	WorkflowRunID string           `json:"workflowRunID"`
	PodName       string           `json:"podName"`
	PodType       string           `json:"podType"`
	Log           string           `json:"log"`
}

type PodLogRequest struct {
	ClusterID      string  `json:"clusterID"`
	WorkflowRunID  string  `json:"workflowRunID"`
	PodName        string  `json:"podName"`
	PodNamespace   string  `json:"podNamespace"`
	PodType        string  `json:"podType"`
	ExpPod         *string `json:"expPod"`
	RunnerPod      *string `json:"runnerPod"`
	ChaosNamespace *string `json:"chaosNamespace"`
}

type PodLogResponse struct {
	WorkflowRunID string `json:"workflowRunID"`
	PodName       string `json:"podName"`
	PodType       string `json:"podType"`
	Log           string `json:"log"`
}

type PortalDashboardData struct {
	Name          string `json:"name"`
	DashboardData string `json:"dashboardData"`
}

type ProjectData struct {
	Workflows *WorkflowStat `json:"workflows"`
	Agents    *AgentStat    `json:"agents"`
	ProjectID string        `json:"projectId"`
}

type PromInput struct {
	Queries   []*PromQueryInput `json:"queries"`
	DsDetails *DsDetails        `json:"dsDetails"`
}

type PromQuery struct {
	QueryID       string  `json:"queryID"`
	PromQueryName *string `json:"promQueryName"`
	Legend        *string `json:"legend"`
	Resolution    *string `json:"resolution"`
	Minstep       *string `json:"minstep"`
	Line          *bool   `json:"line"`
	CloseArea     *bool   `json:"closeArea"`
}

type PromQueryInput struct {
	QueryID    string  `json:"queryID"`
	Query      string  `json:"query"`
	Legend     *string `json:"legend"`
	Resolution *string `json:"resolution"`
	Minstep    int     `json:"minstep"`
}

type PromQueryResponse struct {
	QueryID       string  `json:"queryID"`
	PromQueryName *string `json:"promQueryName"`
	Legend        *string `json:"legend"`
	Resolution    *string `json:"resolution"`
	Minstep       *string `json:"minstep"`
	Line          *bool   `json:"line"`
	CloseArea     *bool   `json:"closeArea"`
}

type PromResponse struct {
	MetricsResponse     []*MetricsPromResponse     `json:"metricsResponse"`
	AnnotationsResponse []*AnnotationsPromResponse `json:"annotationsResponse"`
}

type PromSeriesInput struct {
	Series    string     `json:"series"`
	DsDetails *DsDetails `json:"dsDetails"`
}

type PromSeriesListResponse struct {
	SeriesList []*string `json:"seriesList"`
}

type PromSeriesResponse struct {
	Series      string        `json:"series"`
	LabelValues []*LabelValue `json:"labelValues"`
}

type QueryMapForPanel struct {
	PanelID  string   `json:"panelID"`
	QueryIDs []string `json:"queryIDs"`
}

type QueryMapForPanelGroup struct {
	PanelGroupID  string              `json:"panelGroupID"`
	PanelQueryMap []*QueryMapForPanel `json:"panelQueryMap"`
}

type Resource struct {
	Kind  string    `json:"kind"`
	Names []*string `json:"names"`
}

type ResourceResponse struct {
	Kind  string    `json:"kind"`
	Names []*string `json:"names"`
}

type SSHKey struct {
	PublicKey  string `json:"publicKey"`
	PrivateKey string `json:"privateKey"`
}

type Spec struct {
	DisplayName         string        `json:"displayName"`
	CategoryDescription string        `json:"categoryDescription"`
	Keywords            []string      `json:"keywords"`
	Maturity            string        `json:"maturity"`
	Maintainers         []*Maintainer `json:"maintainers"`
	MinKubeVersion      string        `json:"minKubeVersion"`
	Provider            string        `json:"provider"`
	Links               []*Link       `json:"links"`
	Experiments         []string      `json:"experiments"`
	ChaosExpCRDLink     string        `json:"chaosExpCRDLink"`
	Platforms           []string      `json:"platforms"`
	ChaosType           *string       `json:"chaosType"`
}

type SubData struct {
	Date        *float64 `json:"date"`
	Value       string   `json:"value"`
	SubDataName string   `json:"subDataName"`
}

type TemplateInput struct {
	Manifest            string `json:"manifest"`
	TemplateName        string `json:"templateName"`
	TemplateDescription string `json:"templateDescription"`
	ProjectID           string `json:"projectID"`
	IsCustomWorkflow    bool   `json:"isCustomWorkflow"`
}

type Toleration struct {
	TolerationSeconds *int    `json:"tolerationSeconds"`
	Key               *string `json:"key"`
	Operator          *string `json:"operator"`
	Effect            *string `json:"effect"`
	Value             *string `json:"value"`
}

type TotalCount struct {
	Projects  int           `json:"projects"`
	Users     int           `json:"users"`
	Agents    *AgentStat    `json:"agents"`
	Workflows *WorkflowStat `json:"workflows"`
}

type UpdateDBInput struct {
	DbID                      string                   `json:"dbID"`
	DsID                      *string                  `json:"dsID"`
	DbName                    *string                  `json:"dbName"`
	DbTypeName                *string                  `json:"dbTypeName"`
	DbTypeID                  *string                  `json:"dbTypeID"`
	DbInformation             *string                  `json:"dbInformation"`
	ChaosEventQueryTemplate   *string                  `json:"chaosEventQueryTemplate"`
	ChaosVerdictQueryTemplate *string                  `json:"chaosVerdictQueryTemplate"`
	ApplicationMetadataMap    []*ApplicationMetadata   `json:"applicationMetadataMap"`
	PanelGroups               []*UpdatePanelGroupInput `json:"panelGroups"`
	EndTime                   *string                  `json:"endTime"`
	StartTime                 *string                  `json:"startTime"`
	ClusterID                 *string                  `json:"clusterID"`
	RefreshRate               *string                  `json:"refreshRate"`
}

type UpdateMyHub struct {
	ID            string   `json:"id"`
	HubName       string   `json:"hubName"`
	RepoURL       string   `json:"repoURL"`
	RepoBranch    string   `json:"repoBranch"`
	IsPrivate     bool     `json:"isPrivate"`
	AuthType      AuthType `json:"authType"`
	Token         *string  `json:"token"`
	UserName      *string  `json:"userName"`
	Password      *string  `json:"password"`
	SSHPrivateKey *string  `json:"sshPrivateKey"`
	SSHPublicKey  *string  `json:"sshPublicKey"`
}

type UpdatePanelGroupInput struct {
	PanelGroupName string   `json:"panelGroupName"`
	PanelGroupID   string   `json:"panelGroupID"`
	Panels         []*Panel `json:"panels"`
}

type UsageData struct {
	Projects     []*ProjectData `json:"projects"`
	TotalEntries int            `json:"totalEntries"`
	TotalCount   *TotalCount    `json:"totalCount"`
}

type UsageQuery struct {
	Pagination    *Pagination     `json:"pagination"`
	DateRange     *DateRange      `json:"dateRange"`
	Sort          *UsageSortInput `json:"sort"`
	SearchProject *string         `json:"searchProject"`
}

type UsageSortInput struct {
	Field      UsageSort `json:"field"`
	Descending bool      `json:"descending"`
}

type Weightages struct {
	ExperimentName string `json:"experimentName"`
	Weightage      int    `json:"weightage"`
}

type WeightagesInput struct {
	ExperimentName string `json:"experimentName"`
	Weightage      int    `json:"weightage"`
}

type Workflow struct {
	WorkflowID          string        `json:"workflowID"`
	WorkflowManifest    string        `json:"workflowManifest"`
	CronSyntax          string        `json:"cronSyntax"`
	ClusterName         string        `json:"clusterName"`
	WorkflowName        string        `json:"workflowName"`
	WorkflowDescription string        `json:"workflowDescription"`
	Weightages          []*Weightages `json:"weightages"`
	IsCustomWorkflow    bool          `json:"isCustomWorkflow"`
	UpdatedAt           string        `json:"updatedAt"`
	CreatedAt           string        `json:"createdAt"`
	ProjectID           string        `json:"projectID"`
	ClusterID           string        `json:"clusterID"`
	ClusterType         string        `json:"clusterType"`
	IsRemoved           bool          `json:"isRemoved"`
}

type WorkflowFilterInput struct {
	WorkflowName *string `json:"workflowName"`
	ClusterName  *string `json:"clusterName"`
}

type WorkflowRun struct {
	WorkflowRunID      string        `json:"workflowRunID"`
	WorkflowID         string        `json:"workflowID"`
	ClusterName        string        `json:"clusterName"`
	Weightages         []*Weightages `json:"weightages"`
	LastUpdated        string        `json:"lastUpdated"`
	ProjectID          string        `json:"projectID"`
	ClusterID          string        `json:"clusterID"`
	WorkflowName       string        `json:"workflowName"`
	ClusterType        *string       `json:"clusterType"`
	Phase              string        `json:"phase"`
	ResiliencyScore    *float64      `json:"resiliencyScore"`
	ExperimentsPassed  *int          `json:"experimentsPassed"`
	ExperimentsFailed  *int          `json:"experimentsFailed"`
	ExperimentsAwaited *int          `json:"experimentsAwaited"`
	ExperimentsStopped *int          `json:"experimentsStopped"`
	ExperimentsNa      *int          `json:"experimentsNa"`
	TotalExperiments   *int          `json:"totalExperiments"`
	ExecutionData      string        `json:"executionData"`
	IsRemoved          *bool         `json:"isRemoved"`
}

type WorkflowRunDetails struct {
	NoOfRuns  int     `json:"noOfRuns"`
	DateStamp float64 `json:"dateStamp"`
}

type WorkflowRunFilterInput struct {
	WorkflowName   *string            `json:"workflowName"`
	ClusterName    *string            `json:"clusterName"`
	WorkflowStatus *WorkflowRunStatus `json:"workflowStatus"`
	DateRange      *DateRange         `json:"dateRange"`
}

type WorkflowRunInput struct {
	WorkflowID    string           `json:"workflowID"`
	WorkflowRunID string           `json:"workflowRunID"`
	WorkflowName  string           `json:"workflowName"`
	ExecutionData string           `json:"executionData"`
	ClusterID     *ClusterIdentity `json:"clusterID"`
	Completed     bool             `json:"completed"`
	IsRemoved     *bool            `json:"isRemoved"`
}

type WorkflowRunSortInput struct {
	Field      WorkflowSortingField `json:"field"`
	Descending *bool                `json:"descending"`
}

type WorkflowRunStatsRequest struct {
	ProjectID   string    `json:"projectID"`
	WorkflowIDs []*string `json:"workflowIDs"`
}

type WorkflowRunStatsResponse struct {
	TotalWorkflowRuns              int     `json:"totalWorkflowRuns"`
	SucceededWorkflowRuns          int     `json:"succeededWorkflowRuns"`
	FailedWorkflowRuns             int     `json:"failedWorkflowRuns"`
	RunningWorkflowRuns            int     `json:"runningWorkflowRuns"`
	AverageResiliencyScore         float64 `json:"averageResiliencyScore"`
	TotalExperiments               int     `json:"totalExperiments"`
	ExperimentsPassed              int     `json:"experimentsPassed"`
	ExperimentsFailed              int     `json:"experimentsFailed"`
	ExperimentsAwaited             int     `json:"experimentsAwaited"`
	ExperimentsStopped             int     `json:"experimentsStopped"`
	ExperimentsNa                  int     `json:"experimentsNa"`
	PassedPercentage               float64 `json:"passedPercentage"`
	FailedPercentage               float64 `json:"failedPercentage"`
	WorkflowRunSucceededPercentage float64 `json:"workflowRunSucceededPercentage"`
	WorkflowRunFailedPercentage    float64 `json:"workflowRunFailedPercentage"`
}

type WorkflowRunsData struct {
	Value             *float64            `json:"value"`
	WorkflowRunDetail *WorkflowRunDetails `json:"workflowRunDetail"`
}

type WorkflowSortInput struct {
	Field      WorkflowSortingField `json:"field"`
	Descending *bool                `json:"descending"`
}

type WorkflowStat struct {
	Schedules int `json:"schedules"`
	Runs      int `json:"runs"`
	ExpRuns   int `json:"expRuns"`
}

type WorkflowStats struct {
	Date  float64 `json:"date"`
	Value int     `json:"value"`
}

type ChaosWorkFlowInput struct {
	WorkflowID          *string            `json:"workflowID"`
	WorkflowManifest    string             `json:"workflowManifest"`
	CronSyntax          string             `json:"cronSyntax"`
	WorkflowName        string             `json:"workflowName"`
	WorkflowDescription string             `json:"workflowDescription"`
	Weightages          []*WeightagesInput `json:"weightages"`
	IsCustomWorkflow    bool               `json:"isCustomWorkflow"`
	ProjectID           string             `json:"projectID"`
	ClusterID           string             `json:"clusterID"`
}

type AuthType string

const (
	AuthTypeBasic AuthType = "BASIC"
	AuthTypeNone  AuthType = "NONE"
	AuthTypeSSH   AuthType = "SSH"
	AuthTypeToken AuthType = "TOKEN"
)

var AllAuthType = []AuthType{
	AuthTypeBasic,
	AuthTypeNone,
	AuthTypeSSH,
	AuthTypeToken,
}

func (e AuthType) IsValid() bool {
	switch e {
	case AuthTypeBasic, AuthTypeNone, AuthTypeSSH, AuthTypeToken:
		return true
	}
	return false
}

func (e AuthType) String() string {
	return string(e)
}

func (e *AuthType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthType", str)
	}
	return nil
}

func (e AuthType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Invitation string

const (
	InvitationAccepted Invitation = "ACCEPTED"
	InvitationPending  Invitation = "PENDING"
)

var AllInvitation = []Invitation{
	InvitationAccepted,
	InvitationPending,
}

func (e Invitation) IsValid() bool {
	switch e {
	case InvitationAccepted, InvitationPending:
		return true
	}
	return false
}

func (e Invitation) String() string {
	return string(e)
}

func (e *Invitation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Invitation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Invitation", str)
	}
	return nil
}

func (e Invitation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MemberRole string

const (
	MemberRoleOwner  MemberRole = "OWNER"
	MemberRoleEditor MemberRole = "EDITOR"
	MemberRoleViewer MemberRole = "VIEWER"
)

var AllMemberRole = []MemberRole{
	MemberRoleOwner,
	MemberRoleEditor,
	MemberRoleViewer,
}

func (e MemberRole) IsValid() bool {
	switch e {
	case MemberRoleOwner, MemberRoleEditor, MemberRoleViewer:
		return true
	}
	return false
}

func (e MemberRole) String() string {
	return string(e)
}

func (e *MemberRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MemberRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MemberRole", str)
	}
	return nil
}

func (e MemberRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TimeFrequency string

const (
	TimeFrequencyDaily   TimeFrequency = "DAILY"
	TimeFrequencyHourly  TimeFrequency = "HOURLY"
	TimeFrequencyMonthly TimeFrequency = "MONTHLY"
)

var AllTimeFrequency = []TimeFrequency{
	TimeFrequencyDaily,
	TimeFrequencyHourly,
	TimeFrequencyMonthly,
}

func (e TimeFrequency) IsValid() bool {
	switch e {
	case TimeFrequencyDaily, TimeFrequencyHourly, TimeFrequencyMonthly:
		return true
	}
	return false
}

func (e TimeFrequency) String() string {
	return string(e)
}

func (e *TimeFrequency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimeFrequency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TimeFrequency", str)
	}
	return nil
}

func (e TimeFrequency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UsageSort string

const (
	UsageSortAgents         UsageSort = "AGENTS"
	UsageSortExperimentRuns UsageSort = "EXPERIMENT_RUNS"
	UsageSortOwner          UsageSort = "OWNER"
	UsageSortProject        UsageSort = "PROJECT"
	UsageSortSchedules      UsageSort = "SCHEDULES"
	UsageSortTeamMembers    UsageSort = "TEAM_MEMBERS"
	UsageSortWorkflowRuns   UsageSort = "WORKFLOW_RUNS"
)

var AllUsageSort = []UsageSort{
	UsageSortAgents,
	UsageSortExperimentRuns,
	UsageSortOwner,
	UsageSortProject,
	UsageSortSchedules,
	UsageSortTeamMembers,
	UsageSortWorkflowRuns,
}

func (e UsageSort) IsValid() bool {
	switch e {
	case UsageSortAgents, UsageSortExperimentRuns, UsageSortOwner, UsageSortProject, UsageSortSchedules, UsageSortTeamMembers, UsageSortWorkflowRuns:
		return true
	}
	return false
}

func (e UsageSort) String() string {
	return string(e)
}

func (e *UsageSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UsageSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UsageSort", str)
	}
	return nil
}

func (e UsageSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WorkflowRunStatus string

const (
	WorkflowRunStatusAll        WorkflowRunStatus = "ALL"
	WorkflowRunStatusFailed     WorkflowRunStatus = "FAILED"
	WorkflowRunStatusRunning    WorkflowRunStatus = "RUNNING"
	WorkflowRunStatusSucceeded  WorkflowRunStatus = "SUCCEEDED"
	WorkflowRunStatusTerminated WorkflowRunStatus = "TERMINATED"
)

var AllWorkflowRunStatus = []WorkflowRunStatus{
	WorkflowRunStatusAll,
	WorkflowRunStatusFailed,
	WorkflowRunStatusRunning,
	WorkflowRunStatusSucceeded,
	WorkflowRunStatusTerminated,
}

func (e WorkflowRunStatus) IsValid() bool {
	switch e {
	case WorkflowRunStatusAll, WorkflowRunStatusFailed, WorkflowRunStatusRunning, WorkflowRunStatusSucceeded, WorkflowRunStatusTerminated:
		return true
	}
	return false
}

func (e WorkflowRunStatus) String() string {
	return string(e)
}

func (e *WorkflowRunStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WorkflowRunStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WorkflowRunStatus", str)
	}
	return nil
}

func (e WorkflowRunStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WorkflowSortingField string

const (
	WorkflowSortingFieldName WorkflowSortingField = "NAME"
	WorkflowSortingFieldTime WorkflowSortingField = "TIME"
)

var AllWorkflowSortingField = []WorkflowSortingField{
	WorkflowSortingFieldName,
	WorkflowSortingFieldTime,
}

func (e WorkflowSortingField) IsValid() bool {
	switch e {
	case WorkflowSortingFieldName, WorkflowSortingFieldTime:
		return true
	}
	return false
}

func (e WorkflowSortingField) String() string {
	return string(e)
}

func (e *WorkflowSortingField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WorkflowSortingField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WorkflowSortingField", str)
	}
	return nil
}

func (e WorkflowSortingField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
