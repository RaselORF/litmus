- name: Generate a random strint as suffix to topic name 
  shell: echo $(mktemp) | cut -d '.' -f 2
  args: 
    executable: /bin/bash
  register: uniqstr

- name: Set the kafka topic name to a variable
  set_fact:
    kafka_topic: "topic-{{ uniqstr.stdout }}"

- name: Generate the kafka liveness spec from template
  template: 
    src: /utils/apps/kafka/kafka_liveness.j2
    dest: kafka_liveness.yml

- name: Apply the pub-sub kafka liveness applicaton
  shell: 
    kubectl apply -f kafka_liveness.yml -n {{ kafka_ns }}
  args:
    executable: /bin/bash
  register: result
  failed_when: "result.rc != 0"

- name: Confirm that the kafka liveness pod is running
  shell: 
    kubectl get pod -l name=kafka-liveness --no-headers -n {{ kafka_ns }}
  args:
    executable: /bin/bash
  register: result
  until: "'Running' in result.stdout"
  delay: 1
  retries: 120

- name: Fetch the kafka-liveness pod name
  shell: 
    kubectl get pods -n {{ kafka_ns }} -l name=kafka-liveness -o jsonpath='{.items[0].metadata.name}' 
  register: kafka_liveness_pod

- name: Obtain the leader broker ordinality for the topic (partition) created by kafka-liveness
  shell: > 
    kubectl exec {{ kafka_liveness_pod.stdout }} -n {{ kafka_ns }} -c kafka-consumer 
    -- kafka-topics --topic {{ kafka_topic }} --describe --zookeeper {{ zk_service }}:{{ zk_port }}
    | grep -o 'Leader: [^[:space:]]*' | awk '{print $2}'
  args:
    executable: /bin/bash
  register: ordinality
  failed_when: "ordinality.rc != 0"

- name: Determine the leader broker pod name
  shell: 
    kubectl get pods -l app=cp-kafka --no-headers -o custom-columns=:metadata.name | grep '^.*-{{ ordinality.stdout }}$'
  args:
    executable: /bin/bash
  register: leader_broker
  failed_when: "result.rc != 0"

- name: Set the kafka broker to be subjected to chaos
  set_fact: 
    liveness_topic_leader: "{{ leader_broker.stdout }}"

