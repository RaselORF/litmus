# create-volume.yml
########################################################################################################################################################################
#Steps:

#1. Creating volume in packet cloud
#2. Creating a file for store volume ID
#3. Getting cluster device ID from file
#4. Attaching volume to devide in packet
#5. Fetching device detail using device id
#6. Executing volume attach command in nodes
########################################################################################################################################################################

---
- hosts: localhost

  vars:
    packet_api_token: "{{ packet_api }}"
  
  vars_files:
    - vars.yml

  tasks:
    - block:
        - name: Create a volume in packet cloud
          uri:
            url: "{{ base_url }}/projects/{{ project_id }}/storage"
            method: POST
            headers:
              X-Auth-Token: "{{ packet_api }}"
            body: '{
              "plan": "{{ performance_tier }}",
              "facility": "{{ location }}",
              "billing_cycle": "{{ billing_cycle }}",
              "size": "{{ size }}"
              }'
            status_code: 201
            body_format: json
          register: volume_id
          with_lines: cat "{{ device_id_location }}"

        - name: Create a file for store volume Ids
          lineinfile:
            create: yes
            state: present
            path: "/tmp/packet/volume_id"
            line: "{{ item.json.id }}"
            mode: 0755
          with_items: "{{ volume_id.results }}"

        - name: get the Device ID from file
          command: cat "{{ device_id_location }}"
          register: device_id

        - name: Attach volume to device
          uri:
            url: "{{ base_url }}/storage/{{ item.0.json.id }}/attachments"
            method: POST
            headers:
              X-Auth-Token: "{{ packet_api }}"
            body: '{
              "device_id": "{{ item.1 }}"
              }'
            status_code: 201
            body_format: json
          with_together:
             - "{{ volume_id.results }}"
             - "{{ device_id.stdout_lines }}"

        - name: Fetch device detail using device id
          uri:
            url: "{{ base_url }}/devices/{{ item }}"
            method: GET
            headers:
              X-Auth-Token: "{{ packet_api }}"
            status_code: 200
            body_format: json
          register: device_ip
          with_lines: cat "{{ device_id_location }}"

        - name: Executing volume attach command in nodes
          args:
            executable: /bin/bash
          shell: sleep 60 && packet-block-storage-attach
          delegate_to: "root@{{ item.json.ip_addresses[0].address }}"
          with_items: "{{ device_ip.results }}"
          register: result
          retries: 3
          delay: 10
          until: result is not failed

        - block:
            - name: Creating mount directory
              file:
                path: "{{ mount_path }}"
                state: directory
              delegate_to: "root@{{ item.json.ip_addresses[0].address }}"
              with_items: "{{ device_ip.results }}"

            - name: Create ext4 filesystem
              filesystem:
                fstype: ext4
                dev: "/dev/mapper/{{ item.1.json.name }}"
              become: true
              delegate_to: "root@{{ item.0.json.ip_addresses[0].address }}"
              with_together: 
                 - "{{ device_ip.results }}"
                 - "{{ volume_id.results }}"

            - name: mounting disk to Nodes
              mount:
                path: "{{ mount_path }}"
                src: "/dev/mapper/{{ item.1.json.name }}"
                fstype: ext4
                state: mounted
              become: true
              delegate_to: "root@{{ item.0.json.ip_addresses[0].address }}"
              with_together: 
                 - "{{ device_ip.results }}"
                 - "{{ volume_id.results }}"

          when: disk_action == 'format'

        - name: Set Test Status
          set_fact:
            flag: "Test Passed"

      rescue:
        - name: Set Test Status
          set_fact:
            flag: "Test Failed"