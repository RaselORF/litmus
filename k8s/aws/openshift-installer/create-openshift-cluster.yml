---
- hosts: localhost

  vars_files:
    - vars.yml
  
  vars:
    vpc_name:

  tasks:
    - block:

        - name: Creating aws instances
          include_tasks: ./create-instance.yml

        - name: Getting master DNS
          shell: cat dns.csv | awk 'NR == 1'
          register: master_dns

        - name: Getting the Workers DNS
          shell: cat dns.csv | grep -v {{ master_dns.stdout }}
          register: workers_dns 
 
        - name: Generating master SSH key
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "ssh-keygen -t rsa -N \"\" -f ~/.ssh/id_rsa"'
          
        - name: Getting master SSH key
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "cat ~/.ssh/id_rsa.pub"'
          register: master_key

        - name: Generating workers key
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{item}} 'sudo su -c "ssh-keygen -t rsa -N \"\" -f ~/.ssh/id_rsa"'
          with_items: "{{ workers_dns.stdout_lines }}"

        - name: Copying ssh-key into master
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "echo {{ master_key.stdout }} >> ~/.ssh/authorized_keys"'
                     
        - name: Copying ssh-key into Nodes
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{item}} 'sudo su -c "echo {{ master_key.stdout }} >> ~/.ssh/authorized_keys"'
          with_items: "{{ workers_dns.stdout_lines }}"

        - name: Installing dependencies on master
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'bash -s' < dependency.sh master
          ignore_errors: yes

        - name: Installing dependecies on Nodes
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{item}} 'bash -s' < dependency.sh 
          with_items: "{{ workers_dns.stdout_lines }}"

        - name: SSH from master to each Nodes using DNS
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "ssh -o StrictHostKeyChecking=no root@{{item}} ls"'
          with_lines: cat ./dns.csv

        - name: SSH from master to each Nodes using Public_IP
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "ssh -o StrictHostKeyChecking=no root@{{item}} ls"'
          with_lines: cat ./ip.csv  
        
        - name: Replacing master_dns name in inventory
          replace:
            path: ./inventory.yml
            regexp: "master_pub_dns"
            replace: "{{ master_dns.stdout }}"

        - name: Replacing master_dns name in inventory
          replace:
            path: ./inventory.yml
            regexp: "master_pub_dns"
            replace: "{{ master_dns.stdout }}"  

        - name: Get IP list
          shell: cat ./ip.csv
          register: ip_list

        - name: Replace 
          replace:
            path: ./inventory.yml
            regexp: "{{item.0}}"
            replace: "{{item.1}}"
          with_together: 
            - [ 'master_pub_ip', 'node1_pub_ip', 'node2_pub_ip', 'node3_pub_ip' ]
            - "{{ ip_list.stdout_lines }}"            

        - name: Getting the content of inventory
          shell: cat ./inventory.yml
          register: inventory_spec

        - name: Copying the content of inventory into master
          args:
            executable: /bin/bash
          shell: scp -o StrictHostKeyChecking=no -i openshift.ppk inventory.yml centos@{{ master_dns.stdout }}:/home/centos/

        - name: Running openshift pre-requisites
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "ansible-playbook -i /home/centos/inventory.yml /home/centos/openshift-ansible/playbooks/prerequisites.yml -vv"'
          async: 100
          ignore_errors: yes

        # Running pre-requisite in first attempt get stuck. Running pre-requisites again.  

        - name: Running openshift pre-requisites
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "ansible-playbook -i /home/centos/inventory.yml /home/centos/openshift-ansible/playbooks/prerequisites.yml -vv"'

        - name: Installing Openshift cluster
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "ansible-playbook -i /home/centos/inventory.yml /home/centos/openshift-ansible/playbooks/deploy_cluster.yml -vv"'

        - name: Disabling selinux on each nodes 
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{item}} 'sudo su -c "setenforce 0"'
          with_lines: cat ./ip.csv  

        - name: Getting the infra node name
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "oc get nodes | grep infra"' | awk '{print $1}'
          register: infra_node

        - name: Making infra node schedulable
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "oc label node {{ infra_node.stdout }} node-role.kubernetes.io/compute=true"'

        - name: Copying the expect script in master 
          args:
            executable: /bin/bash
          shell: scp -o StrictHostKeyChecking=no -i openshift.ppk expect.sh centos@{{ master_dns.stdout }}:/home/centos/

        - name: Setting up kube config of cluster
          shell: |
            ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "cd ; cp ~/.kube/config /home/centos/"' 
            ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} sudo chmod 764 config
            scp -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }}:/home/centos/config ~/.kube/

        - name: Creating admin user with cluster/admin-role
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "oc adm policy add-cluster-role-to-user cluster-admin admin --as=system:admin"'
          
        - name: Executing Expect script for setting up admin password
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "/bin/expect expect.sh"'
          
        - name: Allowing containers in project to run as root
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "oc adm policy add-scc-to-user anyuid -z default --as=system:admin"'

        - name: Allowing host access
          shell: ssh -o StrictHostKeyChecking=no -i openshift.ppk centos@{{ master_dns.stdout }} 'sudo su -c "oc adm policy add-scc-to-user hostaccess admin -- as:system:admin"'

        - name: Setting up Security Constraints
          shell: |
            kubectl patch scc/restricted -p '{"allowHostDirVolumePlugin":true}'
            kubectl patch scc/restricted -p '{"allowHostNetwork":true}'
            kubectl patch scc/restricted -p '{"allowPrivilegedContainer":true}'
            kubectl patch scc/restricted -p '{"allowedCapabilities":["IPC_LOCK", "SYS_RESOURCE"]}'
            kubectl patch scc/restricted -p '{"runAsUser":{"type": "RunAsAny"}}'
  