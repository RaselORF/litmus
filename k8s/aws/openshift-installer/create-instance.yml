---
    - block:
        
        - name: Generate VPC random name
          command: python ../../utils/name_generator/namesgenerator.py
          register: vpc_name
          when: not vpc_name
        - set_fact:
            vpc_name: "{{ vpc_name.stdout }}"
          when: vpc_name.stdout is defined

        - name: create VPC
          ec2_vpc_net:
            name: "{{ vpc_name }}"
            cidr_block: "{{ cidr_block }}"
            region: "{{ region }}"
            state: present
          register: vpc 

        - name: associate subnet to the VPC
          ec2_vpc_subnet:
           state: present
           vpc_id: "{{ vpc.vpc.id }}"
           region: "{{ region }}"
           cidr: "{{ cidr_block2 }}"
           map_public: yes
          register: subnet

        - name: create Internet Gateway
          ec2_vpc_igw:
           vpc_id: "{{ vpc.vpc.id }}"
           region: "{{ region }}"
           state: "present"
           tags:
             Name: "{{ igw_name }}"
          register: igw   
          
        - name: Route Internet Gateway
          ec2_vpc_route_table:
           vpc_id: "{{ vpc.vpc.id }}"
           region: "{{ region }}"
           subnets:
             - "{{ subnet.subnet.id }}"
           routes:
             - dest: "{{ destination_cidr }}"
               gateway_id: "{{ igw.gateway_id  }}"
          register: route     
            
        - name: Create Security Group
          ec2_group:
           name: Web DMZ
           description: DMZ Security Group
           vpc_id: "{{ vpc.vpc.id }}"
           region: "{{ region }}"
           rules:
             - proto: all
               cidr_ip: 0.0.0.0/0
           rules_egress:
             - proto: all
               cidr_ip: 0.0.0.0/0    
          register: security_group 

        - name: create a new ec2 key pair
          ec2_key:
           name: openshift_keypair
           region: "{{ region }}"
          register: keypair     

        - name: Copy EC2 Private Key locally so it can be later on used to SSH into the instance
          copy: content="{{ keypair.key.private_key }}" dest={{ ec2_key_directory }}openshift.ppk
          when: keypair.changed == true 

        - name: Create EC2 Instances
          ec2:
           image: "{{ image_ami }}"
           wait: yes
           instance_type: "{{ instance_size }}"
           region: "{{ region }}"
           group_id: "{{ security_group.group_id }}"
           vpc_subnet_id: "{{ subnet.subnet.id }}"
           key_name: "{{ keypair.key.name }}"
           exact_count: "{{ node_count }}"
           volumes:
           - device_name: /dev/sda1
             volume_size: 100
             delete_on_termination: true
           count_tag:
            Name: Demo 
          register: ec2

        - name: Create volumes
          ec2_vol:
           instance: '{{ item.id }}'
           volume_size: 50
           volume_type: gp2
           device_name: /dev/xvdf 
           region: "{{ region }}"
           delete_on_termination: 'yes'  
          with_items: "{{ec2.instances}}"

        - name: Gathering volume facts
          ec2_vol_facts:
            region: "{{ region }}"
            filters:
              attachment.instance-id: "{{ item.id }}"
          with_items: "{{ec2.instances}}"
          register: gathered_volumes

        - name: Creating a file for storing instance ID
          lineinfile:
            create: yes
            state: present
            path: "./ec2-id"
            line: '{{ item.id }}'
            mode: 0755
          with_items: "{{ec2.instances}}"

        - name: Create a csv file for store all Ids
          lineinfile:
            create: yes
            state: present
            path: "./id.csv"
            line: 'vpc_id:{{ vpc.vpc.id }},vpc_name:{{ vpc.vpc.tags.Name }},subnet_id:{{ subnet.subnet.id }},gateway_id:{{ igw.gateway_id }},route_table_id:{{ route.route_table.id }}'
            mode: 0755

        - name: Creating file for storing volume ID
          lineinfile:
            create: yes
            state: present
            path: "./vol-id"
            line: "{{ item.volumes[0].id }}"
            mode: 0755
          with_items: "{{gathered_volumes.results}}"  

        - name: Creating file for storing Instance DNS names
          lineinfile:
            create: yes
            state: present
            path: "./dns.csv"
            line: '{{ item.dns_name }}'
            mode: 0755  
          with_items: "{{ec2.instances}}"

        - name: Creating file for storing Instance Public IP
          lineinfile:
            create: yes
            state: present
            path: "./ip.csv"
            line: '{{ item.public_ip }}'
            mode: 0755  
          with_items: "{{ec2.instances}}"  

        - name: Changeing mode of ssh-key
          shell: chmod 400 openshift.ppk  

        
      
        
  
