- block:

  - name: Fetching name of configmap
    shell: >
      kubectl get chaosexperiment -n {{ c_app_ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ c_experiment_name }}")].spec.definition.configmaps[0].name}'
    args:
      executable: /bin/bash
    register: c_map_name

  - name: Fetching mount path for configmap
    shell: >
      kubectl get chaosexperiment -n {{ c_app_ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ c_experiment_name }}")].spec.definition.configmaps[0].mountPath}'
    args:
      executable: /bin/bash
    register: c_mount_path_configmap

  when: configMap_defined != ''
  
- block:

  - name: Fetching name of secret
    shell: >
      kubectl get chaosexperiment -n {{ c_app_ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ c_experiment_name }}")].spec.definition.secrets[0].name}'
    args:
      executable: /bin/bash
    register: c_secret_name

  - name: Fetching mount path for secret
    shell: >
      kubectl get chaosexperiment -n {{ c_app_ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ c_experiment_name }}")].spec.definition.secrets[0].mountPath}'
    args:
      executable: /bin/bash
    register: c_mount_path
  
  when: secret_defined != ''

- name: Get the job yaml
  shell:
    kubectl run {{ c_experiment_name }}-{{random_string.stdout}} --restart=OnFailure --image={{c_image.stdout}}
    --namespace={{c_app_ns}} --serviceaccount={{ c_svc_acc }} --image-pull-policy=Always 
    --labels={{c_job_labels.stdout}} {{c_env_list}} --dry-run -oyaml --command -- /bin/bash {{c_job_args.stdout}} > cjob.yml
  args:
    executable: /bin/bash

- block:

  - name: Include the volumeMounts in jobYml - configmap only
    lineinfile:
      dest: cjob.yml
      insertafter: "resources: {}"
      state: present
      line: '        {{item}}'
    with_items:
    - "  mountPath: {{c_mount_path_configmap.stdout}}"
    - "- name: {{c_map_name.stdout}}"
    - "volumeMounts:"

  - name: Include the volumes in jobYml  - configmap only
    lineinfile:
      dest: cjob.yml
      insertafter: "serviceAccountName"
      state: present
      line: '      {{item}}'
    with_items:
    - "    name: {{c_map_name.stdout}}"
    - "  configMap:"
    -   "- name: {{c_map_name.stdout}}"
    - "volumes:"

  when: configMap_defined != '' and secret_defined == ''

- block:

  - name: Include the volumeMounts in jobYml  - secret only
    lineinfile:
      dest: cjob.yml
      insertafter: "resources: {}"
      state: present
      line: '        {{item}}'
    with_items:
    - "  mountPath: {{ c_mount_path.stdout }}"
    - "- name: {{c_secret_name.stdout}}"
    - "volumeMounts:"

  - name: Include the volumes in jobYml
    lineinfile:
      dest: cjob.yml
      insertafter: "serviceAccountName"
      state: present
      line: '      {{item}}'
    with_items:
    - "    secretName: {{  c_secret_name.stdout }}"
    - "  secret:"
    -   "- name: {{c_secret_name.stdout}}"
    - "volumes:"

  when: configMap_defined == '' and secret_defined != ''

- block:

  - name: Include the volumeMounts in jobYml  - secret and configmap both
    lineinfile:
      dest: cjob.yml
      insertafter: "resources: {}"
      state: present
      line: '        {{item}}'
    with_items:
    - "  mountPath: {{ c_mount_path.stdout }}"
    - "- name: {{c_secret_name.stdout}}"
    - "  mountPath: {{c_mount_path_configmap.stdout}}"
    - "- name: {{c_map_name.stdout}}"
    - "volumeMounts:"

  - name: Include the volumes in jobYml
    lineinfile:
      dest: cjob.yml
      insertafter: "serviceAccountName"
      state: present
      line: '      {{item}}'
    with_items:
    - "    secretName: {{  c_secret_name.stdout }}"
    - "  secret:"
    -   "- name: {{c_secret_name.stdout}}"
    - "    name: {{c_map_name.stdout}}"
    - "  configMap:"
    -   "- name: {{c_map_name.stdout}}"
    - "volumes:"

  when: configMap_defined != '' and secret_defined != ''

- name: create job
  shell:
    kubectl create -f cjob.yml -n {{c_app_ns}} 
  args:
    executable: /bin/bash
