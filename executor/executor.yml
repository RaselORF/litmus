---
- name: Verify if ChaosExperiment CR is available 
  shell: >
    kubectl get chaosexperiment {{ c_experiment_name }} 
    --no-headers -o custom-columns=:metadata.name
  args:
    executable: /bin/bash
  register: c_exp_name
  failed_when: "c_experiment_name not in c_exp_name.stdout"

- name: Derive chaos job path from spec of experiment
  shell: >
    kubectl get chaosexperiment {{ c_experiment_name }}
    --no-headers -o custom-columns=:spec.definition.litmusbook
  args:
   executable: /bin/bash
  register: c_job

- name: Replace the service account on the litmusbook
  replace:
    path: "{{ c_job.stdout }}"
    regexp: 'CHAOS_SERVICE_ACCOUNT'
    replace: "{{ c_svc_acc }}" 

- name: Obtain the env param list length from spec of experiment
  shell: >
    kubectl get chaosexperiment {{ c_experiment_name }} -o json
    | jq '.spec.definition.env | length'
  args:
    executable: /bin/bash
  register: c_env_length

- set_fact:
    envNameList: ["APP_NAMESPACE", "APP_LABEL", "APP_KIND", "CHAOSENGINE"]
    envValueList: ["{{ c_app_ns }}", "{{ c_app_label }}", "{{ c_app_kind }}", "{{ c_engine }}"]

- include: experiment_env_getter.yml
  with_sequence: start=0 count="{{c_env_length.stdout | int}}"

- name: Obtain the env param list length from spec of Engine
  shell: >
    kubectl get chaosengine engine-nginx -o json 
    | jq '.spec.experiments[] | select(.name == "{{ c_experiment_name }}") | .spec.components | length'
  args:
    executable: /bin/bash
  register: c_engine_envlen

- include: engine_env_getter.yml
  with_sequence: start=0 count="{{ c_engine_envlen.stdout | int }}"

- name: display env lists
  debug:
    msg: "namelist: {{ envNameList }}, valuelist: {{ envValueList }}"

- name: display env lists
  debug:
    msg: "namelist: {{ envNameList }}, valuelist: {{ envValueList }}"

- include: experiment_env_patcher.yml
  vars:
    envName: "{{ item.0 }}"
    envValue: "{{ item.1 }}"
  with_together:
    - "{{ envNameList }}"
    - "{{ envValueList }}"

- name: Get litmus chaos job label to monitor its progress
  shell: >
    kubectl create -f {{ c_job.stdout }} 
    --dry-run -o jsonpath='{.spec.template.metadata.labels.experiment}'
  args:
   executable: /bin/bash
  register: c_job_label

- block:

    - name: Generate a simple random sleep duration
      set_fact: 
        rand_sleep: "{{ 180 | random }}"
      when: c_max is not defined

    - name: Generate a random sleep duration based on total chaos duration
      set_fact: 
        rand_sleep: "{{ (c_max|int / 4)|int | random }}"
      when: c_max is defined 
    
    - name: Sleep for random duration before triggering experiments
      wait_for:
        timeout: "{{ rand_sleep }}" 
      
  when: c_rand is defined and c_rand == "true" 

- debug:
    msg: "Triggering chaos experiment: c_experiment_name"

- name: Run the chaos experiment job
  shell:
    kubectl create -f {{ c_job.stdout }}
  args:
   executable: /bin/bash
  register: c_trigger
  failed_when: "c_trigger.rc != 0"
  
- name: Monitoring the litmus chaos job for completion
  shell: >
    kubectl get job -n {{ c_app_ns}} -l experiment={{ c_job_label.stdout }}
    --no-headers -o custom-columns=:status.conditions[].type | sort | uniq
  args:
   executable: /bin/bash
  register: c_job_status
  until: c_job_status.stdout == "Complete"
  delay: 1
  retries: 300

