---
- name: Get Master Status
  command: ansible "{{groups['kubernetes-kubemasters'].0}}" -m ping
  register: result_status
  delegate_to: 127.0.0.1

- name: 
  debug:
    msg: "Ending play, Master UNREACHABLE."
  when: "'FAILED' in result_status.stdout"

- name: Ending Playbook Run - Master is not UP.
  meta: end_play
  when: "'FAILED' in result_status.stdout"

- block:
    - name: Load images from Archive
      command: docker load --input "{{ k8s_images }}"
      args:
        chdir: "{{ k8s_images_path }}"
      become: true

    - name: Install deb packages
      apt:
        deb: "{{ k8s_images_path }}/{{ item }}"
      with_items: "{{ k8s_dpkg_packages }}"
      become: true
  when: build_type == "normal"

- name: Get Token Name from Master
  shell: >
    source ~/.profile;
    kubectl -n kube-system get secrets
    | grep bootstrap-token | cut -d " " -f1
    | cut -d "-" -f3
    | sed "s|\r||g"
  args:
    executable: /bin/bash
  register: result_token_name
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

- name: Get Token from Master
  shell: >
    source ~/.profile; 
    kubectl -n kube-system get secrets bootstrap-token-"{{result_token_name.stdout}}"
    -o yaml | grep token-secret | cut -d ":" -f2
    | cut -d " " -f2 | base64 -d
    | sed "s|{||g;s|}||g"
    | sed "s|:|.|g" | xargs echo
  args:
    executable: /bin/bash
  register: result_token
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  
- name: Get Cluster IP from Master
  shell: >
    source ~/.profile;
    kubectl get svc -o yaml | grep clusterIP | cut -d ":" -f2 | cut -d " " -f2
  args:
    executable: /bin/bash
  register: result_cluster
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

- name: Get Token-sha from Master
  shell: >
    openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt
    | openssl rsa -pubin -outform der 2>/dev/null
    | openssl dgst -sha256 -hex
    | sed "s/^.* //"
  args:
    executable: /bin/bash
  register: result_token_sha
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

- name: Save Token and Cluster IP
  set_fact:
    cluster_ip: "{{ result_cluster.stdout }}"
    token: "{{ result_token }}"
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  delegate_facts: True

- block:
   - name: Get the openebs-iscsi flexvolume driver
     get_url:
       url: "{{ openebs_iscsi_driver }}"
       dest: "{{ ansible_env.HOME}}/{{ flexvol_driver_alias }}"
       force: yes
     register: result
     until:  "'OK' in result.msg"
     delay: 5
     retries: 3

   - name: Create flexvol driver destination
     file:
       path: "{{ flexvol_driver_path }}"
       state: directory
       mode: 0755
     become: true

   - name: Copy script to flexvol driver location
     copy:
       src: "{{ ansible_env.HOME }}/{{ flexvol_driver_alias }}"
       dest: "{{ flexvol_driver_path }}"
       mode: "u+rwx"
       force: yes
       remote_src: yes
     become: true
          
   - name: Reset kubeadm
     command: kubeadm reset
     become: true

   - name: Setup k8s Hosts 
     script: "{{configure_scripts}} 
             --masterip={{hostvars[groups['kubernetes-kubemasters'][0]]['ansible_ssh_host']}} 
             --token={{result_token_name.stdout}}.{{result_token.stdout}}
             --clusterip={{result_cluster.stdout}} 
             --token-sha={{result_token_sha.stdout}}"
     become: true  
     notify: 
       - Reload systemd
       - Restart kubelet
  when: build_type == "normal"

- block:
   - name: Change file mode
     file:
       path: "{{k8s_images_path}}/{{configure_scripts}}"
       mode: "u+rwx"
     become: true

   - name: Setup k8s Hosts
     shell: >
       source ~/.profile;
       "{{k8s_images_path}}/{{configure_scripts}}"
       --masterip="{{hostvars[groups['kubernetes-kubemasters'][0]]['ansible_ssh_host']}}"
       --token="{{result_token_name.stdout}}.{{result_token.stdout}}"
       --clusterip="{{result_cluster.stdout}}"
     args:
       executable: /bin/bash
     become: true
     notify:
       - Reload systemd
       - Restart kubelet
  when: build_type == "quick"

- meta: flush_handlers 
